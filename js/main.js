/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3335/site/modules/FieldtypePageGrid/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/color-name/index.js":
/*!**************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/color-name/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "../../node_modules/lodash/_Symbol.js":
/*!************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_Symbol.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../../node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../../node_modules/lodash/_baseGetTag.js":
/*!****************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_baseGetTag.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../../node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../../node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../../node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../../node_modules/lodash/_freeGlobal.js":
/*!****************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_freeGlobal.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/lodash/_getRawTag.js":
/*!***************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_getRawTag.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../../node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../../node_modules/lodash/_objectToString.js":
/*!********************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_objectToString.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../../node_modules/lodash/_root.js":
/*!**********************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/_root.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../../node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../../node_modules/lodash/debounce.js":
/*!*************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/debounce.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../../node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "../../node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "../../node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "../../node_modules/lodash/isObject.js":
/*!*************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/isObject.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../../node_modules/lodash/isObjectLike.js":
/*!*****************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/isObjectLike.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../../node_modules/lodash/isSymbol.js":
/*!*************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/isSymbol.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../../node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../../node_modules/lodash/now.js":
/*!********************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/now.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../../node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "../../node_modules/lodash/throttle.js":
/*!*************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/throttle.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var debounce = __webpack_require__(/*! ./debounce */ "../../node_modules/lodash/debounce.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../../node_modules/lodash/isObject.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ "../../node_modules/lodash/toNumber.js":
/*!*************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/lodash/toNumber.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../../node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../../node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "../../node_modules/undo-manager/lib/undomanager.js":
/*!**************************************************************************************************************!*\
  !*** /Users/jploch/dev/pgrid-dev/src/modules/FieldtypePageGrid/node_modules/undo-manager/lib/undomanager.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
Simple Javascript undo and redo.
https://github.com/ArthurClemens/Javascript-Undo-Manager
*/

;(function() {

	'use strict';

    function removeFromTo(array, from, to) {
        array.splice(from,
            !to ||
            1 + to - from + (!(to < 0 ^ from >= 0) && (to < 0 || -1) * array.length));
        return array.length;
    }

    var UndoManager = function() {

        var commands = [],
            index = -1,
            limit = 0,
            isExecuting = false,
            callback,
            
            // functions
            execute;

        execute = function(command, action) {
            if (!command || typeof command[action] !== "function") {
                return this;
            }
            isExecuting = true;

            command[action]();

            isExecuting = false;
            return this;
        };

        return {

            /*
            Add a command to the queue.
            */
            add: function (command) {
                if (isExecuting) {
                    return this;
                }
                // if we are here after having called undo,
                // invalidate items higher on the stack
                commands.splice(index + 1, commands.length - index);

                commands.push(command);
                
                // if limit is set, remove items from the start
                if (limit && commands.length > limit) {
                    removeFromTo(commands, 0, -(limit+1));
                }
                
                // set the current index to the end
                index = commands.length - 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Pass a function to be called on undo and redo actions.
            */
            setCallback: function (callbackFunc) {
                callback = callbackFunc;
            },

            /*
            Perform undo: call the undo function at the current index and decrease the index by 1.
            */
            undo: function () {
                var command = commands[index];
                if (!command) {
                    return this;
                }
                execute(command, "undo");
                index -= 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Perform redo: call the redo function at the next index and increase the index by 1.
            */
            redo: function () {
                var command = commands[index + 1];
                if (!command) {
                    return this;
                }
                execute(command, "redo");
                index += 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Clears the memory, losing all stored states. Reset the index.
            */
            clear: function () {
                var prev_size = commands.length;

                commands = [];
                index = -1;

                if (callback && (prev_size > 0)) {
                    callback();
                }
            },

            hasUndo: function () {
                return index !== -1;
            },

            hasRedo: function () {
                return index < (commands.length - 1);
            },

            getCommands: function () {
                return commands;
            },

            getIndex: function() {
                return index;
            },
            
            setLimit: function (l) {
                limit = l;
            }
        };
    };

	if (true) {
		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return UndoManager;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}());


/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../templates/googleFonts.json":
/*!*************************************!*\
  !*** ../templates/googleFonts.json ***!
  \*************************************/
/*! exports provided: ABeeZee, ADLaM Display, Abel, Abhaya Libre, Aboreto, Abril Fatface, Abyssinica SIL, Aclonica, Acme, Actor, Adamina, Advent Pro, Agdasima, Aguafina Script, Akatab, Akaya Kanadaka, Akaya Telivigala, Akronim, Akshar, Aladin, Alata, Alatsi, Albert Sans, Aldrich, Alef, Alegreya, Alegreya SC, Alegreya Sans, Alegreya Sans SC, Aleo, Alex Brush, Alexandria, Alfa Slab One, Alice, Alike, Alike Angular, Alkalami, Alkatra, Allan, Allerta, Allerta Stencil, Allison, Allura, Almarai, Almendra, Almendra Display, Almendra SC, Alumni Sans, Alumni Sans Collegiate One, Alumni Sans Inline One, Alumni Sans Pinstripe, Amarante, Amaranth, Amatic SC, Amethysta, Amiko, Amiri, Amiri Quran, Amita, Anaheim, Andada Pro, Andika, Anek Bangla, Anek Devanagari, Anek Gujarati, Anek Gurmukhi, Anek Kannada, Anek Latin, Anek Malayalam, Anek Odia, Anek Tamil, Anek Telugu, Angkor, Annie Use Your Telescope, Anonymous Pro, Antic, Antic Didone, Antic Slab, Anton, Antonio, Anuphan, Anybody, Aoboshi One, Arapey, Arbutus, Arbutus Slab, Architects Daughter, Archivo, Archivo Black, Archivo Narrow, Are You Serious, Aref Ruqaa, Aref Ruqaa Ink, Arima, Arimo, Arizonia, Armata, Arsenal, Artifika, Arvo, Arya, Asap, Asap Condensed, Asar, Asset, Assistant, Astloch, Asul, Athiti, Atkinson Hyperlegible, Atma, Atomic Age, Aubrey, Audiowide, Autour One, Average, Average Sans, Averia Gruesa Libre, Averia Libre, Averia Sans Libre, Averia Serif Libre, Azeret Mono, B612, B612 Mono, BIZ UDGothic, BIZ UDMincho, BIZ UDPGothic, BIZ UDPMincho, Babylonica, Bacasime Antique, Bad Script, Bagel Fat One, Bahiana, Bahianita, Bai Jamjuree, Bakbak One, Ballet, Baloo 2, Baloo Bhai 2, Baloo Bhaijaan 2, Baloo Bhaina 2, Baloo Chettan 2, Baloo Da 2, Baloo Paaji 2, Baloo Tamma 2, Baloo Tammudu 2, Baloo Thambi 2, Balsamiq Sans, Balthazar, Bangers, Barlow, Barlow Condensed, Barlow Semi Condensed, Barriecito, Barrio, Basic, Baskervville, Battambang, Baumans, Bayon, Be Vietnam Pro, Beau Rivage, Bebas Neue, Belanosima, Belgrano, Bellefair, Belleza, Bellota, Bellota Text, BenchNine, Benne, Bentham, Berkshire Swash, Besley, Beth Ellen, Bevan, BhuTuka Expanded One, Big Shoulders Display, Big Shoulders Inline Display, Big Shoulders Inline Text, Big Shoulders Stencil Display, Big Shoulders Stencil Text, Big Shoulders Text, Bigelow Rules, Bigshot One, Bilbo, Bilbo Swash Caps, BioRhyme, BioRhyme Expanded, Birthstone, Birthstone Bounce, Biryani, Bitter, Black And White Picture, Black Han Sans, Black Ops One, Blaka, Blaka Hollow, Blaka Ink, Blinker, Bodoni Moda, Bokor, Bona Nova, Bonbon, Bonheur Royale, Boogaloo, Borel, Bowlby One, Bowlby One SC, Braah One, Brawler, Bree Serif, Bricolage Grotesque, Bruno Ace, Bruno Ace SC, Brygada 1918, Bubblegum Sans, Bubbler One, Buda, Buenard, Bungee, Bungee Hairline, Bungee Inline, Bungee Outline, Bungee Shade, Bungee Spice, Butcherman, Butterfly Kids, Cabin, Cabin Condensed, Cabin Sketch, Caesar Dressing, Cagliostro, Cairo, Cairo Play, Caladea, Calistoga, Calligraffitti, Cambay, Cambo, Candal, Cantarell, Cantata One, Cantora One, Caprasimo, Capriola, Caramel, Carattere, Cardo, Carlito, Carme, Carrois Gothic, Carrois Gothic SC, Carter One, Castoro, Castoro Titling, Catamaran, Caudex, Caveat, Caveat Brush, Cedarville Cursive, Ceviche One, Chakra Petch, Changa, Changa One, Chango, Charis SIL, Charm, Charmonman, Chathura, Chau Philomene One, Chela One, Chelsea Market, Chenla, Cherish, Cherry Bomb One, Cherry Cream Soda, Cherry Swash, Chewy, Chicle, Chilanka, Chivo, Chivo Mono, Chokokutai, Chonburi, Cinzel, Cinzel Decorative, Clicker Script, Climate Crisis, Coda, Codystar, Coiny, Combo, Comfortaa, Comforter, Comforter Brush, Comic Neue, Coming Soon, Comme, Commissioner, Concert One, Condiment, Content, Contrail One, Convergence, Cookie, Copse, Corben, Corinthia, Cormorant, Cormorant Garamond, Cormorant Infant, Cormorant SC, Cormorant Unicase, Cormorant Upright, Courgette, Courier Prime, Cousine, Coustard, Covered By Your Grace, Crafty Girls, Creepster, Crete Round, Crimson Pro, Crimson Text, Croissant One, Crushed, Cuprum, Cute Font, Cutive, Cutive Mono, DM Mono, DM Sans, DM Serif Display, DM Serif Text, Dai Banna SIL, Damion, Dancing Script, Dangrek, Darker Grotesque, Darumadrop One, David Libre, Dawning of a New Day, Days One, Dekko, Dela Gothic One, Delicious Handrawn, Delius, Delius Swash Caps, Delius Unicase, Della Respira, Denk One, Devonshire, Dhurjati, Didact Gothic, Diphylleia, Diplomata, Diplomata SC, Do Hyeon, Dokdo, Domine, Donegal One, Dongle, Doppio One, Dorsa, Dosis, DotGothic16, Dr Sugiyama, Duru Sans, DynaPuff, Dynalight, EB Garamond, Eagle Lake, East Sea Dokdo, Eater, Economica, Eczar, Edu NSW ACT Foundation, Edu QLD Beginner, Edu SA Beginner, Edu TAS Beginner, Edu VIC WA NT Beginner, El Messiri, Electrolize, Elsie, Elsie Swash Caps, Emblema One, Emilys Candy, Encode Sans, Encode Sans Condensed, Encode Sans Expanded, Encode Sans SC, Encode Sans Semi Condensed, Encode Sans Semi Expanded, Engagement, Englebert, Enriqueta, Ephesis, Epilogue, Erica One, Esteban, Estonia, Euphoria Script, Ewert, Exo, Exo 2, Expletus Sans, Explora, Fahkwang, Familjen Grotesk, Fanwood Text, Farro, Farsan, Fascinate, Fascinate Inline, Faster One, Fasthand, Fauna One, Faustina, Federant, Federo, Felipa, Fenix, Festive, Figtree, Finger Paint, Finlandica, Fira Code, Fira Mono, Fira Sans, Fira Sans Condensed, Fira Sans Extra Condensed, Fjalla One, Fjord One, Flamenco, Flavors, Fleur De Leah, Flow Block, Flow Circular, Flow Rounded, Foldit, Fondamento, Fontdiner Swanky, Forum, Fragment Mono, Francois One, Frank Ruhl Libre, Fraunces, Freckle Face, Fredericka the Great, Fredoka, Freehand, Fresca, Frijole, Fruktur, Fugaz One, Fuggles, Fuzzy Bubbles, GFS Didot, GFS Neohellenic, Gabriela, Gaegu, Gafata, Gajraj One, Galada, Galdeano, Galindo, Gamja Flower, Gantari, Gasoek One, Gayathri, Gelasio, Gemunu Libre, Genos, Gentium Book Plus, Gentium Plus, Geo, Geologica, Georama, Geostar, Geostar Fill, Germania One, Gideon Roman, Gidugu, Gilda Display, Girassol, Give You Glory, Glass Antiqua, Glegoo, Gloock, Gloria Hallelujah, Glory, Gluten, Goblin One, Gochi Hand, Goldman, Golos Text, Gorditas, Gothic A1, Gotu, Goudy Bookletter 1911, Gowun Batang, Gowun Dodum, Graduate, Grand Hotel, Grandiflora One, Grandstander, Grape Nuts, Gravitas One, Great Vibes, Grechen Fuemen, Grenze, Grenze Gotisch, Grey Qo, Griffy, Gruppo, Gudea, Gugi, Gulzar, Gupter, Gurajada, Gwendolyn, Habibi, Hachi Maru Pop, Hahmlet, Halant, Hammersmith One, Hanalei, Hanalei Fill, Handjet, Handlee, Hanken Grotesk, Hanuman, Happy Monkey, Harmattan, Headland One, Heebo, Henny Penny, Hepta Slab, Herr Von Muellerhoff, Hi Melody, Hina Mincho, Hind, Hind Guntur, Hind Madurai, Hind Siliguri, Hind Vadodara, Holtwood One SC, Homemade Apple, Homenaje, Hubballi, Hurricane, IBM Plex Mono, IBM Plex Sans, IBM Plex Sans Arabic, IBM Plex Sans Condensed, IBM Plex Sans Devanagari, IBM Plex Sans Hebrew, IBM Plex Sans JP, IBM Plex Sans KR, IBM Plex Sans Thai, IBM Plex Sans Thai Looped, IBM Plex Serif, IM Fell DW Pica, IM Fell DW Pica SC, IM Fell Double Pica, IM Fell Double Pica SC, IM Fell English, IM Fell English SC, IM Fell French Canon, IM Fell French Canon SC, IM Fell Great Primer, IM Fell Great Primer SC, Ibarra Real Nova, Iceberg, Iceland, Imbue, Imperial Script, Imprima, Inclusive Sans, Inconsolata, Inder, Indie Flower, Ingrid Darling, Inika, Inknut Antiqua, Inria Sans, Inria Serif, Inspiration, Instrument Sans, Instrument Serif, Inter, Inter Tight, Irish Grover, Island Moments, Istok Web, Italiana, Italianno, Itim, Jacques Francois, Jacques Francois Shadow, Jaldi, JetBrains Mono, Jim Nightshade, Joan, Jockey One, Jolly Lodger, Jomhuria, Jomolhari, Josefin Sans, Josefin Slab, Jost, Joti One, Jua, Judson, Julee, Julius Sans One, Junge, Jura, Just Another Hand, Just Me Again Down Here, K2D, Kablammo, Kadwa, Kaisei Decol, Kaisei HarunoUmi, Kaisei Opti, Kaisei Tokumin, Kalam, Kameron, Kanit, Kantumruy Pro, Karantina, Karla, Karma, Katibeh, Kaushan Script, Kavivanar, Kavoon, Kdam Thmor Pro, Keania One, Kelly Slab, Kenia, Khand, Khmer, Khula, Kings, Kirang Haerang, Kite One, Kiwi Maru, Klee One, Knewave, KoHo, Kodchasan, Koh Santepheap, Kolker Brush, Konkhmer Sleokchher, Kosugi, Kosugi Maru, Kotta One, Koulen, Kranky, Kreon, Kristi, Krona One, Krub, Kufam, Kulim Park, Kumar One, Kumar One Outline, Kumbh Sans, Kurale, La Belle Aurore, Labrada, Lacquer, Laila, Lakki Reddy, Lalezar, Lancelot, Langar, Lateef, Lato, Lavishly Yours, League Gothic, League Script, League Spartan, Leckerli One, Ledger, Lekton, Lemon, Lemonada, Lexend, Lexend Deca, Lexend Exa, Lexend Giga, Lexend Mega, Lexend Peta, Lexend Tera, Lexend Zetta, Libre Barcode 128, Libre Barcode 128 Text, Libre Barcode 39, Libre Barcode 39 Extended, Libre Barcode 39 Extended Text, Libre Barcode 39 Text, Libre Barcode EAN13 Text, Libre Baskerville, Libre Bodoni, Libre Caslon Display, Libre Caslon Text, Libre Franklin, Licorice, Life Savers, Lilita One, Lily Script One, Limelight, Linden Hill, Lisu Bosa, Literata, Liu Jian Mao Cao, Livvic, Lobster, Lobster Two, Londrina Outline, Londrina Shadow, Londrina Sketch, Londrina Solid, Long Cang, Lora, Love Light, Love Ya Like A Sister, Loved by the King, Lovers Quarrel, Luckiest Guy, Lugrasimo, Lumanosimo, Lunasima, Lusitana, Lustria, Luxurious Roman, Luxurious Script, M PLUS 1, M PLUS 1 Code, M PLUS 1p, M PLUS 2, M PLUS Code Latin, M PLUS Rounded 1c, Ma Shan Zheng, Macondo, Macondo Swash Caps, Mada, Magra, Maiden Orange, Maitree, Major Mono Display, Mako, Mali, Mallanna, Mandali, Manjari, Manrope, Mansalva, Manuale, Marcellus, Marcellus SC, Marck Script, Margarine, Marhey, Markazi Text, Marko One, Marmelad, Martel, Martel Sans, Martian Mono, Marvel, Mate, Mate SC, Material Icons, Material Icons Outlined, Material Icons Round, Material Icons Sharp, Material Icons Two Tone, Material Symbols Outlined, Material Symbols Rounded, Material Symbols Sharp, Maven Pro, McLaren, Mea Culpa, Meddon, MedievalSharp, Medula One, Meera Inimai, Megrim, Meie Script, Meow Script, Merienda, Merriweather, Merriweather Sans, Metal, Metal Mania, Metamorphous, Metrophobic, Michroma, Milonga, Miltonian, Miltonian Tattoo, Mina, Mingzat, Miniver, Miriam Libre, Mirza, Miss Fajardose, Mitr, Mochiy Pop One, Mochiy Pop P One, Modak, Modern Antiqua, Mogra, Mohave, Moirai One, Molengo, Molle, Monda, Monofett, Monomaniac One, Monoton, Monsieur La Doulaise, Montaga, Montagu Slab, MonteCarlo, Montez, Montserrat, Montserrat Alternates, Montserrat Subrayada, Moo Lah Lah, Mooli, Moon Dance, Moul, Moulpali, Mountains of Christmas, Mouse Memoirs, Mr Bedfort, Mr Dafoe, Mr De Haviland, Mrs Saint Delafield, Mrs Sheppards, Ms Madi, Mukta, Mukta Mahee, Mukta Malar, Mukta Vaani, Mulish, Murecho, MuseoModerno, My Soul, Mynerve, Mystery Quest, NTR, Nabla, Nanum Brush Script, Nanum Gothic, Nanum Gothic Coding, Nanum Myeongjo, Nanum Pen Script, Narnoor, Neonderthaw, Nerko One, Neucha, Neuton, New Rocker, New Tegomin, News Cycle, Newsreader, Niconne, Niramit, Nixie One, Nobile, Nokora, Norican, Nosifer, Notable, Nothing You Could Do, Noticia Text, Noto Color Emoji, Noto Emoji, Noto Kufi Arabic, Noto Music, Noto Naskh Arabic, Noto Nastaliq Urdu, Noto Rashi Hebrew, Noto Sans, Noto Sans Adlam, Noto Sans Adlam Unjoined, Noto Sans Anatolian Hieroglyphs, Noto Sans Arabic, Noto Sans Armenian, Noto Sans Avestan, Noto Sans Balinese, Noto Sans Bamum, Noto Sans Bassa Vah, Noto Sans Batak, Noto Sans Bengali, Noto Sans Bhaiksuki, Noto Sans Brahmi, Noto Sans Buginese, Noto Sans Buhid, Noto Sans Canadian Aboriginal, Noto Sans Carian, Noto Sans Caucasian Albanian, Noto Sans Chakma, Noto Sans Cham, Noto Sans Cherokee, Noto Sans Chorasmian, Noto Sans Coptic, Noto Sans Cuneiform, Noto Sans Cypriot, Noto Sans Cypro Minoan, Noto Sans Deseret, Noto Sans Devanagari, Noto Sans Display, Noto Sans Duployan, Noto Sans Egyptian Hieroglyphs, Noto Sans Elbasan, Noto Sans Elymaic, Noto Sans Ethiopic, Noto Sans Georgian, Noto Sans Glagolitic, Noto Sans Gothic, Noto Sans Grantha, Noto Sans Gujarati, Noto Sans Gunjala Gondi, Noto Sans Gurmukhi, Noto Sans HK, Noto Sans Hanifi Rohingya, Noto Sans Hanunoo, Noto Sans Hatran, Noto Sans Hebrew, Noto Sans Imperial Aramaic, Noto Sans Indic Siyaq Numbers, Noto Sans Inscriptional Pahlavi, Noto Sans Inscriptional Parthian, Noto Sans JP, Noto Sans Javanese, Noto Sans KR, Noto Sans Kaithi, Noto Sans Kannada, Noto Sans Kayah Li, Noto Sans Kharoshthi, Noto Sans Khmer, Noto Sans Khojki, Noto Sans Khudawadi, Noto Sans Lao, Noto Sans Lao Looped, Noto Sans Lepcha, Noto Sans Limbu, Noto Sans Linear A, Noto Sans Linear B, Noto Sans Lisu, Noto Sans Lycian, Noto Sans Lydian, Noto Sans Mahajani, Noto Sans Malayalam, Noto Sans Mandaic, Noto Sans Manichaean, Noto Sans Marchen, Noto Sans Masaram Gondi, Noto Sans Math, Noto Sans Mayan Numerals, Noto Sans Medefaidrin, Noto Sans Meetei Mayek, Noto Sans Mende Kikakui, Noto Sans Meroitic, Noto Sans Miao, Noto Sans Modi, Noto Sans Mongolian, Noto Sans Mono, Noto Sans Mro, Noto Sans Multani, Noto Sans Myanmar, Noto Sans NKo, Noto Sans Nabataean, Noto Sans Nag Mundari, Noto Sans Nandinagari, Noto Sans New Tai Lue, Noto Sans Newa, Noto Sans Nushu, Noto Sans Ogham, Noto Sans Ol Chiki, Noto Sans Old Hungarian, Noto Sans Old Italic, Noto Sans Old North Arabian, Noto Sans Old Permic, Noto Sans Old Persian, Noto Sans Old Sogdian, Noto Sans Old South Arabian, Noto Sans Old Turkic, Noto Sans Oriya, Noto Sans Osage, Noto Sans Osmanya, Noto Sans Pahawh Hmong, Noto Sans Palmyrene, Noto Sans Pau Cin Hau, Noto Sans Phags Pa, Noto Sans Phoenician, Noto Sans Psalter Pahlavi, Noto Sans Rejang, Noto Sans Runic, Noto Sans SC, Noto Sans Samaritan, Noto Sans Saurashtra, Noto Sans Sharada, Noto Sans Shavian, Noto Sans Siddham, Noto Sans SignWriting, Noto Sans Sinhala, Noto Sans Sogdian, Noto Sans Sora Sompeng, Noto Sans Soyombo, Noto Sans Sundanese, Noto Sans Syloti Nagri, Noto Sans Symbols, Noto Sans Symbols 2, Noto Sans Syriac, Noto Sans Syriac Eastern, Noto Sans TC, Noto Sans Tagalog, Noto Sans Tagbanwa, Noto Sans Tai Le, Noto Sans Tai Tham, Noto Sans Tai Viet, Noto Sans Takri, Noto Sans Tamil, Noto Sans Tamil Supplement, Noto Sans Tangsa, Noto Sans Telugu, Noto Sans Thaana, Noto Sans Thai, Noto Sans Thai Looped, Noto Sans Tifinagh, Noto Sans Tirhuta, Noto Sans Ugaritic, Noto Sans Vai, Noto Sans Vithkuqi, Noto Sans Wancho, Noto Sans Warang Citi, Noto Sans Yi, Noto Sans Zanabazar Square, Noto Serif, Noto Serif Ahom, Noto Serif Armenian, Noto Serif Balinese, Noto Serif Bengali, Noto Serif Devanagari, Noto Serif Display, Noto Serif Dogra, Noto Serif Ethiopic, Noto Serif Georgian, Noto Serif Grantha, Noto Serif Gujarati, Noto Serif Gurmukhi, Noto Serif HK, Noto Serif Hebrew, Noto Serif JP, Noto Serif KR, Noto Serif Kannada, Noto Serif Khitan Small Script, Noto Serif Khmer, Noto Serif Khojki, Noto Serif Lao, Noto Serif Makasar, Noto Serif Malayalam, Noto Serif Myanmar, Noto Serif NP Hmong, Noto Serif Oriya, Noto Serif Ottoman Siyaq, Noto Serif SC, Noto Serif Sinhala, Noto Serif TC, Noto Serif Tamil, Noto Serif Tangut, Noto Serif Telugu, Noto Serif Thai, Noto Serif Tibetan, Noto Serif Toto, Noto Serif Vithkuqi, Noto Serif Yezidi, Noto Traditional Nushu, Nova Cut, Nova Flat, Nova Mono, Nova Oval, Nova Round, Nova Script, Nova Slim, Nova Square, Numans, Nunito, Nunito Sans, Nuosu SIL, Odibee Sans, Odor Mean Chey, Offside, Oi, Old Standard TT, Oldenburg, Ole, Oleo Script, Oleo Script Swash Caps, Oooh Baby, Open Sans, Oranienbaum, Orbit, Orbitron, Oregano, Orelega One, Orienta, Original Surfer, Oswald, Outfit, Over the Rainbow, Overlock, Overlock SC, Overpass, Overpass Mono, Ovo, Oxanium, Oxygen, Oxygen Mono, PT Mono, PT Sans, PT Sans Caption, PT Sans Narrow, PT Serif, PT Serif Caption, Pacifico, Padauk, Padyakke Expanded One, Palanquin, Palanquin Dark, Palette Mosaic, Pangolin, Paprika, Parisienne, Passero One, Passion One, Passions Conflict, Pathway Extreme, Pathway Gothic One, Patrick Hand, Patrick Hand SC, Pattaya, Patua One, Pavanam, Paytone One, Peddana, Peralta, Permanent Marker, Petemoss, Petit Formal Script, Petrona, Philosopher, Phudu, Piazzolla, Piedra, Pinyon Script, Pirata One, Plaster, Play, Playball, Playfair, Playfair Display, Playfair Display SC, Plus Jakarta Sans, Podkova, Poiret One, Poller One, Poltawski Nowy, Poly, Pompiere, Pontano Sans, Poor Story, Poppins, Port Lligat Sans, Port Lligat Slab, Potta One, Pragati Narrow, Praise, Prata, Preahvihear, Press Start 2P, Pridi, Princess Sofia, Prociono, Prompt, Prosto One, Proza Libre, Public Sans, Puppies Play, Puritan, Purple Purse, Qahiri, Quando, Quantico, Quattrocento, Quattrocento Sans, Questrial, Quicksand, Quintessential, Qwigley, Qwitcher Grypen, REM, Racing Sans One, Radio Canada, Radley, Rajdhani, Rakkas, Raleway, Raleway Dots, Ramabhadra, Ramaraja, Rambla, Rammetto One, Rampart One, Ranchers, Rancho, Ranga, Rasa, Rationale, Ravi Prakash, Readex Pro, Recursive, Red Hat Display, Red Hat Mono, Red Hat Text, Red Rose, Redacted, Redacted Script, Redressed, Reem Kufi, Reem Kufi Fun, Reem Kufi Ink, Reenie Beanie, Reggae One, Revalia, Rhodium Libre, Ribeye, Ribeye Marrow, Righteous, Risque, Road Rage, Roboto, Roboto Condensed, Roboto Flex, Roboto Mono, Roboto Serif, Roboto Slab, Rochester, Rock 3D, Rock Salt, RocknRoll One, Rokkitt, Romanesco, Ropa Sans, Rosario, Rosarivo, Rouge Script, Rowdies, Rozha One, Rubik, Rubik 80s Fade, Rubik Beastly, Rubik Bubbles, Rubik Burned, Rubik Dirt, Rubik Distressed, Rubik Gemstones, Rubik Glitch, Rubik Iso, Rubik Marker Hatch, Rubik Maze, Rubik Microbe, Rubik Mono One, Rubik Moonrocks, Rubik Pixels, Rubik Puddles, Rubik Spray Paint, Rubik Storm, Rubik Vinyl, Rubik Wet Paint, Ruda, Rufina, Ruge Boogie, Ruluko, Rum Raisin, Ruslan Display, Russo One, Ruthie, Ruwudu, Rye, STIX Two Text, Sacramento, Sahitya, Sail, Saira, Saira Condensed, Saira Extra Condensed, Saira Semi Condensed, Saira Stencil One, Salsa, Sanchez, Sancreek, Sansita, Sansita Swashed, Sarabun, Sarala, Sarina, Sarpanch, Sassy Frass, Satisfy, Sawarabi Gothic, Sawarabi Mincho, Scada, Scheherazade New, Schibsted Grotesk, Schoolbell, Scope One, Seaweed Script, Secular One, Sedgwick Ave, Sedgwick Ave Display, Sen, Send Flowers, Sevillana, Seymour One, Shadows Into Light, Shadows Into Light Two, Shalimar, Shantell Sans, Shanti, Share, Share Tech, Share Tech Mono, Shippori Antique, Shippori Antique B1, Shippori Mincho, Shippori Mincho B1, Shizuru, Shojumaru, Short Stack, Shrikhand, Siemreap, Sigmar, Sigmar One, Signika, Signika Negative, Silkscreen, Simonetta, Single Day, Sintony, Sirin Stencil, Six Caps, Skranji, Slabo 13px, Slabo 27px, Slackey, Slackside One, Smokum, Smooch, Smooch Sans, Smythe, Sniglet, Snippet, Snowburst One, Sofadi One, Sofia, Sofia Sans, Sofia Sans Condensed, Sofia Sans Extra Condensed, Sofia Sans Semi Condensed, Solitreo, Solway, Song Myung, Sono, Sonsie One, Sora, Sorts Mill Goudy, Source Code Pro, Source Sans 3, Source Serif 4, Space Grotesk, Space Mono, Special Elite, Spectral, Spectral SC, Spicy Rice, Spinnaker, Spirax, Splash, Spline Sans, Spline Sans Mono, Squada One, Square Peg, Sree Krushnadevaraya, Sriracha, Srisakdi, Staatliches, Stalemate, Stalinist One, Stardos Stencil, Stick, Stick No Bills, Stint Ultra Condensed, Stint Ultra Expanded, Stoke, Strait, Style Script, Stylish, Sue Ellen Francisco, Suez One, Sulphur Point, Sumana, Sunflower, Sunshiney, Supermercado One, Sura, Suranna, Suravaram, Suwannaphum, Swanky and Moo Moo, Syncopate, Syne, Syne Mono, Syne Tactile, Tai Heritage Pro, Tajawal, Tangerine, Tapestry, Taprom, Tauri, Taviraj, Teko, Tektur, Telex, Tenali Ramakrishna, Tenor Sans, Text Me One, Texturina, Thasadith, The Girl Next Door, The Nautigal, Tienne, Tillana, Tilt Neon, Tilt Prism, Tilt Warp, Timmana, Tinos, Tiro Bangla, Tiro Devanagari Hindi, Tiro Devanagari Marathi, Tiro Devanagari Sanskrit, Tiro Gurmukhi, Tiro Kannada, Tiro Tamil, Tiro Telugu, Titan One, Titillium Web, Tomorrow, Tourney, Trade Winds, Train One, Trirong, Trispace, Trocchi, Trochut, Truculenta, Trykker, Tsukimi Rounded, Tulpen One, Turret Road, Twinkle Star, Ubuntu, Ubuntu Condensed, Ubuntu Mono, Uchen, Ultra, Unbounded, Uncial Antiqua, Underdog, Unica One, UnifrakturCook, UnifrakturMaguntia, Unkempt, Unlock, Unna, Updock, Urbanist, VT323, Vampiro One, Varela, Varela Round, Varta, Vast Shadow, Vazirmatn, Vesper Libre, Viaoda Libre, Vibes, Vibur, Victor Mono, Vidaloka, Viga, Vina Sans, Voces, Volkhov, Vollkorn, Vollkorn SC, Voltaire, Vujahday Script, Waiting for the Sunrise, Wallpoet, Walter Turncoat, Warnes, Water Brush, Waterfall, Wavefont, Wellfleet, Wendy One, Whisper, WindSong, Wire One, Wix Madefor Display, Wix Madefor Text, Work Sans, Xanh Mono, Yaldevi, Yanone Kaffeesatz, Yantramanav, Yatra One, Yellowtail, Yeon Sung, Yeseva One, Yesteryear, Yomogi, Yrsa, Ysabeau, Ysabeau Infant, Ysabeau Office, Ysabeau SC, Yuji Boku, Yuji Hentaigana Akari, Yuji Hentaigana Akebono, Yuji Mai, Yuji Syuku, Yusei Magic, ZCOOL KuaiLe, ZCOOL QingKe HuangYou, ZCOOL XiaoWei, Zen Antique, Zen Antique Soft, Zen Dots, Zen Kaku Gothic Antique, Zen Kaku Gothic New, Zen Kurenaido, Zen Loop, Zen Maru Gothic, Zen Old Mincho, Zen Tokyo Zoo, Zeyada, Zhi Mang Xing, Zilla Slab, Zilla Slab Highlight, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"ABeeZee\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"ADLaM Display\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"adlam,latin,latin-ext\"},\"Abel\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Abhaya Libre\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Aboreto\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Abril Fatface\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Abyssinica SIL\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"ethiopic,latin,latin-ext\"},\"Aclonica\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Acme\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Actor\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Adamina\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Advent Pro\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Agdasima\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Aguafina Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Akatab\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,tifinagh\"},\"Akaya Kanadaka\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"kannada,latin,latin-ext\"},\"Akaya Telivigala\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,telugu\"},\"Akronim\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Akshar\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Aladin\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Alata\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Alatsi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Albert Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Aldrich\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Alef\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"hebrew,latin\"},\"Alegreya\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Alegreya SC\":{\"category\":\"serif\",\"variants\":\"regular,italic,500,500italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Alegreya Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Alegreya Sans SC\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Aleo\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Alex Brush\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Alexandria\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Alfa Slab One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Alice\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Alike\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Alike Angular\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Alkalami\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Alkatra\":{\"category\":\"display\",\"variants\":\"regular,500,600,700\",\"subsets\":\"bengali,devanagari,latin,latin-ext,oriya\"},\"Allan\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Allerta\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Allerta Stencil\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Allison\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Allura\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Almarai\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,700,800\",\"subsets\":\"arabic\"},\"Almendra\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Almendra Display\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Almendra SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Alumni Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Alumni Sans Collegiate One\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Alumni Sans Inline One\":{\"category\":\"display\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Alumni Sans Pinstripe\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Amarante\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Amaranth\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Amatic SC\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,hebrew,latin,latin-ext,vietnamese\"},\"Amethysta\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Amiko\":{\"category\":\"sans-serif\",\"variants\":\"regular,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Amiri\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"arabic,latin,latin-ext\"},\"Amiri Quran\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"arabic,latin\"},\"Amita\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Anaheim\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Andada Pro\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Andika\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Anek Bangla\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"bengali,latin,latin-ext\"},\"Anek Devanagari\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Anek Gujarati\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Anek Gurmukhi\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Anek Kannada\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"kannada,latin,latin-ext\"},\"Anek Latin\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Anek Malayalam\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,malayalam\"},\"Anek Odia\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,oriya\"},\"Anek Tamil\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,tamil\"},\"Anek Telugu\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,telugu\"},\"Angkor\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Annie Use Your Telescope\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Anonymous Pro\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,greek,latin,latin-ext\"},\"Antic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Antic Didone\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Antic Slab\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Anton\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Antonio\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Anuphan\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic-ext,latin,latin-ext,thai,vietnamese\"},\"Anybody\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Aoboshi One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Arapey\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Arbutus\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Arbutus Slab\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Architects Daughter\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Archivo\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Archivo Black\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Archivo Narrow\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Are You Serious\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Aref Ruqaa\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Aref Ruqaa Ink\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Arima\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"greek,greek-ext,latin,latin-ext,malayalam,tamil,vietnamese\"},\"Arimo\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,latin,latin-ext,vietnamese\"},\"Arizonia\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Armata\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Arsenal\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Artifika\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Arvo\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Arya\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Asap\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Asap Condensed\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Asar\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Asset\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Assistant\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Astloch\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Asul\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Athiti\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Atkinson Hyperlegible\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Atma\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"bengali,latin,latin-ext\"},\"Atomic Age\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Aubrey\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Audiowide\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Autour One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Average\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Average Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Averia Gruesa Libre\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Averia Libre\":{\"category\":\"display\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Averia Sans Libre\":{\"category\":\"display\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Averia Serif Libre\":{\"category\":\"display\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Azeret Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"B612\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"B612 Mono\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"BIZ UDGothic\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,greek-ext,japanese,latin,latin-ext\"},\"BIZ UDMincho\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,greek-ext,japanese,latin,latin-ext\"},\"BIZ UDPGothic\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,greek-ext,japanese,latin,latin-ext\"},\"BIZ UDPMincho\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,greek-ext,japanese,latin,latin-ext\"},\"Babylonica\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bacasime Antique\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bad Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin\"},\"Bagel Fat One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Bahiana\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bahianita\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bai Jamjuree\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Bakbak One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Ballet\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Baloo 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"devanagari,latin,latin-ext,vietnamese\"},\"Baloo Bhai 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"gujarati,latin,latin-ext,vietnamese\"},\"Baloo Bhaijaan 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Baloo Bhaina 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,oriya,vietnamese\"},\"Baloo Chettan 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,malayalam,vietnamese\"},\"Baloo Da 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"bengali,latin,latin-ext,vietnamese\"},\"Baloo Paaji 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"gurmukhi,latin,latin-ext,vietnamese\"},\"Baloo Tamma 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"kannada,latin,latin-ext,vietnamese\"},\"Baloo Tammudu 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,telugu,vietnamese\"},\"Baloo Thambi 2\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,tamil,vietnamese\"},\"Balsamiq Sans\":{\"category\":\"display\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Balthazar\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bangers\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Barlow\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Barlow Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Barlow Semi Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Barriecito\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Barrio\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Basic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Baskervville\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Battambang\":{\"category\":\"display\",\"variants\":\"100,300,regular,700,900\",\"subsets\":\"khmer,latin\"},\"Baumans\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bayon\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Be Vietnam Pro\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Beau Rivage\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bebas Neue\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Belanosima\":{\"category\":\"sans-serif\",\"variants\":\"regular,600,700\",\"subsets\":\"latin,latin-ext\"},\"Belgrano\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bellefair\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Belleza\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bellota\":{\"category\":\"display\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Bellota Text\":{\"category\":\"display\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"BenchNine\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,700\",\"subsets\":\"latin,latin-ext\"},\"Benne\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"kannada,latin,latin-ext\"},\"Bentham\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Berkshire Swash\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Besley\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Beth Ellen\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bevan\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"BhuTuka Expanded One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Big Shoulders Display\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Big Shoulders Inline Display\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Big Shoulders Inline Text\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Big Shoulders Stencil Display\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Big Shoulders Stencil Text\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Big Shoulders Text\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bigelow Rules\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bigshot One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bilbo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bilbo Swash Caps\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"BioRhyme\":{\"category\":\"serif\",\"variants\":\"200,300,regular,700,800\",\"subsets\":\"latin,latin-ext\"},\"BioRhyme Expanded\":{\"category\":\"serif\",\"variants\":\"200,300,regular,700,800\",\"subsets\":\"latin,latin-ext\"},\"Birthstone\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Birthstone Bounce\":{\"category\":\"handwriting\",\"variants\":\"regular,500\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Biryani\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Bitter\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Black And White Picture\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Black Han Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Black Ops One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Blaka\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Blaka Hollow\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Blaka Ink\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Blinker\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,600,700,800,900\",\"subsets\":\"latin,latin-ext\"},\"Bodoni Moda\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Bokor\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Bona Nova\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,hebrew,latin,latin-ext,vietnamese\"},\"Bonbon\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bonheur Royale\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Boogaloo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Borel\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bowlby One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Bowlby One SC\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Braah One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"gurmukhi,latin,latin-ext,vietnamese\"},\"Brawler\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Bree Serif\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bricolage Grotesque\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Bruno Ace\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bruno Ace SC\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Brygada 1918\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Bubblegum Sans\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Bubbler One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Buda\":{\"category\":\"display\",\"variants\":\"300\",\"subsets\":\"latin\"},\"Buenard\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Bungee\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bungee Hairline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bungee Inline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bungee Outline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bungee Shade\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Bungee Spice\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Butcherman\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Butterfly Kids\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Cabin\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Cabin Condensed\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Cabin Sketch\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Caesar Dressing\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cagliostro\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cairo\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,latin,latin-ext\"},\"Cairo Play\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,latin,latin-ext\"},\"Caladea\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Calistoga\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Calligraffitti\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cambay\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Cambo\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Candal\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cantarell\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Cantata One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Cantora One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Caprasimo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Capriola\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Caramel\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Carattere\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Cardo\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"greek,greek-ext,latin,latin-ext\"},\"Carlito\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Carme\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Carrois Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Carrois Gothic SC\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Carter One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Castoro\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Castoro Titling\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Catamaran\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,tamil\"},\"Caudex\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"greek,greek-ext,latin,latin-ext\"},\"Caveat\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Caveat Brush\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Cedarville Cursive\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ceviche One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Chakra Petch\":{\"category\":\"sans-serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Changa\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"arabic,latin,latin-ext\"},\"Changa One\":{\"category\":\"display\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Chango\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Charis SIL\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Charm\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Charmonman\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Chathura\":{\"category\":\"sans-serif\",\"variants\":\"100,300,regular,700,800\",\"subsets\":\"latin,telugu\"},\"Chau Philomene One\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Chela One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Chelsea Market\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Chenla\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer\"},\"Cherish\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Cherry Bomb One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"Cherry Cream Soda\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cherry Swash\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Chewy\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Chicle\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Chilanka\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,malayalam\"},\"Chivo\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Chivo Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Chokokutai\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"Chonburi\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Cinzel\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext\"},\"Cinzel Decorative\":{\"category\":\"display\",\"variants\":\"regular,700,900\",\"subsets\":\"latin\"},\"Clicker Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Climate Crisis\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Coda\":{\"category\":\"display\",\"variants\":\"regular,800\",\"subsets\":\"latin,latin-ext\"},\"Codystar\":{\"category\":\"display\",\"variants\":\"300,regular\",\"subsets\":\"latin,latin-ext\"},\"Coiny\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tamil,vietnamese\"},\"Combo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Comfortaa\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Comforter\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Comforter Brush\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Comic Neue\":{\"category\":\"handwriting\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Coming Soon\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Comme\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext\"},\"Commissioner\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Concert One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Condiment\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Content\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"khmer\"},\"Contrail One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Convergence\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Cookie\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Copse\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Corben\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Corinthia\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Cormorant\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cormorant Garamond\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cormorant Infant\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cormorant SC\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cormorant Unicase\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cormorant Upright\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Courgette\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Courier Prime\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Cousine\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,latin,latin-ext,vietnamese\"},\"Coustard\":{\"category\":\"serif\",\"variants\":\"regular,900\",\"subsets\":\"latin\"},\"Covered By Your Grace\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Crafty Girls\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Creepster\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Crete Round\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Crimson Pro\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Crimson Text\":{\"category\":\"serif\",\"variants\":\"regular,italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Croissant One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Crushed\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Cuprum\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Cute Font\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Cutive\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Cutive Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"DM Mono\":{\"category\":\"monospace\",\"variants\":\"300,300italic,regular,italic,500,500italic\",\"subsets\":\"latin,latin-ext\"},\"DM Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"DM Serif Display\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"DM Serif Text\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Dai Banna SIL\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,new-tai-lue\"},\"Damion\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Dancing Script\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Dangrek\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Darker Grotesque\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Darumadrop One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"David Libre\":{\"category\":\"serif\",\"variants\":\"regular,500,700\",\"subsets\":\"hebrew,latin,latin-ext,vietnamese\"},\"Dawning of a New Day\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Days One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Dekko\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Dela Gothic One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext,vietnamese\"},\"Delicious Handrawn\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Delius\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Delius Swash Caps\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Delius Unicase\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Della Respira\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Denk One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Devonshire\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Dhurjati\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Didact Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Diphylleia\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Diplomata\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Diplomata SC\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Do Hyeon\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Dokdo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Domine\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Donegal One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Dongle\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,700\",\"subsets\":\"korean,latin,latin-ext,vietnamese\"},\"Doppio One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Dorsa\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Dosis\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"DotGothic16\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Dr Sugiyama\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Duru Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"DynaPuff\":{\"category\":\"display\",\"variants\":\"regular,500,600,700\",\"subsets\":\"cyrillic-ext,latin,latin-ext\"},\"Dynalight\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"EB Garamond\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Eagle Lake\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"East Sea Dokdo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Eater\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Economica\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Eczar\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"devanagari,greek,greek-ext,latin,latin-ext\"},\"Edu NSW ACT Foundation\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin\"},\"Edu QLD Beginner\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin\"},\"Edu SA Beginner\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin\"},\"Edu TAS Beginner\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin\"},\"Edu VIC WA NT Beginner\":{\"category\":\"handwriting\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin\"},\"El Messiri\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,cyrillic,latin,latin-ext\"},\"Electrolize\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Elsie\":{\"category\":\"display\",\"variants\":\"regular,900\",\"subsets\":\"latin,latin-ext\"},\"Elsie Swash Caps\":{\"category\":\"display\",\"variants\":\"regular,900\",\"subsets\":\"latin,latin-ext\"},\"Emblema One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Emilys Candy\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Encode Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Encode Sans Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Encode Sans Expanded\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Encode Sans SC\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Encode Sans Semi Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Encode Sans Semi Expanded\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Engagement\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Englebert\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Enriqueta\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Ephesis\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Epilogue\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Erica One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Esteban\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Estonia\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Euphoria Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ewert\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Exo\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Exo 2\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Expletus Sans\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Explora\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cherokee,latin,latin-ext,vietnamese\"},\"Fahkwang\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Familjen Grotesk\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Fanwood Text\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Farro\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,700\",\"subsets\":\"latin,latin-ext\"},\"Farsan\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gujarati,latin,latin-ext,vietnamese\"},\"Fascinate\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Fascinate Inline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Faster One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Fasthand\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Fauna One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Faustina\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,800,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Federant\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Federo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Felipa\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Fenix\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Festive\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Figtree\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,900,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Finger Paint\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Finlandica\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Fira Code\":{\"category\":\"monospace\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Fira Mono\":{\"category\":\"monospace\",\"variants\":\"regular,500,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Fira Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Fira Sans Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Fira Sans Extra Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Fjalla One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Fjord One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Flamenco\":{\"category\":\"display\",\"variants\":\"300,regular\",\"subsets\":\"latin\"},\"Flavors\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Fleur De Leah\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Flow Block\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Flow Circular\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Flow Rounded\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Foldit\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Fondamento\":{\"category\":\"handwriting\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Fontdiner Swanky\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Forum\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Fragment Mono\":{\"category\":\"monospace\",\"variants\":\"regular,italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext\"},\"Francois One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Frank Ruhl Libre\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Fraunces\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Freckle Face\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Fredericka the Great\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Fredoka\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Freehand\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Fresca\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Frijole\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Fruktur\":{\"category\":\"display\",\"variants\":\"regular,italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Fugaz One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Fuggles\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Fuzzy Bubbles\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"GFS Didot\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"greek\"},\"GFS Neohellenic\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"greek\"},\"Gabriela\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Gaegu\":{\"category\":\"handwriting\",\"variants\":\"300,regular,700\",\"subsets\":\"korean,latin\"},\"Gafata\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Gajraj One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Galada\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"bengali,latin\"},\"Galdeano\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Galindo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Gamja Flower\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Gantari\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Gasoek One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Gayathri\":{\"category\":\"sans-serif\",\"variants\":\"100,regular,700\",\"subsets\":\"latin,malayalam\"},\"Gelasio\":{\"category\":\"serif\",\"variants\":\"regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Gemunu Libre\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Genos\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cherokee,latin,latin-ext,vietnamese\"},\"Gentium Book Plus\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Gentium Plus\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Geo\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Geologica\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Georama\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Geostar\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Geostar Fill\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Germania One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Gideon Roman\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Gidugu\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Gilda Display\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Girassol\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Give You Glory\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Glass Antiqua\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Glegoo\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Gloock\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext\"},\"Gloria Hallelujah\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Glory\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Gluten\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Goblin One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Gochi Hand\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Goldman\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Golos Text\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Gorditas\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Gothic A1\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"korean,latin\"},\"Gotu\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext,vietnamese\"},\"Goudy Bookletter 1911\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Gowun Batang\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"korean,latin,latin-ext,vietnamese\"},\"Gowun Dodum\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext,vietnamese\"},\"Graduate\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Grand Hotel\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Grandiflora One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Grandstander\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Grape Nuts\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Gravitas One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Great Vibes\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Grechen Fuemen\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Grenze\":{\"category\":\"serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Grenze Gotisch\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Grey Qo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Griffy\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Gruppo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Gudea\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin,latin-ext\"},\"Gugi\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Gulzar\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Gupter\":{\"category\":\"serif\",\"variants\":\"regular,500,700\",\"subsets\":\"latin\"},\"Gurajada\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Gwendolyn\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Habibi\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Hachi Maru Pop\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Hahmlet\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"korean,latin,latin-ext,vietnamese\"},\"Halant\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Hammersmith One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Hanalei\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Hanalei Fill\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Handjet\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,armenian,cyrillic,cyrillic-ext,greek,hebrew,latin,latin-ext,vietnamese\"},\"Handlee\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Hanken Grotesk\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Hanuman\":{\"category\":\"serif\",\"variants\":\"100,300,regular,700,900\",\"subsets\":\"khmer,latin\"},\"Happy Monkey\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Harmattan\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Headland One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Heebo\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"hebrew,latin\"},\"Henny Penny\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Hepta Slab\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Herr Von Muellerhoff\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Hi Melody\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Hina Mincho\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext,vietnamese\"},\"Hind\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Hind Guntur\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,telugu\"},\"Hind Madurai\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,tamil\"},\"Hind Siliguri\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"bengali,latin,latin-ext\"},\"Hind Vadodara\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Holtwood One SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Homemade Apple\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Homenaje\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Hubballi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"kannada,latin,latin-ext\"},\"Hurricane\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"IBM Plex Mono\":{\"category\":\"monospace\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"IBM Plex Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"IBM Plex Sans Arabic\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"arabic,cyrillic-ext,latin,latin-ext\"},\"IBM Plex Sans Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"IBM Plex Sans Devanagari\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic-ext,devanagari,latin,latin-ext\"},\"IBM Plex Sans Hebrew\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic-ext,hebrew,latin,latin-ext\"},\"IBM Plex Sans JP\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"IBM Plex Sans KR\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"korean,latin,latin-ext\"},\"IBM Plex Sans Thai\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic-ext,latin,latin-ext,thai\"},\"IBM Plex Sans Thai Looped\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"cyrillic-ext,latin,latin-ext,thai\"},\"IBM Plex Serif\":{\"category\":\"serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"IM Fell DW Pica\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"IM Fell DW Pica SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"IM Fell Double Pica\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"IM Fell Double Pica SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"IM Fell English\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"IM Fell English SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"IM Fell French Canon\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"IM Fell French Canon SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"IM Fell Great Primer\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"IM Fell Great Primer SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ibarra Real Nova\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Iceberg\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Iceland\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Imbue\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Imperial Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Imprima\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Inclusive Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Inconsolata\":{\"category\":\"monospace\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Inder\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Indie Flower\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ingrid Darling\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Inika\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Inknut Antiqua\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Inria Sans\":{\"category\":\"sans-serif\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Inria Serif\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Inspiration\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Instrument Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Instrument Serif\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Inter\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Inter Tight\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Irish Grover\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Island Moments\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Istok Web\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Italiana\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Italianno\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Itim\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Jacques Francois\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Jacques Francois Shadow\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Jaldi\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"JetBrains Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,800,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Jim Nightshade\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Joan\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Jockey One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Jolly Lodger\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Jomhuria\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Jomolhari\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,tibetan\"},\"Josefin Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,100italic,200italic,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Josefin Slab\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,100italic,200italic,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin\"},\"Jost\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Joti One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Jua\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Judson\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Julee\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Julius Sans One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Junge\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Jura\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,kayah-li,latin,latin-ext,vietnamese\"},\"Just Another Hand\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Just Me Again Down Here\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"K2D\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Kablammo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Kadwa\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin\"},\"Kaisei Decol\":{\"category\":\"serif\",\"variants\":\"regular,500,700\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kaisei HarunoUmi\":{\"category\":\"serif\",\"variants\":\"regular,500,700\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kaisei Opti\":{\"category\":\"serif\",\"variants\":\"regular,500,700\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kaisei Tokumin\":{\"category\":\"serif\",\"variants\":\"regular,500,700,800\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kalam\":{\"category\":\"handwriting\",\"variants\":\"300,regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Kameron\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Kanit\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Kantumruy Pro\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,100italic,200italic,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"khmer,latin,latin-ext\"},\"Karantina\":{\"category\":\"display\",\"variants\":\"300,regular,700\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Karla\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,200italic,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext\"},\"Karma\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Katibeh\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Kaushan Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Kavivanar\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tamil\"},\"Kavoon\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Kdam Thmor Pro\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer,latin,latin-ext\"},\"Keania One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Kelly Slab\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Kenia\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Khand\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Khmer\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer\"},\"Khula\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,600,700,800\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Kings\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Kirang Haerang\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Kite One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Kiwi Maru\":{\"category\":\"serif\",\"variants\":\"300,regular,500\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Klee One\":{\"category\":\"handwriting\",\"variants\":\"regular,600\",\"subsets\":\"cyrillic,greek-ext,japanese,latin,latin-ext\"},\"Knewave\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"KoHo\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Kodchasan\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Koh Santepheap\":{\"category\":\"serif\",\"variants\":\"100,300,regular,700,900\",\"subsets\":\"khmer,latin\"},\"Kolker Brush\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Konkhmer Sleokchher\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin,latin-ext\"},\"Kosugi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kosugi Maru\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Kotta One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Koulen\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Kranky\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Kreon\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Kristi\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Krona One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Krub\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Kufam\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Kulim Park\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Kumar One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Kumar One Outline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Kumbh Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,math\"},\"Kurale\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,devanagari,latin,latin-ext\"},\"La Belle Aurore\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Labrada\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lacquer\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Laila\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Lakki Reddy\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Lalezar\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Lancelot\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Langar\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Lateef\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"arabic,latin,latin-ext\"},\"Lato\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,300,300italic,regular,italic,700,700italic,900,900italic\",\"subsets\":\"latin,latin-ext\"},\"Lavishly Yours\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"League Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"League Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"League Spartan\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Leckerli One\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ledger\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Lekton\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin,latin-ext\"},\"Lemon\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Lemonada\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Lexend\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Deca\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Exa\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Giga\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Mega\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Peta\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Tera\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lexend Zetta\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Libre Barcode 128\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode 128 Text\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode 39\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode 39 Extended\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode 39 Extended Text\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode 39 Text\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Barcode EAN13 Text\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Libre Baskerville\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin,latin-ext\"},\"Libre Bodoni\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Libre Caslon Display\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Libre Caslon Text\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin,latin-ext\"},\"Libre Franklin\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Licorice\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Life Savers\":{\"category\":\"display\",\"variants\":\"regular,700,800\",\"subsets\":\"latin,latin-ext\"},\"Lilita One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Lily Script One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Limelight\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Linden Hill\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Lisu Bosa\":{\"category\":\"serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,lisu\"},\"Literata\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Liu Jian Mao Cao\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"Livvic\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,900,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Lobster\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Lobster Two\":{\"category\":\"display\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Londrina Outline\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Londrina Shadow\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Londrina Sketch\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Londrina Solid\":{\"category\":\"display\",\"variants\":\"100,300,regular,900\",\"subsets\":\"latin\"},\"Long Cang\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"Lora\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Love Light\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Love Ya Like A Sister\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Loved by the King\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Lovers Quarrel\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Luckiest Guy\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Lugrasimo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Lumanosimo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Lunasima\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,latin,latin-ext,vietnamese\"},\"Lusitana\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Lustria\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Luxurious Roman\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Luxurious Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"M PLUS 1\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"M PLUS 1 Code\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"M PLUS 1p\":{\"category\":\"sans-serif\",\"variants\":\"100,300,regular,500,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,japanese,latin,latin-ext,vietnamese\"},\"M PLUS 2\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"M PLUS Code Latin\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"M PLUS Rounded 1c\":{\"category\":\"sans-serif\",\"variants\":\"100,300,regular,500,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,japanese,latin,latin-ext,vietnamese\"},\"Ma Shan Zheng\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"Macondo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Macondo Swash Caps\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Mada\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,latin,latin-ext\"},\"Magra\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Maiden Orange\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Maitree\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Major Mono Display\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Mako\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mali\":{\"category\":\"handwriting\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Mallanna\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Mandali\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Manjari\":{\"category\":\"sans-serif\",\"variants\":\"100,regular,700\",\"subsets\":\"latin,latin-ext,malayalam\"},\"Manrope\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Mansalva\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"greek,latin,latin-ext,vietnamese\"},\"Manuale\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,800,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Marcellus\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Marcellus SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Marck Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Margarine\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Marhey\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Markazi Text\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Marko One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Marmelad\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Martel\":{\"category\":\"serif\",\"variants\":\"200,300,regular,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Martel Sans\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Martian Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Marvel\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Mate\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Mate SC\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Material Icons\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Material Icons Outlined\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Material Icons Round\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Material Icons Sharp\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Material Icons Two Tone\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Material Symbols Outlined\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin\"},\"Material Symbols Rounded\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin\"},\"Material Symbols Sharp\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin\"},\"Maven Pro\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"McLaren\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mea Culpa\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Meddon\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"MedievalSharp\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Medula One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Meera Inimai\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,tamil\"},\"Megrim\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Meie Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Meow Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Merienda\":{\"category\":\"handwriting\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Merriweather\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,700,700italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Merriweather Sans\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Metal\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Metal Mania\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Metamorphous\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Metrophobic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Michroma\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Milonga\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Miltonian\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Miltonian Tattoo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Mina\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"bengali,latin,latin-ext\"},\"Mingzat\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,lepcha\"},\"Miniver\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Miriam Libre\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Mirza\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Miss Fajardose\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mitr\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Mochiy Pop One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin\"},\"Mochiy Pop P One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin\"},\"Modak\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Modern Antiqua\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mogra\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Mohave\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Moirai One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Molengo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Molle\":{\"category\":\"handwriting\",\"variants\":\"italic\",\"subsets\":\"latin,latin-ext\"},\"Monda\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Monofett\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Monomaniac One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Monoton\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Monsieur La Doulaise\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Montaga\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Montagu Slab\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"MonteCarlo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Montez\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Montserrat\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Montserrat Alternates\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Montserrat Subrayada\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Moo Lah Lah\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Mooli\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Moon Dance\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Moul\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Moulpali\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Mountains of Christmas\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Mouse Memoirs\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mr Bedfort\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mr Dafoe\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mr De Haviland\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mrs Saint Delafield\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Mrs Sheppards\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ms Madi\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Mukta\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Mukta Mahee\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Mukta Malar\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,tamil\"},\"Mukta Vaani\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Mulish\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Murecho\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,japanese,latin,latin-ext\"},\"MuseoModerno\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"My Soul\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Mynerve\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"greek,latin,latin-ext,vietnamese\"},\"Mystery Quest\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"NTR\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Nabla\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,math,vietnamese\"},\"Nanum Brush Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Nanum Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular,700,800\",\"subsets\":\"korean,latin\"},\"Nanum Gothic Coding\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"korean,latin\"},\"Nanum Myeongjo\":{\"category\":\"serif\",\"variants\":\"regular,700,800\",\"subsets\":\"korean,latin\"},\"Nanum Pen Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Narnoor\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"gunjala-gondi,latin,latin-ext\"},\"Neonderthaw\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Nerko One\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Neucha\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin\"},\"Neuton\":{\"category\":\"serif\",\"variants\":\"200,300,regular,italic,700,800\",\"subsets\":\"latin,latin-ext\"},\"New Rocker\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"New Tegomin\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"News Cycle\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Newsreader\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800,200italic,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Niconne\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Niramit\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Nixie One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nobile\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,500,500italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Nokora\":{\"category\":\"sans-serif\",\"variants\":\"100,300,regular,700,900\",\"subsets\":\"khmer,latin\"},\"Norican\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Nosifer\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Notable\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nothing You Could Do\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Noticia Text\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Noto Color Emoji\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"emoji\"},\"Noto Emoji\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"emoji\"},\"Noto Kufi Arabic\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic\"},\"Noto Music\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,music\"},\"Noto Naskh Arabic\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Noto Nastaliq Urdu\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Noto Rashi Hebrew\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Noto Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,devanagari,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Noto Sans Adlam\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"adlam,latin,latin-ext\"},\"Noto Sans Adlam Unjoined\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"adlam,latin,latin-ext\"},\"Noto Sans Anatolian Hieroglyphs\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"anatolian-hieroglyphs,latin,latin-ext\"},\"Noto Sans Arabic\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic\"},\"Noto Sans Armenian\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"armenian,latin,latin-ext\"},\"Noto Sans Avestan\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"avestan,latin,latin-ext\"},\"Noto Sans Balinese\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"balinese,latin,latin-ext\"},\"Noto Sans Bamum\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"bamum,latin,latin-ext\"},\"Noto Sans Bassa Vah\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"bassa-vah,latin,latin-ext\"},\"Noto Sans Batak\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"batak,latin,latin-ext\"},\"Noto Sans Bengali\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"bengali,latin,latin-ext\"},\"Noto Sans Bhaiksuki\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"bhaiksuki\"},\"Noto Sans Brahmi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"brahmi,latin,latin-ext\"},\"Noto Sans Buginese\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"buginese,latin,latin-ext\"},\"Noto Sans Buhid\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"buhid,latin,latin-ext\"},\"Noto Sans Canadian Aboriginal\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"canadian-aboriginal,latin,latin-ext\"},\"Noto Sans Carian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"carian,latin,latin-ext\"},\"Noto Sans Caucasian Albanian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"caucasian-albanian\"},\"Noto Sans Chakma\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"chakma,latin,latin-ext\"},\"Noto Sans Cham\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cham,latin,latin-ext\"},\"Noto Sans Cherokee\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cherokee,latin,latin-ext\"},\"Noto Sans Chorasmian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"chorasmian,latin,latin-ext\"},\"Noto Sans Coptic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"coptic,latin,latin-ext\"},\"Noto Sans Cuneiform\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cuneiform,latin,latin-ext\"},\"Noto Sans Cypriot\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cypriot\"},\"Noto Sans Cypro Minoan\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cypro-minoan,latin,latin-ext\"},\"Noto Sans Deseret\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"deseret,latin,latin-ext\"},\"Noto Sans Devanagari\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Noto Sans Display\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Noto Sans Duployan\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"duployan,latin,latin-ext\"},\"Noto Sans Egyptian Hieroglyphs\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"egyptian-hieroglyphs,latin,latin-ext\"},\"Noto Sans Elbasan\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"elbasan,latin,latin-ext\"},\"Noto Sans Elymaic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"elymaic\"},\"Noto Sans Ethiopic\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"ethiopic,latin,latin-ext\"},\"Noto Sans Georgian\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"georgian,latin,latin-ext\"},\"Noto Sans Glagolitic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,glagolitic,latin,latin-ext\"},\"Noto Sans Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"gothic,latin,latin-ext\"},\"Noto Sans Grantha\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"grantha,latin,latin-ext\"},\"Noto Sans Gujarati\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Noto Sans Gunjala Gondi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"gunjala-gondi\"},\"Noto Sans Gurmukhi\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Noto Sans HK\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"chinese-hongkong,cyrillic,latin,latin-ext,vietnamese\"},\"Noto Sans Hanifi Rohingya\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"hanifi-rohingya,latin,latin-ext\"},\"Noto Sans Hanunoo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"hanunoo,latin,latin-ext\"},\"Noto Sans Hatran\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"hatran,latin,latin-ext\"},\"Noto Sans Hebrew\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Noto Sans Imperial Aramaic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"imperial-aramaic,latin,latin-ext\"},\"Noto Sans Indic Siyaq Numbers\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"indic-siyaq-numbers,latin,latin-ext\"},\"Noto Sans Inscriptional Pahlavi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"inscriptional-pahlavi,latin,latin-ext\"},\"Noto Sans Inscriptional Parthian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"inscriptional-parthian,latin,latin-ext\"},\"Noto Sans JP\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,japanese,latin,latin-ext,vietnamese\"},\"Noto Sans Javanese\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"javanese,latin,latin-ext\"},\"Noto Sans KR\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,korean,latin,latin-ext,vietnamese\"},\"Noto Sans Kaithi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"kaithi,latin,latin-ext\"},\"Noto Sans Kannada\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"kannada,latin,latin-ext\"},\"Noto Sans Kayah Li\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"kayah-li,latin,latin-ext\"},\"Noto Sans Kharoshthi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"kharoshthi,latin,latin-ext\"},\"Noto Sans Khmer\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"khmer,latin,latin-ext\"},\"Noto Sans Khojki\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khojki,latin,latin-ext\"},\"Noto Sans Khudawadi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khudawadi,latin,latin-ext\"},\"Noto Sans Lao\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"lao,latin,latin-ext\"},\"Noto Sans Lao Looped\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"lao,latin,latin-ext\"},\"Noto Sans Lepcha\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,lepcha\"},\"Noto Sans Limbu\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,limbu\"},\"Noto Sans Linear A\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,linear-a\"},\"Noto Sans Linear B\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,linear-b\"},\"Noto Sans Lisu\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,lisu\"},\"Noto Sans Lycian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"lycian\"},\"Noto Sans Lydian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,lydian\"},\"Noto Sans Mahajani\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mahajani\"},\"Noto Sans Malayalam\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,malayalam\"},\"Noto Sans Mandaic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mandaic\"},\"Noto Sans Manichaean\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,manichaean\"},\"Noto Sans Marchen\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,marchen\"},\"Noto Sans Masaram Gondi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,masaram-gondi\"},\"Noto Sans Math\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"math\"},\"Noto Sans Mayan Numerals\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mayan-numerals\"},\"Noto Sans Medefaidrin\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,medefaidrin\"},\"Noto Sans Meetei Mayek\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,meetei-mayek\"},\"Noto Sans Mende Kikakui\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mende-kikakui\"},\"Noto Sans Meroitic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,meroitic\"},\"Noto Sans Miao\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,miao\"},\"Noto Sans Modi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,modi\"},\"Noto Sans Mongolian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mongolian\"},\"Noto Sans Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Noto Sans Mro\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,mro\"},\"Noto Sans Multani\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,multani\"},\"Noto Sans Myanmar\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"myanmar\"},\"Noto Sans NKo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,nko\"},\"Noto Sans Nabataean\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,nabataean\"},\"Noto Sans Nag Mundari\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,nag-mundari\"},\"Noto Sans Nandinagari\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,nandinagari\"},\"Noto Sans New Tai Lue\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,new-tai-lue\"},\"Noto Sans Newa\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,newa\"},\"Noto Sans Nushu\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,nushu\"},\"Noto Sans Ogham\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,ogham\"},\"Noto Sans Ol Chiki\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,ol-chiki\"},\"Noto Sans Old Hungarian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-hungarian\"},\"Noto Sans Old Italic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-italic\"},\"Noto Sans Old North Arabian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-north-arabian\"},\"Noto Sans Old Permic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic-ext,latin,latin-ext,old-permic\"},\"Noto Sans Old Persian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-persian\"},\"Noto Sans Old Sogdian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-sogdian\"},\"Noto Sans Old South Arabian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-south-arabian\"},\"Noto Sans Old Turkic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,old-turkic\"},\"Noto Sans Oriya\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,oriya\"},\"Noto Sans Osage\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,osage\"},\"Noto Sans Osmanya\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,osmanya\"},\"Noto Sans Pahawh Hmong\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,pahawh-hmong\"},\"Noto Sans Palmyrene\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,palmyrene\"},\"Noto Sans Pau Cin Hau\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,pau-cin-hau\"},\"Noto Sans Phags Pa\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"phags-pa\"},\"Noto Sans Phoenician\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,phoenician\"},\"Noto Sans Psalter Pahlavi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,psalter-pahlavi\"},\"Noto Sans Rejang\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,rejang\"},\"Noto Sans Runic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,runic\"},\"Noto Sans SC\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"chinese-simplified,cyrillic,latin,latin-ext,vietnamese\"},\"Noto Sans Samaritan\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,samaritan\"},\"Noto Sans Saurashtra\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,saurashtra\"},\"Noto Sans Sharada\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,sharada\"},\"Noto Sans Shavian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,shavian\"},\"Noto Sans Siddham\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,siddham\"},\"Noto Sans SignWriting\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,signwriting\"},\"Noto Sans Sinhala\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Noto Sans Sogdian\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,sogdian\"},\"Noto Sans Sora Sompeng\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,sora-sompeng\"},\"Noto Sans Soyombo\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,soyombo\"},\"Noto Sans Sundanese\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,sundanese\"},\"Noto Sans Syloti Nagri\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,syloti-nagri\"},\"Noto Sans Symbols\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,symbols\"},\"Noto Sans Symbols 2\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,symbols\"},\"Noto Sans Syriac\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,syriac\"},\"Noto Sans Syriac Eastern\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,syriac\"},\"Noto Sans TC\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"chinese-traditional,cyrillic,latin,latin-ext,vietnamese\"},\"Noto Sans Tagalog\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tagalog\"},\"Noto Sans Tagbanwa\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tagbanwa\"},\"Noto Sans Tai Le\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tai-le\"},\"Noto Sans Tai Tham\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,tai-tham\"},\"Noto Sans Tai Viet\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tai-viet\"},\"Noto Sans Takri\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,takri\"},\"Noto Sans Tamil\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,tamil\"},\"Noto Sans Tamil Supplement\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tamil-supplement\"},\"Noto Sans Tangsa\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,tangsa\"},\"Noto Sans Telugu\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,telugu\"},\"Noto Sans Thaana\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,thaana\"},\"Noto Sans Thai\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,thai\"},\"Noto Sans Thai Looped\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,thai\"},\"Noto Sans Tifinagh\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tifinagh\"},\"Noto Sans Tirhuta\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tirhuta\"},\"Noto Sans Ugaritic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,ugaritic\"},\"Noto Sans Vai\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vai\"},\"Noto Sans Vithkuqi\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,vithkuqi\"},\"Noto Sans Wancho\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,wancho\"},\"Noto Sans Warang Citi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,warang-citi\"},\"Noto Sans Yi\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,yi\"},\"Noto Sans Zanabazar Square\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,zanabazar-square\"},\"Noto Serif\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Noto Serif Ahom\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"ahom,latin,latin-ext\"},\"Noto Serif Armenian\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"armenian,latin,latin-ext\"},\"Noto Serif Balinese\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"balinese,latin,latin-ext\"},\"Noto Serif Bengali\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"bengali,latin,latin-ext\"},\"Noto Serif Devanagari\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Noto Serif Display\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Noto Serif Dogra\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"dogra,latin,latin-ext\"},\"Noto Serif Ethiopic\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"ethiopic,latin,latin-ext\"},\"Noto Serif Georgian\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"georgian,latin,latin-ext\"},\"Noto Serif Grantha\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"grantha,latin,latin-ext\"},\"Noto Serif Gujarati\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Noto Serif Gurmukhi\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Noto Serif HK\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"chinese-hongkong,cyrillic,latin,latin-ext,vietnamese\"},\"Noto Serif Hebrew\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Noto Serif JP\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,900\",\"subsets\":\"japanese,latin\"},\"Noto Serif KR\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,900\",\"subsets\":\"korean,latin\"},\"Noto Serif Kannada\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"kannada,latin,latin-ext\"},\"Noto Serif Khitan Small Script\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"khitan-small-script,latin,latin-ext\"},\"Noto Serif Khmer\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"khmer,latin,latin-ext\"},\"Noto Serif Khojki\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"khojki,latin,latin-ext\"},\"Noto Serif Lao\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"lao,latin,latin-ext\"},\"Noto Serif Makasar\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,makasar\"},\"Noto Serif Malayalam\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,malayalam\"},\"Noto Serif Myanmar\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"myanmar\"},\"Noto Serif NP Hmong\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,nyiakeng-puachue-hmong\"},\"Noto Serif Oriya\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,oriya\"},\"Noto Serif Ottoman Siyaq\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,ottoman-siyaq-numbers\"},\"Noto Serif SC\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,900\",\"subsets\":\"chinese-simplified,latin\"},\"Noto Serif Sinhala\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Noto Serif TC\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,900\",\"subsets\":\"chinese-traditional,latin\"},\"Noto Serif Tamil\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,tamil\"},\"Noto Serif Tangut\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tangut\"},\"Noto Serif Telugu\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,telugu\"},\"Noto Serif Thai\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,thai\"},\"Noto Serif Tibetan\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,tibetan\"},\"Noto Serif Toto\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,toto\"},\"Noto Serif Vithkuqi\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,vithkuqi\"},\"Noto Serif Yezidi\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"latin,latin-ext,yezidi\"},\"Noto Traditional Nushu\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,nushu\"},\"Nova Cut\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Flat\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"greek,latin\"},\"Nova Oval\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Round\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Script\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Slim\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nova Square\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Numans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Nunito\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Nunito Sans\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Nuosu SIL\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,yi\"},\"Odibee Sans\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Odor Mean Chey\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Offside\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Oi\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,tamil,vietnamese\"},\"Old Standard TT\":{\"category\":\"serif\",\"variants\":\"regular,italic,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Oldenburg\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ole\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Oleo Script\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Oleo Script Swash Caps\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Oooh Baby\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Open Sans\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,latin,latin-ext,vietnamese\"},\"Oranienbaum\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Orbit\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin,latin-ext\"},\"Orbitron\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"latin\"},\"Oregano\":{\"category\":\"display\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Orelega One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Orienta\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Original Surfer\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Oswald\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Outfit\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext\"},\"Over the Rainbow\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Overlock\":{\"category\":\"display\",\"variants\":\"regular,italic,700,700italic,900,900italic\",\"subsets\":\"latin,latin-ext\"},\"Overlock SC\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Overpass\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Overpass Mono\":{\"category\":\"monospace\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Ovo\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Oxanium\":{\"category\":\"display\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext\"},\"Oxygen\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,700\",\"subsets\":\"latin,latin-ext\"},\"Oxygen Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"PT Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"PT Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"PT Sans Caption\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"PT Sans Narrow\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"PT Serif\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"PT Serif Caption\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Pacifico\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Padauk\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,myanmar\"},\"Padyakke Expanded One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"kannada,latin,latin-ext\"},\"Palanquin\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Palanquin Dark\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Palette Mosaic\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin\"},\"Pangolin\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Paprika\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Parisienne\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Passero One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Passion One\":{\"category\":\"display\",\"variants\":\"regular,700,900\",\"subsets\":\"latin,latin-ext\"},\"Passions Conflict\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Pathway Extreme\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Pathway Gothic One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Patrick Hand\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Patrick Hand SC\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Pattaya\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext,thai,vietnamese\"},\"Patua One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Pavanam\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,tamil\"},\"Paytone One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Peddana\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Peralta\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Permanent Marker\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Petemoss\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Petit Formal Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Petrona\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Philosopher\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,vietnamese\"},\"Phudu\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Piazzolla\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Piedra\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Pinyon Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Pirata One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Plaster\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Play\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Playball\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Playfair\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,800,900,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Playfair Display\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Playfair Display SC\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic,900,900italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Plus Jakarta Sans\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,200italic,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Podkova\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Poiret One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Poller One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Poltawski Nowy\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Poly\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin\"},\"Pompiere\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Pontano Sans\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Poor Story\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Poppins\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Port Lligat Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Port Lligat Slab\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Potta One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext,vietnamese\"},\"Pragati Narrow\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Praise\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Prata\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,vietnamese\"},\"Preahvihear\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Press Start 2P\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Pridi\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Princess Sofia\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Prociono\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Prompt\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Prosto One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Proza Libre\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"latin,latin-ext\"},\"Public Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Puppies Play\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Puritan\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Purple Purse\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Qahiri\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"arabic,latin\"},\"Quando\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Quantico\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Quattrocento\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Quattrocento Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Questrial\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Quicksand\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Quintessential\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Qwigley\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Qwitcher Grypen\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"REM\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Racing Sans One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Radio Canada\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"canadian-aboriginal,latin,latin-ext,vietnamese\"},\"Radley\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Rajdhani\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Rakkas\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext\"},\"Raleway\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Raleway Dots\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ramabhadra\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Ramaraja\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Rambla\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Rammetto One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Rampart One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Ranchers\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Rancho\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ranga\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Rasa\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"gujarati,latin,latin-ext,vietnamese\"},\"Rationale\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Ravi Prakash\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Readex Pro\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Recursive\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic-ext,latin,latin-ext,vietnamese\"},\"Red Hat Display\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,900,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Red Hat Mono\":{\"category\":\"monospace\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Red Hat Text\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Red Rose\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Redacted\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Redacted Script\":{\"category\":\"display\",\"variants\":\"300,regular,700\",\"subsets\":\"latin,latin-ext\"},\"Redressed\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Reem Kufi\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Reem Kufi Fun\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Reem Kufi Ink\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"arabic,latin,latin-ext,vietnamese\"},\"Reenie Beanie\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Reggae One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Revalia\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Rhodium Libre\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Ribeye\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ribeye Marrow\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Righteous\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Risque\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Road Rage\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Roboto\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,900,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Roboto Condensed\":{\"category\":\"sans-serif\",\"variants\":\"300,300italic,regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Roboto Flex\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Roboto Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,100italic,200italic,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Roboto Serif\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Roboto Slab\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Rochester\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Rock 3D\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin\"},\"Rock Salt\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"RocknRoll One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Rokkitt\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Romanesco\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ropa Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Rosario\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Rosarivo\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Rouge Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Rowdies\":{\"category\":\"display\",\"variants\":\"300,regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Rozha One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Rubik\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700,800,900,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"arabic,cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik 80s Fade\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Beastly\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Bubbles\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Burned\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Dirt\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Distressed\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Gemstones\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Glitch\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Iso\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Marker Hatch\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Maze\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Microbe\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Mono One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Rubik Moonrocks\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Pixels\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Puddles\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Spray Paint\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Storm\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Vinyl\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Rubik Wet Paint\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,hebrew,latin,latin-ext\"},\"Ruda\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Rufina\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Ruge Boogie\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Ruluko\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Rum Raisin\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Ruslan Display\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Russo One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Ruthie\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Ruwudu\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Rye\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"STIX Two Text\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Sacramento\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Sahitya\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin\"},\"Sail\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Saira\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Saira Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Saira Extra Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Saira Semi Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Saira Stencil One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Salsa\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sanchez\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Sancreek\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Sansita\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext\"},\"Sansita Swashed\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sarabun\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Sarala\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Sarina\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Sarpanch\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Sassy Frass\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Satisfy\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sawarabi Gothic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext,vietnamese\"},\"Sawarabi Mincho\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Scada\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext\"},\"Scheherazade New\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700\",\"subsets\":\"arabic,latin,latin-ext\"},\"Schibsted Grotesk\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"Schoolbell\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Scope One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Seaweed Script\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Secular One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Sedgwick Ave\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sedgwick Ave Display\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sen\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"latin,latin-ext\"},\"Send Flowers\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sevillana\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Seymour One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Shadows Into Light\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Shadows Into Light Two\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Shalimar\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Shantell Sans\":{\"category\":\"display\",\"variants\":\"300,regular,500,600,700,800,300italic,italic,500italic,600italic,700italic,800italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Shanti\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Share\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Share Tech\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Share Tech Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Shippori Antique\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Shippori Antique B1\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Shippori Mincho\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"japanese,latin,latin-ext\"},\"Shippori Mincho B1\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"japanese,latin,latin-ext\"},\"Shizuru\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"japanese,latin\"},\"Shojumaru\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Short Stack\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Shrikhand\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"gujarati,latin,latin-ext\"},\"Siemreap\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"khmer\"},\"Sigmar\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sigmar One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Signika\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Signika Negative\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Silkscreen\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Simonetta\":{\"category\":\"display\",\"variants\":\"regular,italic,900,900italic\",\"subsets\":\"latin,latin-ext\"},\"Single Day\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean\"},\"Sintony\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Sirin Stencil\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Six Caps\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Skranji\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"},\"Slabo 13px\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Slabo 27px\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Slackey\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Slackside One\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Smokum\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Smooch\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Smooch Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Smythe\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sniglet\":{\"category\":\"display\",\"variants\":\"regular,800\",\"subsets\":\"latin,latin-ext\"},\"Snippet\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Snowburst One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Sofadi One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sofia\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sofia Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Sofia Sans Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Sofia Sans Extra Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Sofia Sans Semi Condensed\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext\"},\"Solitreo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Solway\":{\"category\":\"serif\",\"variants\":\"300,regular,500,700,800\",\"subsets\":\"latin\"},\"Song Myung\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Sono\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sonsie One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Sora\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext\"},\"Sorts Mill Goudy\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Source Code Pro\":{\"category\":\"monospace\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Source Sans 3\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext,vietnamese\"},\"Source Serif 4\":{\"category\":\"serif\",\"variants\":\"200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Space Grotesk\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Space Mono\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Special Elite\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Spectral\":{\"category\":\"serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Spectral SC\":{\"category\":\"serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Spicy Rice\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Spinnaker\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Spirax\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Splash\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Spline Sans\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext\"},\"Spline Sans Mono\":{\"category\":\"monospace\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext\"},\"Squada One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Square Peg\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Sree Krushnadevaraya\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Sriracha\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Srisakdi\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Staatliches\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Stalemate\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Stalinist One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Stardos Stencil\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Stick\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Stick No Bills\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Stint Ultra Condensed\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Stint Ultra Expanded\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Stoke\":{\"category\":\"serif\",\"variants\":\"300,regular\",\"subsets\":\"latin,latin-ext\"},\"Strait\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Style Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Stylish\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Sue Ellen Francisco\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Suez One\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"hebrew,latin,latin-ext\"},\"Sulphur Point\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,700\",\"subsets\":\"latin,latin-ext\"},\"Sumana\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Sunflower\":{\"category\":\"sans-serif\",\"variants\":\"300,500,700\",\"subsets\":\"korean,latin\"},\"Sunshiney\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Supermercado One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Sura\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Suranna\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Suravaram\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Suwannaphum\":{\"category\":\"serif\",\"variants\":\"100,300,regular,700,900\",\"subsets\":\"khmer,latin\"},\"Swanky and Moo Moo\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Syncopate\":{\"category\":\"sans-serif\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Syne\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"greek,latin,latin-ext\"},\"Syne Mono\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Syne Tactile\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Tai Heritage Pro\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,tai-viet,vietnamese\"},\"Tajawal\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,700,800,900\",\"subsets\":\"arabic,latin\"},\"Tangerine\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Tapestry\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Taprom\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"khmer,latin\"},\"Tauri\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Taviraj\":{\"category\":\"serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Teko\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Tektur\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Telex\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Tenali Ramakrishna\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Tenor Sans\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Text Me One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Texturina\":{\"category\":\"serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Thasadith\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"The Girl Next Door\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"The Nautigal\":{\"category\":\"handwriting\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Tienne\":{\"category\":\"serif\",\"variants\":\"regular,700,900\",\"subsets\":\"latin\"},\"Tillana\":{\"category\":\"display\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Tilt Neon\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Tilt Prism\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Tilt Warp\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Timmana\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,telugu\"},\"Tinos\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,hebrew,latin,latin-ext,vietnamese\"},\"Tiro Bangla\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"bengali,latin,latin-ext\"},\"Tiro Devanagari Hindi\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Tiro Devanagari Marathi\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Tiro Devanagari Sanskrit\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Tiro Gurmukhi\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"gurmukhi,latin,latin-ext\"},\"Tiro Kannada\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"kannada,latin,latin-ext\"},\"Tiro Tamil\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,tamil\"},\"Tiro Telugu\":{\"category\":\"serif\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,telugu\"},\"Titan One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Titillium Web\":{\"category\":\"sans-serif\",\"variants\":\"200,200italic,300,300italic,regular,italic,600,600italic,700,700italic,900\",\"subsets\":\"latin,latin-ext\"},\"Tomorrow\":{\"category\":\"sans-serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext\"},\"Tourney\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Trade Winds\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Train One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Trirong\":{\"category\":\"serif\",\"variants\":\"100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\",\"subsets\":\"latin,latin-ext,thai,vietnamese\"},\"Trispace\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Trocchi\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Trochut\":{\"category\":\"display\",\"variants\":\"regular,italic,700\",\"subsets\":\"latin\"},\"Truculenta\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Trykker\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Tsukimi Rounded\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"japanese,latin,latin-ext\"},\"Tulpen One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Turret Road\":{\"category\":\"display\",\"variants\":\"200,300,regular,500,700,800\",\"subsets\":\"latin,latin-ext\"},\"Twinkle Star\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Ubuntu\":{\"category\":\"sans-serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Ubuntu Condensed\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Ubuntu Mono\":{\"category\":\"monospace\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,greek-ext,latin,latin-ext\"},\"Uchen\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,tibetan\"},\"Ultra\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Unbounded\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Uncial Antiqua\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Underdog\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,latin,latin-ext\"},\"Unica One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"UnifrakturCook\":{\"category\":\"display\",\"variants\":\"700\",\"subsets\":\"latin\"},\"UnifrakturMaguntia\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Unkempt\":{\"category\":\"display\",\"variants\":\"regular,700\",\"subsets\":\"latin\"},\"Unlock\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Unna\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Updock\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Urbanist\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext\"},\"VT323\":{\"category\":\"monospace\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Vampiro One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Varela\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Varela Round\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"hebrew,latin,latin-ext,vietnamese\"},\"Varta\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Vast Shadow\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Vazirmatn\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"arabic,latin,latin-ext\"},\"Vesper Libre\":{\"category\":\"serif\",\"variants\":\"regular,500,700,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Viaoda Libre\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Vibes\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"arabic,latin\"},\"Vibur\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Victor Mono\":{\"category\":\"monospace\",\"variants\":\"100,200,300,regular,500,600,700,100italic,200italic,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Vidaloka\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Viga\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Vina Sans\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Voces\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Volkhov\":{\"category\":\"serif\",\"variants\":\"regular,italic,700,700italic\",\"subsets\":\"latin\"},\"Vollkorn\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,800,900,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Vollkorn SC\":{\"category\":\"serif\",\"variants\":\"regular,600,700,900\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Voltaire\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Vujahday Script\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Waiting for the Sunrise\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Wallpoet\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Walter Turncoat\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Warnes\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Water Brush\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Waterfall\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Wavefont\":{\"category\":\"display\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"latin,latin-ext\"},\"Wellfleet\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Wendy One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Whisper\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"WindSong\":{\"category\":\"handwriting\",\"variants\":\"regular,500\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Wire One\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Wix Madefor Display\":{\"category\":\"sans-serif\",\"variants\":\"regular,500,600,700,800\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Wix Madefor Text\":{\"category\":\"sans-serif\",\"variants\":\"regular,italic,500,500italic,600,600italic,700,700italic,800,800italic\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Work Sans\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Xanh Mono\":{\"category\":\"monospace\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Yaldevi\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"latin,latin-ext,sinhala\"},\"Yanone Kaffeesatz\":{\"category\":\"sans-serif\",\"variants\":\"200,300,regular,500,600,700\",\"subsets\":\"cyrillic,latin,latin-ext,vietnamese\"},\"Yantramanav\":{\"category\":\"sans-serif\",\"variants\":\"100,300,regular,500,700,900\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Yatra One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"devanagari,latin,latin-ext\"},\"Yellowtail\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Yeon Sung\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"korean,latin\"},\"Yeseva One\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"cyrillic,cyrillic-ext,latin,latin-ext,vietnamese\"},\"Yesteryear\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Yomogi\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext,vietnamese\"},\"Yrsa\":{\"category\":\"serif\",\"variants\":\"300,regular,500,600,700,300italic,italic,500italic,600italic,700italic\",\"subsets\":\"latin,latin-ext,vietnamese\"},\"Ysabeau\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Ysabeau Infant\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Ysabeau Office\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Ysabeau SC\":{\"category\":\"sans-serif\",\"variants\":\"100,200,300,regular,500,600,700,800,900\",\"subsets\":\"cyrillic,cyrillic-ext,greek,latin,latin-ext,vietnamese\"},\"Yuji Boku\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Yuji Hentaigana Akari\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Yuji Hentaigana Akebono\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"Yuji Mai\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Yuji Syuku\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Yusei Magic\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"japanese,latin,latin-ext\"},\"ZCOOL KuaiLe\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"ZCOOL QingKe HuangYou\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"ZCOOL XiaoWei\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"Zen Antique\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext\"},\"Zen Antique Soft\":{\"category\":\"serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext\"},\"Zen Dots\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Zen Kaku Gothic Antique\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,700,900\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Zen Kaku Gothic New\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,700,900\",\"subsets\":\"cyrillic,japanese,latin,latin-ext\"},\"Zen Kurenaido\":{\"category\":\"sans-serif\",\"variants\":\"regular\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext\"},\"Zen Loop\":{\"category\":\"display\",\"variants\":\"regular,italic\",\"subsets\":\"latin,latin-ext\"},\"Zen Maru Gothic\":{\"category\":\"sans-serif\",\"variants\":\"300,regular,500,700,900\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext\"},\"Zen Old Mincho\":{\"category\":\"serif\",\"variants\":\"regular,500,600,700,900\",\"subsets\":\"cyrillic,greek,japanese,latin,latin-ext\"},\"Zen Tokyo Zoo\":{\"category\":\"display\",\"variants\":\"regular\",\"subsets\":\"latin,latin-ext\"},\"Zeyada\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"latin\"},\"Zhi Mang Xing\":{\"category\":\"handwriting\",\"variants\":\"regular\",\"subsets\":\"chinese-simplified,latin\"},\"Zilla Slab\":{\"category\":\"serif\",\"variants\":\"300,300italic,regular,italic,500,500italic,600,600italic,700,700italic\",\"subsets\":\"latin,latin-ext\"},\"Zilla Slab Highlight\":{\"category\":\"serif\",\"variants\":\"regular,700\",\"subsets\":\"latin,latin-ext\"}}");

/***/ }),

/***/ "./main/InputfieldPageGrid.js":
/*!************************************!*\
  !*** ./main/InputfieldPageGrid.js ***!
  \************************************/
/*! exports provided: busyDialogTrue, InputfieldPageGridDialog, loadBlockFiles, createItem, deleteData, cloneItem, loadBlueprint, updateData, InputfieldPageGridUpdate, saveItem, removeItem, addOrRemove, updateSort, changeParent, InputfieldPageGridSort, sortGrid, sortParent, deleteItem, lockItem, convertSymbol, reInitItem, reinitInlineEdit, autoSorting, postAjax, gridSettingsRowCol, removeRow, addRow, removeCol, addCol, inlineSave, setBreakpoint, showHidden, initBlueprintNav, checkIfEmpty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "busyDialogTrue", function() { return busyDialogTrue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputfieldPageGridDialog", function() { return InputfieldPageGridDialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadBlockFiles", function() { return loadBlockFiles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createItem", function() { return createItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteData", function() { return deleteData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneItem", function() { return cloneItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadBlueprint", function() { return loadBlueprint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateData", function() { return updateData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputfieldPageGridUpdate", function() { return InputfieldPageGridUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveItem", function() { return saveItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeItem", function() { return removeItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addOrRemove", function() { return addOrRemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateSort", function() { return updateSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeParent", function() { return changeParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputfieldPageGridSort", function() { return InputfieldPageGridSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortGrid", function() { return sortGrid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortParent", function() { return sortParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteItem", function() { return deleteItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lockItem", function() { return lockItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertSymbol", function() { return convertSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reInitItem", function() { return reInitItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reinitInlineEdit", function() { return reinitInlineEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autoSorting", function() { return autoSorting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postAjax", function() { return postAjax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gridSettingsRowCol", function() { return gridSettingsRowCol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeRow", function() { return removeRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addRow", function() { return addRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeCol", function() { return removeCol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addCol", function() { return addCol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inlineSave", function() { return inlineSave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setBreakpoint", function() { return setBreakpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showHidden", function() { return showHidden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initBlueprintNav", function() { return initBlueprintNav; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkIfEmpty", function() { return checkIfEmpty; });
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _add_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item */ "./main/add-item.js");
/* harmony import */ var _drag_resize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drag-resize */ "./main/drag-resize.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./main/settings.js");






var busyDialog = false;
var iframe = $('#pg-iframe-canvas');
var c = iframe.contents();
iframe.on('load', function () {
  c = iframe.contents();
});
function busyDialogTrue() {
  busyDialog = true;
}
function InputfieldPageGridDialog() {
  var _this = this;

  var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return function (el) {
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents();

    if ($('body').hasClass('pg-block-panel')) {
      console.log('cancel: panel blocked');
      return false;
    } //close all remaining modals to prevent bug


    $(".pg-settings-content-modal .ui-dialog-content").dialog("close");

    if (el == null) {
      var el = $(_this);
    }

    if (!el.hasClass('pg-file-picker')) {
      event.preventDefault();
    }

    event.stopImmediatePropagation();

    if (el.hasClass('pg-item-active')) {
      // console.log('cancel: already open');
      return false;
    }

    var elId = el.attr('data-id-original') || el.attr('data-id') || el.attr('data-page'); //  save.saveData(el);

    c.find('.pg-item-active').removeClass('pg-item-active');
    c.find('.pg-item-selected').removeClass('pg-item-selected'); //do not remove active class from style panel to keep panel open

    $('.pg-settings-active:not(.pg-stylepanel)').removeClass('pg-settings-active');
    el.addClass('pg-item-active pg-item-selected');
    var iHeader = $('.pg-item-header[data-id-original="' + elId + '"]');
    $('.pg-item-header').hide();
    $('.pg-item-header.active').removeClass('active');
    iHeader.show();
    iHeader.addClass('active'); // update-doom-list

    var itemId = el.attr('id');
    $('.pg-item-list-active').removeClass('pg-item-list-active');
    $('.pg-item-list [data-sort-id="#' + itemId + '"]').addClass('pg-item-list-active');
    var activeParents = $('.pg-item-list-active').parents('.sort-item');

    if (activeParents.length) {
      activeParents.removeClass('sort-item-close');
    }

    busyDialog = false;

    if (el.hasClass('pg-file-picker')) {
      var el = $(_this).parent().find('.pg-fileupload.pg-style-panel').first();
    }

    el.closest('.pg-item').addClass('pg-item-selected');
    el.addClass('pg-item-active');

    if (el.length == 0) {
      el = c.find('.pg-item-active').first();
    }

    var settingsName = el.attr('data-class') || el.attr('id') || el.prop("tagName");
    $('.pg-stylepanel').addClass('pg-settings-active');
    $('.pg-stylepanel .ui-dialog-title').text(settingsName);
    $('body').addClass('pg-settings-active');
    _settings__WEBPACK_IMPORTED_MODULE_5__["initSettings"]();
  }(el);
}
function loadBlockFiles(el) {
  var fromModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  var iframe = document.getElementById("pg-iframe-canvas");
  var dataType = el.attr('data-template') || '';
  var folderUrl = '/site/templates/blocks/';
  if (!dataType) return;

  if (fromModule) {
    var folderUrl = '/site/modules/PageGridBlocks/blocks/';
  }

  if (type == 'all' || type == 'css') {
    //load css
    var fileUrl = folderUrl + dataType + '.css';
    $.ajax({
      url: fileUrl,
      type: 'HEAD',
      success: function success() {
        //file exists
        var style = iframe.contentWindow.document.createElement("link");
        style.type = 'text/css';
        style.rel = 'stylesheet';
        style.href = fileUrl;
        style.media = 'all';
        iframe.contentWindow.document.head.prepend(style);
      },
      error: function error() {
        //file not exists, load from module folder
        if (!fromModule) {
          loadBlockFiles(el, true, 'css');
        }
      }
    });
  }

  if (type == 'all' || type == 'js') {
    //load js
    var fileUrl = folderUrl + dataType + '.js';
    $.ajax({
      url: fileUrl,
      type: 'HEAD',
      success: function success() {
        //file exists
        var script = iframe.contentWindow.document.createElement("script");
        script.type = "text/javascript";
        script.src = fileUrl;
        iframe.contentWindow.document.body.appendChild(script);
      },
      error: function error() {
        //file not exists, load from module folder
        if (!fromModule) {
          loadBlockFiles(el, true, 'js');
        }
      }
    });
  }
} // ajax for creating page item

function createItem(templateId) {
  var colStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
  var rowStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'auto';
  var colEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
  var rowEnd = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  var type = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'add';
  var pageId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var insertAfter = c.find('.pg [data-afterid]').attr('data-afterid') || 0;
  var parentId = c.find('.pg-target').attr('data-id');
  var form_data = new FormData();
  var addedPage = 0;
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  form_data.append('type', type);
  form_data.append('templateId', templateId);
  form_data.append('parentId', parentId);
  form_data.append('insertAfter', insertAfter);
  form_data.append('pageId', pageId);
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {
      console.log("AJAX Success");
      addedPage = data;
      console.log(addedPage);
      InputfieldPageGridUpdate(addedPage, colStart, rowStart, colEnd, rowEnd, insertAfter);
      c.find('.pg-target').removeClass('pg-target');
    },
    error: function error(xhr, ajaxOptions, thrownError) {
      // alert(xhr.responseText);
      el.removeClass('pg-add');
    }
  });
} // helper to delete data without removing page

function deleteData(pageName, itemId) {
  var form_data = new FormData();
  form_data.append('type', 'deleteData');
  form_data.append('pageName', pageName);
  form_data.append('itemId', itemId);
  postAjax(form_data);
}
function cloneItem(pageId) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var type = 'clone';
  var form_data = new FormData();
  var addedPage = 0;
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  var cloneOriginal = c.find('.pg-item[data-id-original="' + pageId + '"]') || c.find('.pg-item[data-id="' + pageId + '"]');
  var elActive = c.find('.pg-item-active');
  var insertAfter = 0; // check if clone is on page or inserted into another page or item

  if (cloneOriginal.length) {
    //insert after clone
    insertAfter = pageId;
  } else {
    //insert into main conatiner
    insertAfter = c.find('.pg-main').attr('data-id');
  }

  if (elActive.length) {
    //insert after active el
    insertAfter = elActive.attr('data-id-original') || elActive.attr('data-id');
  }

  form_data.append('type', type);
  form_data.append('pageId', pageId);
  form_data.append('insertAfter', insertAfter);
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {
      console.log("AJAX Success");
      addedPage = data; // console.log(addedPage);

      InputfieldPageGridUpdate(addedPage, 0, 0, 0, 0, insertAfter, pageId);
      c.find('.pg-target').removeClass('pg-target'); //update data object

      updateData();
    },
    error: function error(xhr, ajaxOptions, thrownError) {// alert(xhr.responseText);
    }
  });
}
function loadBlueprint(pageId, name) {
  if (!pageId || !name) return;
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  var form_data = new FormData();
  form_data.append('type', 'loadBlueprint');
  form_data.append('pageId', pageId);
  form_data.append('name', name); // postAjax(form_data);

  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {
      window.location.reload(true);
    },
    error: function error(xhr, ajaxOptions, thrownError) {
      alert(xhr.responseText);
    }
  });
} // update all global data
// only needed when copy/paste items to new page

function updateData() {
  console.log('update data');
  var form_data = new FormData();
  form_data.append('type', 'getData');
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {
      var dataJson = JSON.parse(data);
      $('.pg-container').data('pg', dataJson);
    },
    error: function error(xhr, ajaxOptions, thrownError) {
      alert(xhr.responseText);
    }
  });
} // ajax add created page item

function InputfieldPageGridUpdate(addedPage) {
  var colStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
  var rowStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'auto';
  var colEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
  var rowEnd = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  var insertAfter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var cloneId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
  return function (insertAfter) {
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents(); // ajax finished

    busyDialog = true;
    console.log('addedPage' + addedPage);
    console.log('createAfter', insertAfter);
    console.log('ajaxCol' + colStart);
    console.log('ajaxColEnd' + colEnd);
    console.log('ajaxRow' + rowStart);
    console.log('ajaxRowEnd' + rowEnd);

    if (addedPage == 0 || addedPage == null) {
      return;
    } // get json back


    var dataJson = JSON.parse(addedPage);
    var markup = dataJson.markup;
    var css = dataJson.css;
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents(); //remove placeholder

    checkIfEmpty(); //handle clone

    if (cloneId) {
      var newPages = dataJson.newPages;
      var insertAfter = c.find('.pg-item[data-id-original="' + insertAfter + '"]') || c.find('.pg-item[data-id="' + insertAfter + '"]');

      if (insertAfter.length == 0) {
        return;
      }

      console.log('newPages: ' + newPages);
      console.log('css: ' + css);
      console.log('markup: ' + markup); //update dom with markup

      c.find(insertAfter).after(markup); //copy data and reinit items

      $.each(newPages, function (originalId, cloneId) {
        console.log('clone: ' + originalId + '->' + cloneId);
        var cloneItem = c.find('.pg-item[data-id-original="' + cloneId + '"]') || c.find('.pg-item[data-id="' + cloneId + '"]');
        var data = $('.pg-container').data('pg')[originalId];
        $('.pg-container').data('pg')[cloneId] = data;
        reInitItem(cloneItem);
      }); //add css

      var iframe = $('#pg-iframe-canvas');
      var c = iframe.contents(); // c.find('.pg-style').remove();

      var lastItem = c.find('style.pg-style').last();
      $(css).insertAfter(lastItem); //update sort

      InputfieldPageGridSort(c.find(insertAfter).parent());
    } else {
      var newPageClass = dataJson.newPageClass;
      console.log('newPageClass2 :' + newPageClass);
      console.log('colStart :' + colStart);
      console.log('colEnd :' + colEnd);
      console.log('rowStart :' + rowStart);
      console.log('rowEnd :' + rowEnd); //add new Page
      //update dom with markup

      c.find('.pg .pg-add').replaceWith(markup);
      var newItem = c.find('#' + newPageClass); //for symbols use unique pageId

      if (dataJson.pageId) {
        newItem = c.find('[data-id-original="' + dataJson.pageId + '"]');
      }

      newItem.css('grid-column-start', colStart);
      newItem.css('grid-row-start', rowStart);
      newItem.css('grid-column-end', colEnd);
      newItem.css('grid-row-end', 'span ' + rowEnd); //save item with all grid styles and new tagname (disable debounce)

      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"](newItem, 'grid-column-start', 'all', 0, 0, 0);
      InputfieldPageGridSort(newItem.parent()); // change tagname for tagname options

      newItem.find('[data-pg-tagName]').each(function () {
        var el = $(this).closest('.pg-item');
        var newTagName = $(this).attr('data-pg-tagName');
        _settings__WEBPACK_IMPORTED_MODULE_5__["changeTagname"](el, newTagName);
      }); // END change tagname for tagname options

      reInitItem(newItem);
      loadBlockFiles(newItem);
    }

    c.find('.pg .pg-add').removeClass('pg-add');
    ;
  }(insertAfter);
} // ajax for saving styles

function saveItem(pageId, data) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var pageIdItem = el.attr('data-id');
  var mainPageId = c.find('.pg-main').attr('data-id');
  var pgField = c.find('.pg-main').attr('data-field');
  var form_data = new FormData();
  form_data.append('type', 'save');
  form_data.append('pageId', pageId);
  form_data.append('pageIdItem', pageIdItem);
  form_data.append('data', data);
  form_data.append('pgField', pgField);
  form_data.append('mainPageId', mainPageId);
  postAjax(form_data);
}
; //function to delete pages (items and classes)

function removeItem(itemId) {
  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  console.log('remove id: ' + itemId);
  var form_data = new FormData();
  form_data.append('type', 'delete');
  form_data.append('removeId', itemId);
  form_data.append('parentId', parentId);
  postAjax(form_data);
}
function addOrRemove(array, value) {
  var index = array.indexOf(value);

  if (index === -1) {
    array.push(value);
  } else {
    array.splice(index, 1);
  }
} // send ajax to update group sort order

function updateSort(parent, sort) {
  var form_data = new FormData();
  form_data.append('sort', sort);
  postAjax(form_data);
} // END send ajax to update group sort order
// send ajax to change parent

function changeParent(el, newParent) {
  var pageId = el.attr('data-id-original') || el.attr('data-id');
  var newParentId = newParent.attr('data-id');
  console.log('newParent:' + newParentId);
  console.log('el:' + pageId);

  if (pageId == newParentId) {
    return;
  }

  var form_data = new FormData();
  form_data.append('pageId', pageId);
  form_data.append('newParent', newParentId);
  postAjax(form_data);
} // END send ajax to change parent

function InputfieldPageGridSort(parent) {
  var value = '';
  parent.children('.pg-item').each(function () {
    var pageID = $(this).attr('data-id-original') || $(this).attr('data-id') || $(this).attr('data-page');
    if (value.length > 0) value += '|';
    value += pageID;
  });
  updateSort(parent, value);
  return value;
} //function to sort based on row start

function sortGrid(parent) {
  console.log('sort');
  console.log('parent: ' + parent.attr('class'));
  parent.children('.pg-item').sort(function (a, b) {
    //allways use positive nummbers
    var aRow = parseInt($(a).attr('row'));
    var bRow = parseInt($(b).attr('row'));
    var aCol = parseInt($(a).attr('col'));
    var bCol = parseInt($(b).attr('col'));

    if (typeof aCol == 'undefined' && aCol == false) {
      console.log('col not set');
      var aCol = parseInt($(a).css('grid-column-start'));
    }

    if (typeof bCol == 'undefined' && bCol == false) {
      var bCol = parseInt($(b).css('grid-column-start'));
    }

    if (typeof aRow == 'undefined' && aRow == false) {
      console.log('row not set');
      var bCol = parseInt($(a).css('grid-row-start'));
    }

    if (typeof bRow == 'undefined' && bRow == false) {
      var bCol = parseInt($(b).css('grid-row-start'));
    }

    console.log('sort Index: ' + aRow - bRow || aCol - bCol);
    return aRow - bRow || aCol - bCol;
  }).appendTo(parent);
  InputfieldPageGridSort(parent);
} // undo sorting, sort based on array

function sortParent(parent, sort) {
  console.log('parent: ' + parent.attr('class'));
  var order = sort.split("|");
  console.log('sort order:' + order);
  $.each(order, function (index, value) {
    parent.append(parent.find(".pg-item[data-id='" + value + "']"));
  });
} //mark for deletion

function deleteItem(pageId) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var itemHeader = $('.pg-item-header[data-id-original="' + pageId + '"]') || $('.pg-item-header[data-id="' + pageId + '"]');
  var el = c.find('.pg-item[data-id-original="' + pageId + '"]') || c.find('.pg-item[data-id="' + pageId + '"]'); // console.log('delete pageId: ' + pageId);

  itemHeader.toggleClass('pg-delete');
  el.toggleClass('pg-delete ui-state-error-text ui-state-disabled');

  if (c.find('.pg-delete[data-id]').length) {
    $(".pg-wraper-delete-marked").show();
    $('body:not(.hideSaveButton) #wrap_submit_save, body:not(.hideSaveButton) #wrap_submit_save_unpublished').hide();
  } else {
    $(".pg-wraper-delete-marked").hide();
    $('body:not(.hideSaveButton) #wrap_submit_save, body:not(.hideSaveButton) #wrap_submit_save_unpublished').show();
  }
} //lock pages

function lockItem(pageId) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var itemHeader = $('.pg-item-header[data-id="' + pageId + '"]');
  var el = c.find('.pg-item[data-id="' + pageId + '"]');
  var data = 0;
  console.log('run');
  itemHeader.toggleClass('pg-locked');
  el.toggleClass('pg-locked');

  if (itemHeader.hasClass('pg-locked')) {
    var data = 1;
  }

  var form_data = new FormData();
  form_data.append('type', 'lock');
  form_data.append('pageId', pageId);
  form_data.append('data', data);
  postAjax(form_data);
} //bind item data for pg-templates

function convertSymbol(pageId) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Symbol';
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var itemHeader = $('.pg-item-header[data-id="' + pageId + '"]');
  var el = c.find('.pg-item-active') || c.find('.pg-item[data-id="' + pageId + '"]');
  var isSymbol = 0;
  var originalId = el.attr('data-id-original'); // send original id to be able to convert back

  var field = $('.pg-container').attr('data-field');
  itemHeader.toggleClass('pg-symbol');
  el.toggleClass('pg-symbol');
  itemHeader.toggleClass('pg-ref');
  el.toggleClass('pg-ref');

  if (itemHeader.hasClass('pg-symbol')) {
    isSymbol = 1;
  }

  var form_data = new FormData();
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  form_data.append('type', 'convertSymbol');
  form_data.append('pageId', pageId);
  form_data.append('originalId', originalId);
  form_data.append('name', name);
  form_data.append('isSymbol', isSymbol);
  form_data.append('field_name', field);
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {
      var dataJson = JSON.parse(data);
      var markup = dataJson.markup;
      var newPageClass = dataJson.newPageClass;
      var css = dataJson.css;
      var addBar = dataJson.addBar;
      var lastItem = c.find('style.pg-style').last();
      itemHeader.remove();
      $(css).insertAfter(lastItem);
      el.replaceWith(markup);
      $('.pg-add-symbol-container').replaceWith(addBar);
      _add_item__WEBPACK_IMPORTED_MODULE_1__["addItems"]();
      reInitItem(c.find('#' + newPageClass)); // save.saveData(newItem, 'grid-column-start', 'all', 0, 0, 0);
      //update data object

      updateData();
    },
    error: function error(xhr, ajaxOptions, thrownError) {
      alert(xhr.responseText);
    }
  });
}
function reInitItem(el) {
  console.log('reinit item');
  console.log(el);
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); // var dataId = el.attr('data-id-original') || el.attr('data-id');
  //nesting bug with p tags: change p tags back to original tag

  if (el.is('pg-ptag')) {
    _settings__WEBPACK_IMPORTED_MODULE_5__["changeTagname"](el, 'p');
  }

  ; //END nesting bug with p tags:change p tags back to original tag
  //append item header inside iframe to main document
  // var itemHeader = el.find('.pg-item-header[data-id-original="' + dataId + '"]') || el.find('.pg-item-header[data-id="' + dataId + '"]');
  // if (itemHeader.length) {
  //     //remove old
  //     $('.pg-item-header[data-id-original="' + dataId + '"]').remove()
  //     //add new item header
  //     itemHeader.appendTo('#pg-item-header');
  // }
  // if ($('.pg-item-header[data-id-original="' + dataId + '"]').length) {
  //     $('.pg-item-header[data-id-original="' + dataId + '"]').remove();
  // }
  // var itemHeader = el.find('.pg-item-header');

  el.find('.pg-item-header').each(function () {
    var dataId = $(this).attr('data-id-original') || $(this).attr('data-id');

    if ($('.pg-item-header[data-id-original="' + dataId + '"]').length) {
      $('.pg-item-header[data-id-original="' + dataId + '"]').remove();
    }

    $(this).appendTo('#pg-item-header');
  }); //END append item header inside iframe to main document

  el.parent().removeClass('ui-sortable');
  el.removeClass('ui-sortable'); // Group option

  el.find('[data-pg-children]').each(function () {
    var el = $(this).closest('.pg-item');
    el.addClass('pg pg-nested pg-droppable');
  }); // END Group option

  el.find('.pg-item').each(function () {
    var el = $(this); // dragResize.dragResize(el);

    if (el.hasClass('pg-ref')) {
      el.children().addClass('pg-ref');
    } //enable drag for custom items


    if (el.hasClass('pg-item-draggable') || el.hasClass('pg-item-resizable')) {
      el.parent().addClass('pg');
    }
  }); // make sure overlay is place

  setTimeout(function () {
    c.find('.pg').each(function () {
      var overlayContainer = $(this).children('.pg-overlay').first();

      if (overlayContainer.length == 0) {
        $(this).append('<div class="pg-overlay"></div>');
        _overlay__WEBPACK_IMPORTED_MODULE_3__["overlay"]($(this)); // observer.observeIframe($(this));

        console.log('added overlay');
      }
    });
  }, 1000);
  $('.pg-add-container .pg-add').draggable('destroy');
  $('.pg-add-container .pg-add').removeClass('ui-draggable ui-draggable-handle');
  _add_item__WEBPACK_IMPORTED_MODULE_1__["addDrag"]();
  _add_item__WEBPACK_IMPORTED_MODULE_1__["pgSortable"]();
  _drag_resize__WEBPACK_IMPORTED_MODULE_2__["dragResize"](el);
  el.find('.pg-item-resizable').each(function () {
    _drag_resize__WEBPACK_IMPORTED_MODULE_2__["dragResize"]($(this));
  }); //remove PW drag function for cke fields on double click

  el.find('.pw-edit').each(function () {
    _observer__WEBPACK_IMPORTED_MODULE_4__["observeMutation"]($(this));
  });
  reinitInlineEdit();
}
function reinitInlineEdit() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //reinit inline edit, only needed for first element

  if (typeof iframe.prop('contentWindow').PageFrontEditInit === "function") {
    // add button back to iframe
    var editButtons = $('.pw-edit-buttons');
    c.find('body').append(editButtons); //hack to unbind click events (can be removed if ryan changes js PageFrontEdit file with unbind() methode)

    var $frm = document.getElementById('pg-iframe-canvas');
    var $doc = $frm.contentWindow ? $frm.contentWindow.document : $frm.contentDocument;
    var $body = $($doc.body);
    var script = document.createElement("script");
    script.textContent = "jQuery('.pw-edit-save').unbind(); jQuery('.pw-edit-cancel').unbind(); jQuery('.pw-edit-orig').unbind(); jQuery('.pw-edit-copy').unbind(); jQuery('.pw-edit').unbind();";
    $body[0].appendChild(script); //END hack to unbind click events
    // this function attaches new events to inline buttons

    iframe.prop('contentWindow').PageFrontEditInit(iframe.prop('contentWindow')['jQuery']); //put button back to parent

    var editButtons = c.find('.pw-edit-buttons');
    $('body').append(editButtons);
  } //END reinit inline edit, only needed for first element

} // set col and row on auto elements for sorting

function autoSorting(grid) {
  if (!grid.find(".pg-overlay-row").length) {
    return;
  }

  grid.children('.pg-item').each(function () {
    //    if ($(this).css('grid-row-start') == 'auto' || $(this).css('grid-column-start') == 'auto') {
    var el = $(this);
    var offset = el.offset();
    var pLeft = offset.left;
    var pTop = offset.top;
    var itemSizerStart = el.parent().children('.pg-overlay').eq(0).find('.pg-overlay-column').closestToOffset({
      left: pLeft,
      top: pTop
    });
    console.log('itemSizerStart: ' + itemSizerStart);

    if (typeof itemSizerStart !== 'undefined' && itemSizerStart !== false && itemSizerStart != null) {
      console.log('sort: rowStart, colStart set');
      var rowStart = parseInt(itemSizerStart.attr('data-row'));
      var colStart = parseInt(itemSizerStart.attr('data-column'));
      console.log('col: ' + colStart);
      console.log('row: ' + rowStart);
      el.attr('row', rowStart);
      el.attr('col', colStart);
    } //    } else {
    //      $(this).attr('row', parseInt($(this).css('grid-row-start')));
    //      $(this).attr('col', parseInt($(this).css('grid-column-start')));
    //    }

  });
  console.log('update sort values'); // sort grid based on row number if not nested (for performance)
  //uncomment for performance gain
  //  sortGrid(grid);
}
; // $(document).ajaxComplete(function () {
//     if (busyDialog) {
//         busyDialog = false;
//         //         $('.pg-settings-container').hide();
//         c.find('.pg-settings-active').removeClass('pg-settings-active');
//         c.find('.pg-item-active').removeClass('pg-item-active');
//         //        $('.pg-item-selected').removeClass('pg-item-selected');
//     }
// });

function postAjax(form_data) {
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    processData: false,
    success: function success(data) {},
    error: function error(xhr, ajaxOptions, thrownError) {
      alert(xhr.responseText);
    }
  });
} // add rows 

function gridSettingsRowCol() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  c.find('body').remove('.pg-grid-settings');
  c.find('.pg-overlay-row').each(function (i, el) {
    $(el).first().append('<div class="pg-grid-settings"></div>');
    $(el).find(".pg-grid-settings").first().append('<i class="pg-add-row fa fa-plus-circle"></i>');
    $(el).find(".pg-grid-settings").first().append('<i class="pg-remove-row fa fa-minus-circle"></i>');
  }); //  $('.pg-overlay-column[data-row="1"]').each(function (i, el) {
  //    $(el).append('<span class="pg-add-col"><i class="fa fa-plus-circle"></i></span>');
  //    $(el).append('<span class="pg-remove-col"><i class="fa fa-minus-circle"></i></span>');
  //  });
}
function removeRow(grid) {
  var row = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  grid.find('> .pg-item').each(function (i, item) {
    var rowStart = parseInt($(item).css('grid-row-start')); // console.log('rowStart: ' + rowStart);

    if (rowStart > row && $(item).css('grid-row-start') !== 'auto') {
      // $(item).css('grid-row-start', rowStart - 1);
      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"]($(item), 'grid-row-start', rowStart - 1, false, false, false);
    }
  }); // save.saveData(grid);

  _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"]();
}
function addRow(grid) {
  var row = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  grid.find('> .pg-item').each(function (i, item) {
    var rowStart = parseInt($(item).css('grid-row-start')); // console.log('rowStart: ' + rowStart);

    if (rowStart > row && $(item).css('grid-row-start') !== 'auto') {
      // $(item).css('grid-row-start', rowStart + 1);
      //save and skip debounce
      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"]($(item), 'grid-row-start', rowStart + 1, false, false, false);
    }
  }); // save.saveData(grid);

  _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"]();
} // add cols

function removeCol(el) {
  var col = el.parent().parent().attr('data-column');
  var grid = el.closest('.pg'); //  var gridColumns = grid(grid.attr('data-columns')) - 1;

  var gridColumns = grid.css("grid-template-columns").split("px").length - 2; //  grid.css('grid-template-columns', 'repeat(' + gridColumns + ', [col-start] 1fr)');
  // console.log('gridColumns: ' + gridColumns);
  // select only direct children of grid

  grid.find('> .pg-item').each(function (i, item) {
    var colStart = parseInt($(item).css('grid-column-start')) || 1;
    var colEnd = parseInt($(item).css('grid-column-end').replace('span ', '')) || 1; // console.log('colStart: ' + colStart);
    // console.log('colEnd: ' + colEnd);

    if ((colStart > col || colStart + colEnd > gridColumns) && !($(item).css('grid-column-start') == 'auto')) {
      $(item).css('grid-column-start', colStart - 1);
      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"]($(item), 'grid-column-start', colStart - 1, false, false, false);
    }

    if (colEnd > gridColumns) {
      console.log('remove item width: ' + (colEnd - 1));

      if (colEnd < 2) {
        var colEnd = 2;
      }

      $(item).css('grid-column-end', 'span ' + (colEnd - 1));
      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"]($(item), 'grid-column-end', 'span ' + (colEnd - 1), false, false, false); // $(item).css('grid-column-start', 'auto');
      // $(item).css('grid-row-start', 'auto');
      // save.saveData($(item), 'grid-column-start', 'auto', false, false, false);
      // save.saveData($(item), 'grid-row-start', 'auto', false, false, false);
      // console.log('make item smaller: ' + colStart + colEnd);
    }
  });
  var name = 'grid-template-columns';
  var value = 'repeat(' + gridColumns + ', [col-start] 1fr)';
  _save__WEBPACK_IMPORTED_MODULE_0__["saveData"](grid, name, value);
  _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"]();
  _overlay__WEBPACK_IMPORTED_MODULE_3__["overlay"](grid);
}
function addCol(el) {
  var col = el.parent().parent().attr('data-column');
  var grid = el.closest('.pg'); //  var gridColumns = parseInt(grid.attr('data-columns')) + 1;

  var gridColumns = grid.css("grid-template-columns").split("px").length; //  grid.css('grid-template-columns', 'repeat(' + gridColumns + ', [col-start] 1fr)');
  // console.log('gridColumns: ' + gridColumns);

  grid.find('> .pg-item').each(function (i, item) {
    var colStart = parseInt($(item).css('grid-column-start'));
    var colEnd = parseInt($(item).css('grid-column-end').replace('span ', '')); // console.log('colStart: ' + colStart);

    if ((colStart > col || colStart + colEnd > gridColumns) && !($(item).css('grid-column-start') == 'auto')) {
      $(item).css('grid-column-start', colStart + 1);
      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"]($(item), 'grid-column-start', colStart + 1, false, false, false);
    }
  });
  var name = 'grid-template-columns';
  var value = 'repeat(' + gridColumns + ', [col-start] 1fr)';
  _save__WEBPACK_IMPORTED_MODULE_0__["saveData"](grid, name, value);
  _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"]();
  _overlay__WEBPACK_IMPORTED_MODULE_3__["overlay"](grid);
}
function inlineSave(el) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var pageID = parseInt($('#Inputfield_id').val());
  var langID = parseInt(c.find('#pw-edit-lang').val());
  var postData = {
    action: 'PageFrontEditSave',
    id: pageID,
    language: langID,
    fields: {}
  };
  var postToken = c.find('input._post_token');
  var csrfName = postToken.attr('name');
  var csrfValue = postToken.val();
  postData[csrfName] = csrfValue;
  var t = el;
  var name = t.attr('data-name');
  var page = parseInt(t.attr('data-page'));
  var orig = t.children('.pw-edit-orig');
  var copy = t.children('.pw-edit-copy');
  var key = page + '__' + name;
  var content = orig[0].innerHTML;
  postData.fields[key] = content; // post save data to server
  // var postUrl = $('#Inputfield__pw_page_name_path').text();

  var postUrl = iframe.attr('src'); // console.log('postUrl:' + postUrl);

  $.post(postUrl, postData, function (data) {
    if (data.status > 0) {// success
    }
  }); // update copy if no copy changes

  if (el.hasClass('pw-changed') == 0 && el.hasClass('pw-edited') == 0) {
    copy[0].innerHTML = content;
  }
} //page set active breakpoint 

function setBreakpoint(el) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //  save.saveData();
  // console.log('Breakpoint set');

  var val = el.attr('value'); // console.log(val);

  name = el.attr('breakpoint');
  var containerWidth = val.match(/\d+/); // console.log(containerWidth);

  $('body').removeClass(function (index, className) {
    return (className.match(/(^|\s)breakpoint-\S+/g) || []).join(' ');
  }); //inside iframe add to html instead of body to let users style body element (eg. .breakpoint-s body)

  c.find('html').removeClass(function (index, className) {
    return (className.match(/(^|\s)breakpoint-\S+/g) || []).join(' ');
  }); // allways add base class

  $('body').addClass('breakpoint-base');
  c.find('html').addClass('breakpoint-base');
  c.find('html').addClass('breakpoint-' + name);
  $('body').addClass('breakpoint-' + name);
  $('body').attr('data-breakpoint', name);
  $('body').attr('data-breakpoint-size', val);

  if (name == "s") {
    $('body').addClass('breakpoint-m');
    c.find('html').addClass('breakpoint-m'); //iphone width

    var containerWidth = '390';
  }

  if (name == "base") {
    $('.AdminThemeCanvas #main, body:not(AdminThemeCanvas) #ProcessPageEdit').css('max-width', '');
  } else {
    $('.AdminThemeCanvas #main, body:not(AdminThemeCanvas) #ProcessPageEdit').css('max-width', containerWidth + 'px');
  }

  $('.breakpoint-icon').removeClass('active');
  el.addClass('active'); //   

  var el = c.find('.pg-item-active');
  _save__WEBPACK_IMPORTED_MODULE_0__["saveData"](el); //remove showing hidden
  // $('input#Inputfield_data-show').prop('checked', false);

  showHidden(); //END remove showing hidden

  _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"](); // initSettings();
}
function showHidden() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var show = $('input#Inputfield_data-show').is(':checked');
  var data = $('.pg-container').data('pg');
  var currentBreakpoint = $('body').attr('data-breakpoint');

  if (typeof data == 'undefined') {
    return;
  }

  c.find('.pg-show').removeClass('pg-show');
  $.each(data, function (dataId, item) {
    // // console.log(item);
    $.each(item, function (key, val) {
      if (typeof val['breakpoints'] == 'undefined') {
        return;
      }

      $.each(val['breakpoints'], function (breakpointName, breakpoint) {
        $.each(breakpoint['css'], function (css, cssval) {
          if (css == 'display' && cssval == 'none' && show && (currentBreakpoint == breakpointName || breakpointName == 'base')) {
            if (key == 'pgitem') {
              c.find('.pg-item[data-id=' + dataId + ']').addClass('pg-show');
            } else {
              c.find('.pg-item[data-id=' + dataId + ']').find(key).addClass('pg-show');
              c.find('.pg-item[data-id=' + dataId + ']').find('.' + key).addClass('pg-show');
            }
          }
        });
      });
    });
  });
}
function initBlueprintNav() {
  // set blueprint add-new link to populate from page
  $(document).ajaxComplete(function () {
    var pagegridNav = $('.pw-dropdown-menu > li > a[data-json="/admin/setup/pagegrid/navJSON/"]').parent();
    var pageId = $('.pg-container').attr('data-page');
    if (!pagegridNav.length) return;
    pagegridNav.addClass('pg-nav-pagegrid');
    pagegridNav.find('a').each(function () {
      if ($(this).text() === 'Blueprints') {
        if (!$('.pw-dropdown-menu .navJSON .pw-nav-add-from-page').length) {
          var subnavItems = $(this).parent().find('.subnavJSON > li');
          var addNew = $(this).parent().find('.subnavJSON > .pw-nav-add');
          addNew.addClass('pw-nav-add-from-page');
          addNew.find('a').first().attr('href', addNew.find('a').first().attr('href') + '&addBlueprint=' + pageId);
          $(this).parent().addClass('pg-nav-blueprints');
          subnavItems.first().before(addNew);
        }
      }
    });
  });
  $(document).on("click", ".pg-blueprint-load", function (e) {
    if (!$('.pg-container #Inputfield_pg-blueprint-select').length) return;
    var pageId = $('.pg-container').attr('data-page');
    var blueprintSelect = $('.pg-container #Inputfield_pg-blueprint-select').clone(); //remove first empty option

    blueprintSelect.find('option').first().remove();
    console.log(pageId);
    $(".pg-dialog").remove();
    $("body").append('<div id="pg-dialog-blueprint" class="pg-dialog"></div>');
    $("#pg-dialog-blueprint").append('<label class="uk-form-label">Select Blueprint</label>');
    $("#pg-dialog-blueprint").append(blueprintSelect);
    $("#pg-dialog-blueprint").dialog({
      title: "Load PAGEGRID Blueprint",
      width: 450,
      modal: true,
      buttons: [{
        text: "Cancel",
        class: "ui-priority-secondary",
        click: function click() {
          $(this).dialog("close");
        }
      }, {
        text: "Load",
        click: function click() {
          var blueprintName = $(this).find('#Inputfield_pg-blueprint-select').val();
          loadBlueprint(pageId, blueprintName);
          $(this).dialog("close");
        }
      }]
    });
  });
}
function checkIfEmpty() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();

  if (!c.find('.pg-main .pg-item').length && !c.find('pg-placeholder-wrapper').length) {
    c.find('.pg-main').append('<pg-placeholder-wrapper><pg-placeholder>Drag items here</pg-placeholder></pg-placeholde-wrapper>');
    c.find('pg-placeholder-wrapper').css('padding', c.find('.pg-main').css('padding'));
    c.find('.pg-main').addClass('pg-empty'); //add button to load blueprint

    if ($('.pg-container #Inputfield_pg-blueprint-select').length) {
      $('.pg-container').append('<div class="uk-margin pg-blueprint-load-wrapper" style="text-align:center;"><div class="pg-blueprint-load ui-button ui-state-default" style="margin:0;">Load from Blueprint</div></div>');
    }
  } else {
    c.find('.pg-main').removeClass('pg-empty');
    c.find('pg-placeholder-wrapper').remove();
    $('.pg-blueprint-load').remove();
  }
}

/***/ }),

/***/ "./main/InputfieldPageTable.js":
/*!*************************************!*\
  !*** ./main/InputfieldPageTable.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ajaxSave__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajaxSave */ "./main/ajaxSave.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observer */ "./main/observer.js");



function InputfieldPageTableDialog() {
  //close all remaining modals to prevent bug
  $(".pg-settings-content-modal .ui-dialog-content").dialog("close");
  var $a = $(this);
  var url = $a.attr('data-url');
  var dialogPageID = 0;
  var modalSettings = {
    close: function close(event, ui) {
      if (dialogPageID > 0) {
        //do something on close
        $(".pg-settings-active").removeClass('pg-settings-active');
      }
    }
  };
  var $iframe = pwModalWindow(url, modalSettings, 'large');
  $iframe.hide();
  $(".pg-settings-active").removeClass('pg-settings-active');
  $('.ui-widget-overlay').hide();
  $("body").css('overflow-y', 'visible');
  $('.pg-custom-settings').hide(); //  $('.pw-modal-window').hide();

  $('.pg-settings-active').removeClass('pg-settings-active');
  $('.ui-dialog').addClass('pg-settings-container');
  $('.ui-dialog').removeClass('ui-widget-content');
  $('body').addClass('pg-settings-active');
  $(".ui-dialog").show().promise().done(function () {
    console.log("[#Dialog] Opened");
    $(this).addClass('pg-settings-active pg-settings-container');
    $.ui.dialog.overlayInstances = 1;
    $(this).find('.pw-modal-window').wrap("<div class='pg-settings-content pg-settings-content-modal'></div>");
  });

  if ($(".ui-dialog").hasClass("ui-dialog-content") && $(".ui-dialog").dialog("isOpen")) {
    $(this).addClass('pg-settings-active pg-settings-container');
    $('body').addClass('pg-settings-active');
  }

  $iframe.on('load', function () {
    var iframeCanvas = $('#pg-iframe-canvas');
    var c = iframeCanvas.contents();
    var buttons = []; //$dialog.dialog('option', 'buttons', {}); 

    var $icontents = $iframe.contents();
    var n = 0; // var title = $icontents.find('title').text();

    dialogPageID = $icontents.find('#Inputfield_id').val(); // page ID that will get added if not already present
    // hide things we don't need in a modal context

    $icontents.find('#wrap_Inputfield_template, #wrap_template, #wrap_parent_id').hide(); //$icontents.find('#breadcrumbs ul.nav, #_ProcessPageEditDelete, #_ProcessPageEditChildren').hide();
    //hide only for superusers (thay have the trash icon)

    $icontents.find('.role-superuser #_ProcessPageEditDelete').hide();
    $icontents.on('click', '#submit_delete', function () {
      if ($icontents.find('#delete_page').attr('checked')) {
        c.find('.pg-item-active').hide().removeClass('pg-item-active');
        $(".pg-settings-active").removeClass('pg-settings-active');
      }
    }); //END hide only for superusers (thay have the trash icon)

    var settingsTab = $icontents.find('#ProcessPageEditSettings .Inputfields').first();
    var titleField = $icontents.find('#wrap_Inputfield_title');
    var nameField = $icontents.find('#wrap_Inputfield__pw_page_name');

    if (settingsTab.length) {
      settingsTab.prepend(nameField);
      settingsTab.prepend(titleField);
    } else {
      nameField.attr('style', 'display: none !important');
      titleField.attr('style', 'display: none !important');
    }

    if ($('body.role-superuser').length == 0) {
      $icontents.find('#ProcessPageEditSettings, #_ProcessPageEditSettings').attr('style', 'display: none !important');
    } //show datalist in content tab


    $icontents.find('a#_Inputfield_pg_datalist_tab').hide();
    $icontents.find('#Inputfield_pg_datalist_tab > .Inputfields').appendTo($icontents.find('#ProcessPageEditContent')); // $icontents.find('#Inputfield_pg_datalist_tab').show();
    //add classes and append css

    $icontents.find("html").addClass('pg-modal');
    $icontents.find("body").addClass('pg-settings-body modal');
    $icontents.find('head').append('<link rel="stylesheet" href="/site/modules/FieldtypePageGrid/css/main.css" type="text/css" />');
    $('.pg-settings-container.pg-settings-active').addClass('iframe-active'); //add modal get var to links so new frames open with css file

    setTimeout(function () {
      $icontents.find('a[href]').each(function () {
        var link = $(this).attr('href');
        if ($(this).parents('.InputfieldTinyMCEEditor').length) return;

        if (!link || link.length < 2 || link.includes('#') || link.includes('?') == 0) {
          return;
        }

        var link = link + '&modal=1&pgmodal=1';
        $(this).attr('href', link);
        console.log($(this).attr('href'));
      });
    }, 1000); //END add modal get var to links so new frames open with css file
    //hide child tab for items without pg-droppable class

    if (!c.find('.pg-item-active').hasClass('pg-droppable')) {
      $icontents.find('#_ProcessPageEditChildren').hide();
    } // set iframe height 


    _observer__WEBPACK_IMPORTED_MODULE_1__["observeIframe"]($iframe); //Hide content tab if empty

    if ($icontents.find('#ProcessPageEditContent .Inputfield').length < 2 && c.find('.pg-item-active').hasClass('pg')) {
      // custom function added via fieldtype module to trigger ajax load of children
      if (typeof $iframe.prop('contentWindow').loadChildrenTab === "function") {
        $icontents.find('#PageEditTabs #_ProcessPageEditContent').hide();
        $icontents.find('#_ProcessPageEditContent').hide();
        $iframe.prop('contentWindow').loadChildrenTab();
      }
    } //END Hide content tab if empty ––––––––––––––––––––––––––––––––––––––––––––––––––––
    //JP auto fill title and name (uses hook to replace pg-autotitle)


    if ($icontents.find('#Inputfield__pw_page_name_path').length) {
      var path = $icontents.find('#Inputfield__pw_page_name_path').text(); //we have pg item so its save to use auto puplish

      if (path.startsWith('/admin/setup/pagegrid/pg-items/')) {
        var idNum = Math.floor(1000 + Math.random() * 9000);
        $icontents.find('#ProcessPageAdd #Inputfield_title').val('pg-autotitle');
        $icontents.find('#ProcessPageAdd #Inputfield__pw_page_name').val('pg-autotitle' + idNum); //remove save+unbublish button

        $icontents.find('#ProcessPageAdd button.ui-priority-secondary').remove();
      }
    } //END JP auto fill title and name ––––––––––––––––––––––––––––––––––––––––––––––––––––
    //fade in iframe


    $iframe.fadeIn(300); // copy buttons in iframe to dialog

    $icontents.find("#content form button.ui-button[type=submit]").each(function () {
      var $button = $(this);
      var text = $button.text();
      var skip = false; // avoid duplicate buttons

      for (var i = 0; i < buttons.length; i++) {
        if (buttons[i].text == text || text.length < 1) skip = true;
      }

      if (!skip) {
        buttons[n] = {
          'text': text,
          'class': $button.attr('id') + ' ' + ($button.is('.ui-priority-secondary') ? 'ui-priority-secondary' : ''),
          'click': function click() {
            //save button is handled via ajaxinside ajaxSave.js
            if ($button.attr('id') !== 'submit_save' || $icontents.find('#_ProcessPageEditSettings.pw-active').length || $icontents.find('.ProcessPageAdd').length) {
              $button.click();
              $iframe.fadeOut(300);
            }
          }
        };
        n++;
      }

      ;
      $button.hide();
    });
    $iframe.setButtons(buttons); //init modal auto ajax save

    _ajaxSave__WEBPACK_IMPORTED_MODULE_0__["ajaxSaveModal"]($iframe);
  });
  return false;
}

$(document).ready(function () {
  $(document).on('click', '.pg-edit', InputfieldPageTableDialog);
});

/***/ }),

/***/ "./main/add-item.js":
/*!**************************!*\
  !*** ./main/add-item.js ***!
  \**************************/
/*! exports provided: nested, defaultColEnd, defaultRowEnd, setPlacement, addItems, addDrag, pgSortable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nested", function() { return nested; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultColEnd", function() { return defaultColEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultRowEnd", function() { return defaultRowEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPlacement", function() { return setPlacement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addItems", function() { return addItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDrag", function() { return addDrag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pgSortable", function() { return pgSortable; });
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/throttle */ "../../node_modules/lodash/throttle.js");
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _drag_resize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drag-resize */ "./main/drag-resize.js");
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _undo_redo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./undo-redo */ "./main/undo-redo.js");








var nested = false; // default item size

var defaultColEnd = 'span 3';
var defaultRowEnd = 'span 1';
var autoRow = false,
    autoColumn = false,
    colEnd,
    rowEnd,
    colStart,
    rowStart,
    data,
    offset,
    originalLeft,
    originalTop,
    sortOrderOld;
var iframe = $('#pg-iframe-canvas');
var c = iframe.contents();
var throttleOverlay = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(_overlay__WEBPACK_IMPORTED_MODULE_4__["overlay"], 300, {
  'leading': true
});
var throttleDragHelper = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(_drag_resize__WEBPACK_IMPORTED_MODULE_2__["dragResizeHelper"], 50, {
  'leading': true
});
function setPlacement(el) {
  if (el.css('grid-row-start') == 'auto') {
    autoRow = true;
  } else {
    autoRow = false;
  }

  if (el.css('grid-column-start') == 'auto') {
    autoColumn = true;
  } else {
    autoColumn = false;
  }

  console.log(autoRow);
} //   function runs at init to enable adding items with drag

function addItems() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();

  if (c.find('.pg-main').css('display') == 'grid') {
    var totalColumns = c.find('.pg-main').css("grid-template-columns").split("px").length - 1;
  } else {
    var totalColumns = 12;
  }

  console.log('init addItems');
  var headerHeight = $('.pw-masthead').first().height(); // position based on header height for old pw admin theme its content instead of main

  $('.pg-add-container').insertBefore($('.AdminThemeDefault #content'));
  $('.pg-add-container').insertBefore($('#main'));
  $('.pg-add-container').css('top', headerHeight);
  $('.pg-add-container').css('height', 'calc(100vh - ' + headerHeight + ')');
  $(window).scroll(function () {
    var offset = $('.pw-masthead').first().offset();

    if (offset.top > headerHeight) {
      $('.AdminThemeUikit .pg-add-container').css('top', '0');
      $('.AdminThemeUikit .pg-add-container').css('height', '100vh');
      $('.AdminThemeUikit .pg-item-list').css('top', '0');
    } else {
      $('.AdminThemeUikit .pg-add-container').css('top', headerHeight);
      $('.AdminThemeUikit .pg-add-container').css('height', 'calc(100vh - ' + headerHeight + ')');
      $('.AdminThemeUikit .pg-item-list').css('top', headerHeight);
    }
  }); // Sortable

  pgSortable();
  addDrag();
} // add item drag 

function addDrag() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //make room for drag

  c.find('.pg-droppable-dummy').remove();
  c.find('.pg-main > .pg-item').each(function (e) {
    $('<pg-droppable-dummy class="pg-droppable-dummy"></pg-droppable-dummy>').insertAfter($(this));
  });
  c.find('.pg-main > .pg-item').last().remove('.pg-droppable-dummy'); //END make room for drag
  //add beforeStart event to draggable

  var oldMouseStart = $.ui.draggable.prototype._mouseStart;

  $.ui.draggable.prototype._mouseStart = function (event, overrideHandle, noActivation) {
    this._trigger("beforeStart", event, this._uiHash());

    oldMouseStart.apply(this, [event, overrideHandle, noActivation]);
  };

  $('.pg-add-container .pg-add').draggable({
    iframeFix: true,
    iframeOffset: iframe.offset(),
    scroll: true,
    scrollSensitivity: 60,
    scrollSpeed: 15,
    helper: 'clone',
    tolerance: 'pointer',
    beforeStart: function beforeStart(event, ui) {
      // var el = $(ui.helper);
      c.find(".ui-drag-helper").remove();
      $('body').addClass('pg-dragging');
      $('body').addClass('pg-dragging-add');
      c.find('body').addClass('pg-dragging-add');
      c.find('body').addClass('pg-dragging');
      c.find('.pg-main').append('<div class="ui-drag-helper"></div>'); //make room to add item to empty container

      c.find('.pg .pg').each(function () {
        if ($(this).find('.pg-item').length == 0) {
          $(this).append('<pg-item-placeholder class="pg-item-placeholder"></pg-item-placeholder>');
        }
      }); //END make room to add item to empty container
    },
    start: function start(event, ui) {},
    stop: function stop(event, ui) {
      // drop event needs to be here, to fif iframe droppable
      var helper = c.find(".ui-drag-helper").first();
      var container = helper.parent();
      var el = $(ui.helper).clone();
      c.find('.pg .pg-item-placeholder').remove();

      if (container.hasClass('pg-droppable') && !container.hasClass('pg-locked') && helper.is(":visible")) {
        console.log('new drop');
        el.insertAfter(helper);
        helper.remove();
        el.css('position', 'static');
        dropped(container, el, event);
      } //remove new empty rows


      c.find('.pg-lock-row').removeClass('pg-lock-row');
      c.find('.pg').css('min-height', '');
      $('body').removeClass('pg-dragging');
      $('body').removeClass('pg-dragging-add');
      c.find('body').removeClass('pg-dragging-add');
      c.find('body').removeClass('pg-dragging');
      c.find('.dragging').removeClass('dragging');
      c.find(".ui-drag-helper").remove(); //            $('.ui-drag-helper').remove();

      setTimeout(function () {
        $('.pg-block-panel').removeClass('pg-block-panel');
      }, 600);
    },
    drag: function drag(event, ui) {
      //hide show drag helper, drop only if helper visible (inside stop event)
      var el = $(ui.helper);
      var elOriginal = $(ui.helper);
      var helper = c.find(".ui-drag-helper").first();
      var eventType = 'drag';
      var container = helper.parent();
      var elOffset = el.offset();
      var elTop = elOffset.top;
      var elBottom = elOffset.top + el.outerHeight();
      var elLeft = elOffset.left;
      var elRight = elOffset.left + el.outerWidth();
      var iframeOffset = iframe.offset();
      var iframeTop = iframeOffset.top;
      var iframeBottom = iframeOffset.top + iframe.outerHeight();
      var iframeLeft = iframeOffset.left;
      var iframeRight = iframeOffset.left + iframe.outerWidth();
      var mouseX = event.pageX;
      var mouseY = event.pageY; // $.ui.ddmanager.prepareOffsets();

      el.css('min-width', '50px');
      el.css('min-height', '50px');
      el.css('display', 'flex');

      if (el.length) {
        data = throttleDragHelper(eventType, el, elOriginal, event);
      }

      if (elTop + 100 < iframeTop || elLeft < iframeLeft || mouseY > iframeBottom + 100 || mouseX > iframeRight) {
        helper.hide();
        el.css('width', '50px');
        el.css('height', '50px'); //remove newly created rows

        c.find(".pg-lock-row").each(function () {
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["removeRow"]($(this), 0);
          $(this).removeClass('pg-lock-row');
        }); // return;
      } else {
        helper.show();
      }

      if (helper.is(":visible")) {
        // set default col width
        if (container.css('display') == 'grid') {
          throttleOverlay(container);

          if (typeof data != 'undefined') {
            colStart = Math.abs(data[0]);
            rowStart = Math.abs(data[1]);
            colEnd = data[2];
            rowEnd = data[3];

            if (colEnd != -1) {
              colEnd = 'span ' + colEnd;
            }

            el.css('grid-column-start', colStart);
            el.css('grid-row-start', rowStart);
            el.css('grid-column-end', colEnd);
            el.css('grid-row-end', 'span 1');
            helper.css('grid-column-start', colStart);
            helper.css('grid-row-start', rowStart);
            helper.css('grid-column-end', colEnd);
            helper.css('grid-row-end', 'span 1'); //                    helper.css('width', '100%');
          } //                        grid.autoSorting(container);


          el.width(helper.width());
          el.height(helper.height());
        } else {
          el.width(helper.width());
          el.height(helper.height());
        }

        c.find('.dragging').removeClass('dragging');
        c.find('.show-grid').removeClass('show-grid');
        container.addClass('dragging');
        container.addClass('show-grid');
      }
    }
  });
}
function pgSortable() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();

  if (c.find('.pg-main.pg-sortable').length == 0) {
    return;
  }

  c.find('.pg:not(.ui-sortable)').each(function () {
    var sortParent = $(this);
    sortParent.addClass('ui-sortable');
    sortParent.sortable({
      items: sortParent.children('.pg-item'),
      // remove > for nested elements
      greedy: true,
      // for nested elements 
      scroll: false,
      helper: 'clone',
      // needed for parent change to work
      // connectWith: '', // this line allows parent change
      iframeFix: true,
      iframeOffset: iframe.offset(),
      appendTo: c.find('body'),
      placeholder: "ui-drag-helper",
      tolerance: "pointer",
      //        revert: 'invalid'
      start: function start(event, ui) {
        var eventType = 'drag';
        var el = $(ui.item);
        var elOriginal = $(ui.item);
        var container = $(this);
        elOriginal.css('height', elOriginal.outerHeight());
        sortOrderOld = _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["InputfieldPageGridSort"](el.parent());
        console.log('sortOrderOld: ' + sortOrderOld);
        _observer__WEBPACK_IMPORTED_MODULE_5__["observeStyle"](ui.placeholder);
        container.addClass('dragging'); //                c.find(".ui-drag-helper").detach().prependTo(container);
        //                ui.placeholder.detach().prependTo(container);

        ui.placeholder.css('position', 'relative');
        ui.placeholder.css('background-color', 'red'); //      ui.placeholder.css('border', '1px solid red');

        ui.placeholder.css('visibility', 'visible');
        ui.placeholder.css('grid-column-end', el.css('grid-column-end'));
        console.log('sort drag start');
        $('body').addClass('pg-dragging');
        c.find('body').addClass('pg-dragging');
        $('body').addClass('pg-block-panel');
        el.addClass('ui-draggable-dragging'); //set height

        ui.placeholder.css('min-height', '20px');
        ui.placeholder.css('height', elOriginal.attr('data-height') + 'px');
        ui.placeholder.css('max-height', $(window).height() - 50 + 'px'); //set other things that invluece the layout

        ui.placeholder.css('align-self', elOriginal.css('align-self'));
        ui.placeholder.css('justify-self', elOriginal.css('justify-self'));

        if (container.css('display') == 'grid') {
          ui.placeholder.css('width', elOriginal.width());
        } else {
          ui.placeholder.css('width', 'auto');
        }

        if (container.css('display') == 'flex') {
          ui.placeholder.css('width', elOriginal.width());
          el.css('width', elOriginal.width());
        } //set placement option on drag start, to check if original item was auto


        setPlacement(el);
      },
      over: function over(event, ui) {
        var el = c.find('.ui-sortable-helper').first();
        var elOriginal = $(ui.item); // move helper to target parent

        var container = $(event.target);
        var cClass = container.attr("class");
        console.log('cClass: ' + cClass);

        if (container.hasClass('pte-locked') && container.parent().hasClass('pte-locked')) {
          return;
        }

        console.log('drag over');

        if (container.hasClass('ui-draggable-dragging')) {
          console.log('insert into self');
          c.find(".ui-drag-helper").detach().prependTo(c.find('.pg-main'));
          c.find('.pg-lock-row-bottom').removeClass('pg-lock-row-bottom'); //                    c.find(".ui-drag-helper").detach().prependTo(c.find('body'));
          //                    el.detach().prependTo(c.find('body'));
        }

        c.find('.dragging').removeClass('dragging');
        c.find('.show-grid').removeClass('show-grid');
        container.addClass('dragging');
        container.children('.pg-overlay').addClass('show-grid');

        if (c.find('.pg-add.ui-draggable-dragging').length || $('.pg-add.ui-draggable-dragging').length) {
          c.find(".ui-drag-helper").detach().prependTo(container);
          c.find('.pg-lock-row-bottom').removeClass('pg-lock-row-bottom'); //                    el.detach().prependTo(c.find('body'));
        }
      },
      sort: function sort(event, ui) {
        var eventType = 'drag';
        var el = c.find('.ui-sortable-helper').first();
        var elOriginal = $(ui.item);
        var container = $(this); // var parentChange = container.sortable('option')['connectWith'];

        c.find('.dragging').removeClass('dragging');
        container.addClass('dragging'); //handle grid sort, rest is done by jquery ui

        if (container.css('display') == 'grid') {
          if (el.length) {
            console.log('el found');
            data = throttleDragHelper(eventType, el, elOriginal, event);
          }

          if (typeof data != 'undefined') {
            colStart = Math.abs(data[0]);
            rowStart = Math.abs(data[1]);
            colEnd = data[2];
            rowEnd = data[3];

            if (colEnd != -1) {
              colEnd = 'span ' + colEnd;
            }

            if (el.hasClass('pg-add') && !el.hasClass('pg-item') && colEnd != -1) {
              var totalColumns = container.css("grid-template-columns").split("px").length - 1;
              colEnd = 'span ' + Math.round(totalColumns / 2);
            }

            ui.placeholder.css('grid-column-start', colStart);
            ui.placeholder.css('grid-row-start', rowStart);
            ui.placeholder.css('grid-column-end', colEnd);
            ui.placeholder.css('grid-row-end', 'span ' + rowEnd);
            ui.placeholder.css('width', '100%');
          }

          if (autoRow || autoColumn) {
            _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["autoSorting"](container);
          }
        } else {
          c.find('.show-grid').removeClass('show-grid');
        }
      },
      out: function out(event, ui) {
        c.find('.dragging').removeClass('dragging');
        c.find('.pg-lock-row-bottom').removeClass('pg-lock-row-bottom'); //      $('.ui-drag-helper').remove();
      },
      beforeStop: function beforeStop(event, ui) {
        var el = $(ui.item);
        var container = $(this); //set ID to insert item after for sorting, inside beforestart

        var insertAfterId = ui.placeholder.next().attr('data-id');
        console.log('insertAfterId: ' + insertAfterId);
        ui.item.attr('data-afterid', insertAfterId);

        if (container.css('display') == 'grid') {
          el.css('position', '');
          el.css('width', '');
          el.css('height', '');
          el.css('top', '');
          el.css('left', '');
          el.css('margin', '');
          el.attr('col', colStart);
          el.attr('row', rowStart); //                if (autoColumn && el.hasClass('pg-item')) {
          //                    colStart = 'auto';
          //                }
          //
          //                if (autoRow && el.hasClass('pg-item')) {
          //                    rowStart = 'auto';
          //                }

          if (el.css('grid-column-start') == 'auto' && el.hasClass('pg-item')) {
            colStart = 'auto';
          }

          if (el.css('grid-row-start') == 'auto' && el.hasClass('pg-item')) {
            rowStart = 'auto';
          }

          el.css('grid-column-start', colStart);
          el.css('grid-row-start', rowStart);
          el.css('grid-column-end', colEnd);
          el.css('grid-row-end', 'span ' + rowEnd);
        }
      },
      stop: function stop(event, ui) {
        //fix helper leftover
        var el = $(ui.item); //                var container = $(this);

        var container = el.parent();
        setTimeout(function () {
          $('.pg-block-panel').removeClass('pg-block-panel');
        }, 600); //disbale parent option 

        el.parent('.pg.ui-sortable').sortable("option", "connectWith", 'false');
        c.find('.pg-dragging').removeClass('pg-dragging');
        c.find('.ui-draggable-dragging').removeClass('ui-draggable-dragging');
        c.find('.dragging').removeClass('dragging');
        c.find('.show-grid').removeClass('show-grid');
        c.find('body').removeClass('pg-dragging');
        $('body').removeClass('pg-dragging'); //                el.parent().css('height', '');

        el.parent('.pg.pg-item').css('height', '');
        el.parent('.pg.pg-item').css('min-height', '');

        if (el.hasClass('pg-item') && c.find('.ui-drag-helper').length) {
          c.find('.ui-drag-helper').remove();
        } //remove new lock row classes


        c.find('.pg-lock-row').removeClass('pg-lock-row');
        c.find('.pg-lock-row-bottom').removeClass('pg-lock-row-bottom');

        if (el.hasClass('pg-item')) {
          //save item for all grid values
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["sortGrid"](container);
          container.data('sortOrderOld', sortOrderOld);
        }

        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-column-start', 'all');
        _settings__WEBPACK_IMPORTED_MODULE_6__["itemSettingsSet"]();
      },
      change: function change(event, ui) {},
      receive: function receive(event, ui) {
        console.log('recived!');
        var el = $(ui.item); //            var el = $('.ui-sortable-helper').first();

        var container = $(event.target);
        var pageId = el.attr('data-id');
        var newParentId = container.attr('data-id');

        if (pageId == newParentId) {
          var container = c.find('.pg-main');
        }

        if (container.hasClass('pte-locked') && container.parent().hasClass('pte-locked') || container.hasClass('ui-draggable-dragging')) {
          return;
        }

        dropped(container, ui.item, event);
      }
    });
  });
} // drop event in seperate function to improve droppable erea, also called from drag stop event

function dropped(container, el, event) {
  console.log('DROP!'); //    return;
  // fix sortable groups that have new parent

  if (el.hasClass('pg') && el.hasClass('ui-sortable')) {
    el.removeClass('ui-sortable');
    console.log('reinit sortable');
    pgSortable();
  }

  if (!container.hasClass('pg')) {
    return;
  } //prevent nested symbols


  if (el.hasClass('pg-symbol') && container.hasClass('pg-symbol')) return;

  if (el.hasClass('pg-add-symbol') && container.hasClass('pg-symbol')) {
    el.remove();
    return;
  }

  if (isNaN(colEnd)) {
    var totalColumns = container.css("grid-template-columns").split("px").length - 1;
    colEnd = 'span ' + Math.round(totalColumns / 2);
  }

  if (isNaN(rowEnd)) {
    rowEnd = 'span 1';
  } //    var el = $(ui.helper);
  //    var eventType = 'drag';
  //    var elOriginal = $(ui.draggable);
  //    var elOriginal = $(".ui-drag-helper");
  //    if (container.css('display') == 'grid') {
  //        var totalColumns = container.css("grid-template-columns").split("px").length - 1;
  //        //            colStart = 'auto';
  //        //            rowStart = 'auto';
  //        colEnd = 'span ' + (totalColumns / 2);
  //    }


  el.css('height', '');
  el.css('top', '');
  el.css('left', '');
  el.css('position', '');
  el.css('margin', '');

  if (container.hasClass('pg-nested')) {
    console.log('drop inside group');
    nested = true;
  }

  console.log('add-container: ' + container.attr("class"));
  container.addClass('pg-target');

  if (el.hasClass('pg-add')) {
    //add new page
    console.log('add page');
    el.css('display', 'flex');
    console.log('addcolStart:' + colStart);
    console.log('addrowStart:' + rowStart);
    console.log('addcolEnd:' + colEnd);
    console.log('addrowEnd:' + rowEnd);
    var templateId = el.attr('data-template-id');
    var type = 'add';
    var pageId = el.attr('data-id') || 0; //symbol has pageId

    if (el.hasClass('pg-add-symbol')) type = 'addSymbol';
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["createItem"](templateId, colStart, rowStart, colEnd, rowEnd, type, pageId);
  } else {
    //change parent
    console.log('change parent'); //reinit sort for iframes fix

    container.sortable('destroy');
    container.removeClass('ui-sortable'); //    container.sortable('refresh');

    pgSortable();
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_3__["changeParent"](el, container);
  }
}

/***/ }),

/***/ "./main/ajaxSave.js":
/*!**************************!*\
  !*** ./main/ajaxSave.js ***!
  \**************************/
/*! exports provided: ajaxSaveModal, ajaxSave */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ajaxSaveModal", function() { return ajaxSaveModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ajaxSave", function() { return ajaxSave; });
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ "./main/settings.js");



function ajaxSaveModal(iframe) {
  if (iframe.length == 0) {
    return false;
  }

  console.log('ajaxSaveModal loaded');
  var c = iframe.contents();
  var $message = $("<div class='autosave_dialog autosave_message'></div>").hide();
  var $error = $("<div class='autosave_dialog autosave_error'></div>").hide();
  var debouncedAjaxSave = debounce(ajaxSave, 300, false);

  if (c.find('#ProcessPageAdd').length) {
    return false;
  }

  c.find("body").append($message);
  c.find("body").append($error); // $("#ajax_save, #ajax_save_copy").click(function (event) {
  // event.preventDefault();

  c.on("change keyup input", ".InputfieldContent div, input, textarea", function (e) {
    $('.pg-settings-active').addClass('pg-unsaved');
    debouncedAjaxSave(iframe, $message, $error);
  }); // use observer to detect changes and add class pg-unsaved to save on close

  var iframeVanilla = iframe[0];
  var iframeDocument = iframeVanilla.contentDocument || iframeVanilla.contentWindow.document;
  var iframeBody = iframeDocument.body; // Setup the config

  var config = {
    attributes: false,
    childList: true,
    subtree: true
  }; // Create a callback

  var callback = function callback(mutationsList) {
    $('.pg-settings-active').addClass('pg-unsaved');
  }; // Watch the iframe for changes


  var observer = new MutationObserver(callback);
  observer.observe(iframeBody, config); //if already triggered remove class

  $('.pg-settings-active').removeClass('pg-unsaved');
  setTimeout(function () {
    $('.pg-settings-active').removeClass('pg-unsaved');
  }, 1500); // END use observer to detect changes and add class pg-unsaved to save on close

  var oldTemplate;
  c.on("hover focus", "#template", function (e) {
    oldTemplate = $(this).val();
  });
  c.on("change", "select", function (e) {
    $('.pg-settings-active').addClass('pg-unsaved');

    if ($(this).is("#template")) {
      if (confirm("WARNING! Changing the template will delete old field data.")) {
        //trigger reload of modal
        iframe.hide();
        setTimeout(function () {
          $('.submit_save').trigger('click');
        }, 600);
      } else {
        //set back to old value
        if (oldTemplate) {
          $(this).val(oldTemplate);
        }

        return;
      }
    }

    debouncedAjaxSave(iframe, $message, $error);
  });
  $("body .pg-settings-active button.ui-button:not(.pw-edit-save, .pw-edit-save-new, .pw-edit-cancel, .pw-edit-cancel-new, .ui-dialog-titlebar-close)").click(function () {
    console.log('save');
    debouncedAjaxSave(iframe, $message, $error);
  });
  $("body .pg-settings-active .ui-dialog-titlebar-close").click(function () {
    var settings = $(this).closest('.pg-settings-active');

    if (settings.find('iframe.pw-modal-window').length && $('.pg-settings-active').hasClass('pg-unsaved')) {
      console.log('save');
      debouncedAjaxSave(iframe, $message, $error);
    }

    ;
  });
}
;
function ajaxSave(iframe, $message, $error) {
  var iframeCanvas = $('#pg-iframe-canvas');
  var c2 = iframeCanvas.contents();
  var c = iframe.contents();
  var el = c2.find(".pg-item-active");
  var pageId = el.attr('data-id') || el.closest('.pg-item[data-id]').attr('data-id');
  var dialogPageID = c.find('#Inputfield_id').val(); // page ID that will get added if not already present

  var loading = $('.pg-settings-active .submit_save .fa-spinner'); // if(pageId === undefined || pageId === null || !pageId) {
  //      var pageId = el.parent().attr('data-id');
  // }
  // var pageId = el.parents('.pg-item[data-id]').attr('data-id');
  // alert(pageId);
  // if (c.find('#_ProcessPageEditSettings.pw-active').length) {
  //      return false;
  // }
  // if(c.find('.Inputfield_template.InputfieldStateChanged').length) {
  //      return;    
  // }
  //add loading animation if not alreday

  if (!loading.length) {
    $('.pg-settings-active .submit_save').append('<i class="fa fa-spin fa-spinner fa-fw"></i>');
  }

  loading.show();

  if (window.tinyMCE !== undefined) {
    tinyMCE.triggerSave();
  } //for all those tinyMCE users


  c.find("form.InputfieldForm .InputfieldTinyMCEEditor").each(function () {
    $(this).find("textarea").each(function () {
      var $textarea = $(this);
      $textarea.val(CKEDITOR.instances["Inputfield_" + $textarea.attr("name")].getData());
    });
  }); //for all those inline tinyMCE users

  c.find("form.InputfieldForm .InputfieldTinyMCEInline").each(function () {
    var $input = $(this).next('input');
    var value = $(this).html();
    $input.attr('value', value);
  }); //for all those ckeditor users

  c.find("form.InputfieldForm .InputfieldCKEditor").each(function () {
    $(this).find("textarea").each(function () {
      var $textarea = $(this);
      $textarea.val(CKEDITOR.instances["Inputfield_" + $textarea.attr("name")].getData());
    });
  }); //for all those inline ckeditor users

  c.find("form.InputfieldForm .InputfieldCKEditorInline").each(function () {
    var $input = $(this).next('input');
    var value = $(this).html();
    $input.attr('value', value);
  }); // serialize form and append page id
  // var $data = c.find('form#ProcessPageEdit').serialize() + "&id=" + c.find('#PageIDIndicator').text();

  var $data = c.find('form#ProcessPageEdit').serialize() + "&id=" + dialogPageID + "&replaceId=" + pageId;
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url') + 'ajaxsave/';
  $.ajax({
    url: ajaxPostUrl,
    type: 'post',
    data: $data,
    dataType: "json",
    success: function success(data) {
      console.log('success');

      if (!data.message.error) {// $message.html(data.message.message).slideToggle().delay(1000).fadeOut();
      } else if (data.message.error) {
        var messages = '';
        messages += data.message.message + "<br/>";

        for (var i in data.message.errors) {
          messages += data.message.errors[i] + "<br/>";
        }

        $error.html(messages).slideToggle().delay(3000).fadeOut();
      }

      console.log('dialogPageID: ' + dialogPageID);
      update(dialogPageID, data);
      $('.pg-settings-active .submit_save .fa-spinner').hide();
      $('.pg-settings-active').removeClass('pg-unsaved');
    }
  });
}
;

function update(dialogPageID, data) {
  if (data == null) {
    return false;
  }

  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var newPageClass = data.newPageClass;
  var markup = data.markup;
  var el = c.find('#' + newPageClass);
  var elID = el.attr('id');
  console.log(markup); // remember items marked for delete

  var markedDelete = '';
  c.find('.pg-item.pg-delete').each(function (e) {
    var el = $(this);
    var pageId = el.attr('data-id');
    markedDelete += pageId + ',';
  });

  if (typeof elID !== 'undefined' && elID !== false) {
    console.log('elID: ' + elID); //new set height to prevent jump

    var oldItemHeight = c.find('#' + elID).outerHeight(); //END new set height to prevent jump

    c.find('#' + elID).replaceWith(markup);
    var newItem = c.find('#' + newPageClass);
    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](newItem);
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__["InputfieldPageGridSort"](newItem);
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__["reInitItem"](newItem);
    newItem.find('.pg-item').each(function () {
      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"]($(this));
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__["reInitItem"]($(this));
    }); //new set height to prevent jump

    newItem.css('min-height', oldItemHeight);
    setTimeout(function () {
      newItem.css('min-height', '');
    }, 1000); //END new set height to prevent jump
    // marke items for delete

    var markedDelete = markedDelete.split(',');

    for (var i = 0; i < markedDelete.length; i++) {
      var el = c.find('.pg-item[data-id="' + markedDelete[i] + '"]');
      el.addClass('pg-delete');
    } //add active class back to item


    if ($('body').hasClass('pg-settings-active')) {
      c.find('.pg-item[data-id="' + dialogPageID + '"]').addClass("pg-item-active");
      c.find('.pg-item[data-page="' + dialogPageID + '"]').addClass("pg-item-active");
    }
  }
}

function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this,
        args = arguments;

    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

;

/***/ }),

/***/ "./main/colorContrast.js":
/*!*******************************!*\
  !*** ./main/colorContrast.js ***!
  \*******************************/
/*! exports provided: getRGB, setColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRGB", function() { return getRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColor", function() { return setColor; });
function getRGB(str) {
  var match = str.match(/rgba?\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3})\)?(?:, ?(\d(?:\.\d?))\))?/);
  return match ? {
    red: match[1],
    green: match[2],
    blue: match[3]
  } : {};
} //improve color contrast

function setColor(el, bgColor) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var bgBody = c.find('body').css('background-color');
  var bgParent = el.parent().css('background-color');
  if (bgColor === 'rgba(0, 0, 0, 0)') bgColor = bgParent;
  if (bgColor === 'rgba(0, 0, 0, 0)') bgColor = bgBody;
  if (bgColor === 'rgba(0, 0, 0, 0)') return false;
  var bgColor = getRGB(bgColor); // console.log(bgColor);

  if (bgColor['red'] < 50 && bgColor['green'] < 50 && bgColor['blue'] > 100) {
    document.querySelector('body').style.setProperty("--pgColor", "#00000070");
    el.get(0).style.setProperty("--pgColor", "#00000070");
    el.get(0).style.setProperty("--pgBg", "#00000010");
  } else if (bgColor['red'] < 50 && bgColor['green'] > 100 && bgColor['blue'] < 50 && el.hasClass('pg-ref')) {
    document.querySelector('body').style.setProperty("--pgColorRef", "#00000050");
    el.get(0).style.setProperty("--pgColorRef", "#00000050");
    el.get(0).style.setProperty("--pgBgRef", "#00000010");
  } else if (bgColor['red'] > 100 && bgColor['green'] < 50 && bgColor['blue'] < 50 && el.hasClass('pg-main')) {
    document.querySelector('body').style.setProperty("--pgColorRoot", "#00000050");
    el.get(0).style.setProperty("--pgColorRoot", "#00000050");
    el.get(0).style.setProperty("--pgBgRoot", "#00000010");
  } else if (bgColor['red'] < 30 && bgColor['green'] < 30 && bgColor['blue'] < 30) {
    //on dark bg
    document.querySelector('body').style.setProperty("--pgColor", "#4c49ff");
    el.get(0).style.setProperty("--pgColor", "#4c49ff");
    el.get(0).style.setProperty("--pgBg", "#0000FF50");
    el.get(0).style.setProperty("--pgBgRoot", "#FF000050");
    el.get(0).style.setProperty("--pgBgRef", "#00FF0050");
  } else {
    document.querySelector('body').style.setProperty("--pgColor", "blue");
    document.querySelector('body').style.setProperty("--pgColorRoot", "red");
    document.querySelector('body').style.setProperty("--pgColorRef", "green");
    el.get(0).style.setProperty("--pgColor", "blue");
    el.get(0).style.setProperty("--pgColorRoot", "red");
    el.get(0).style.setProperty("--pgColorRef", "green");
    el.get(0).style.setProperty("--pgBg", "#0000FF10");
    el.get(0).style.setProperty("--pgBgRoot", "#FF000010");
    el.get(0).style.setProperty("--pgBgRef", "#00FF0010");
  }
}

/***/ }),

/***/ "./main/colorcolor.js":
/*!****************************!*\
  !*** ./main/colorcolor.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*jshint esversion: 6 */
function colorcolor(color) {
  var newColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "rgba";
  var calculateOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  color = color.toLowerCase();
  newColor = newColor.toLowerCase();
  var returnedColor = color;

  var namedColor = __webpack_require__(/*! color-name */ "../../node_modules/color-name/index.js");

  var r, g, b, a;
  var roundTo = 4;
  var colorDefinitions = {
    rgb: {
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1], 10), parseInt(bits[2], 10), parseInt(bits[3], 10), 1];
      }
    },
    rgba: {
      re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d+(?:\.\d+)?|\.\d+)\s*\)/,
      example: ["rgba(123, 234, 45, 1)", "rgba(255,234,245, 0.5)"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1], 10), parseInt(bits[2], 10), parseInt(bits[3], 10), parseFloat(bits[4])];
      }
    },
    hex: {
      re: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      example: ["00ff00", "336699"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16), 1];
      }
    },
    hex3: {
      re: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      example: ["fb0", "f0f"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16), 1];
      }
    },
    hexa: {
      re: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      example: ["00ff00ff", "336699a0"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16), parseInt(bits[4], 16) / 255];
      }
    },
    hex4a: {
      re: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      example: ["fb0f", "f0f8"],
      toRGBA: function toRGBA(bits) {
        return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16), parseInt(bits[4] + bits[4], 16) / 255];
      }
    },
    hsl: {
      re: /^hsl\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%\)$/,
      example: ["hsl(120, 100%, 25%)", "hsl(0, 100%, 50%)"],
      toRGBA: function toRGBA(bits) {
        bits[4] = 1;
        var rgba = hslToRgb(bits);
        return [rgba.r, rgba.g, rgba.b, rgba.a];
      }
    },
    hsla: {
      re: /^hsla\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%,\s*(\d+(?:\.\d+)?|\.\d+)\s*\)/,
      example: ["hsla(120, 100%, 25%, 1)", "hsla(0, 100%, 50%, 0.5)"],
      toRGBA: function toRGBA(bits) {
        var rgba = hslToRgb(bits);
        return [rgba.r, rgba.g, rgba.b, rgba.a];
      }
    },
    hsv: {
      re: /^hsv\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%\)$/,
      example: ["hsv(120, 100%, 25%)", "hsv(0, 100%, 50%)"],
      toRGBA: function toRGBA(bits) {
        var rgb = hsvToRgb(bits);
        return [rgb.r, rgb.g, rgb.b, 1];
      }
    },
    hsb: {
      re: /^hsb\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%\)$/,
      example: ["hsb(120, 100%, 25%)", "hsb(0, 100%, 50%)"],
      toRGBA: function toRGBA(bits) {
        var rgb = hsvToRgb(bits);
        return [rgb.r, rgb.g, rgb.b, 1];
      }
    }
  }; // If this is a named color, convert it to hex

  if (namedColor.hasOwnProperty(color)) {
    color = namedColor[color];
    color.forEach(function (piece, index) {
      "use strict";

      color[index] = ("0" + piece.toString(16)).slice(-2);
    });
    color = "#" + color.join('');
  } // Search the color definitions for a match


  for (var colorDefinition in colorDefinitions) {
    var re = colorDefinitions[colorDefinition].re;
    var processor = colorDefinitions[colorDefinition].toRGBA;
    var bits = re.exec(color);

    if (bits) {
      var channels = processor(bits);
      r = channels[0];
      g = channels[1];
      b = channels[2];
      a = +(Math.round(channels[3] + ("e+" + roundTo)) + ("e-" + roundTo));
    }
  }

  r = Math.round(r < 0 || isNaN(r) ? 0 : r > 255 ? 255 : r);
  g = Math.round(g < 0 || isNaN(g) ? 0 : g > 255 ? 255 : g);
  b = Math.round(b < 0 || isNaN(b) ? 0 : b > 255 ? 255 : b);
  a = a < 0 || isNaN(a) ? 0 : a > 1 ? 1 : a;

  switch (newColor) {
    case "hex":
      returnedColor = "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2);
      break;

    case "hexa":
      if (calculateOpacity) {
        var _calculateOpacityFrom = calculateOpacityFromWhite(r, g, b, a);

        var _calculateOpacityFrom2 = _slicedToArray(_calculateOpacityFrom, 4);

        r = _calculateOpacityFrom2[0];
        g = _calculateOpacityFrom2[1];
        b = _calculateOpacityFrom2[2];
        a = _calculateOpacityFrom2[3];
      }

      returnedColor = "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2) + ("0" + Math.round(255 * a).toString(16)).slice(-2);
      break;

    case "hsl":
      var hsl = rgbToHsl({
        "r": r,
        "g": g,
        "b": b
      });
      returnedColor = "hsl(".concat(hsl.h, ",").concat(hsl.s, "%,").concat(hsl.l, "%)");
      break;

    case "hsla":
      if (calculateOpacity) {
        var _calculateOpacityFrom3 = calculateOpacityFromWhite(r, g, b, a);

        var _calculateOpacityFrom4 = _slicedToArray(_calculateOpacityFrom3, 4);

        r = _calculateOpacityFrom4[0];
        g = _calculateOpacityFrom4[1];
        b = _calculateOpacityFrom4[2];
        a = _calculateOpacityFrom4[3];
      }

      var hsla = rgbToHsl({
        "r": r,
        "g": g,
        "b": b,
        "a": a
      });
      returnedColor = "hsla(".concat(hsla.h, ",").concat(hsla.s, "%,").concat(hsla.l, "%,").concat(hsla.a, ")");
      break;

    case "hsb":
      /* Same as `hsv` */
      var hsb = rgbToHsv({
        "r": r,
        "g": g,
        "b": b
      });
      returnedColor = "hsb(".concat(hsb.h, ",").concat(hsb.s, "%,").concat(hsb.v, "%)");
      break;

    case "hsv":
      var hsv = rgbToHsv({
        "r": r,
        "g": g,
        "b": b
      });
      returnedColor = "hsv(".concat(hsv.h, ",").concat(hsv.s, "%,").concat(hsv.v, "%)");
      break;

    case "rgb":
      returnedColor = "rgb(".concat(r, ",").concat(g, ",").concat(b, ")");
      break;

    case "rgba":
    /* falls through */

    default:
      if (calculateOpacity) {
        var _calculateOpacityFrom5 = calculateOpacityFromWhite(r, g, b, a);

        var _calculateOpacityFrom6 = _slicedToArray(_calculateOpacityFrom5, 4);

        r = _calculateOpacityFrom6[0];
        g = _calculateOpacityFrom6[1];
        b = _calculateOpacityFrom6[2];
        a = _calculateOpacityFrom6[3];
      }

      returnedColor = "rgba(".concat(r, ",").concat(g, ",").concat(b, ",").concat(a, ")");
      break;
  }

  return returnedColor;
}

function calculateOpacityFromWhite(r, g, b, a) {
  "use strict";

  var min = 0;
  a = (255 - (min = Math.min(r, g, b))) / 255;
  r = ( false || (r - min) / a).toFixed(0);
  g = ( false || (g - min) / a).toFixed(0);
  b = ( false || (b - min) / a).toFixed(0);
  a = parseFloat(a.toFixed(4));
  return [r, g, b, a];
}

function hslToRgb(bits) {
  var rgba = {},
      hsl = {
    h: bits[1] / 360,
    s: bits[2] / 100,
    l: bits[3] / 100,
    a: parseFloat(bits[4])
  };

  if (hsl.s === 0) {
    var v = 255 * hsl.l;
    rgba = {
      r: v,
      g: v,
      b: v,
      a: hsl.a
    };
  } else {
    var q = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - hsl.l * hsl.s;
    var p = 2 * hsl.l - q;
    rgba.r = hueToRgb(p, q, hsl.h + 1 / 3) * 255;
    rgba.g = hueToRgb(p, q, hsl.h) * 255;
    rgba.b = hueToRgb(p, q, hsl.h - 1 / 3) * 255;
    rgba.a = hsl.a;
  }

  return rgba;
}

function rgbToHsl(rgba) {
  rgba.r = rgba.r / 255;
  rgba.g = rgba.g / 255;
  rgba.b = rgba.b / 255;
  var max = Math.max(rgba.r, rgba.g, rgba.b),
      min = Math.min(rgba.r, rgba.g, rgba.b),
      hsl = [],
      d;
  hsl.a = rgba.a;
  hsl.l = (max + min) / 2;

  if (max === min) {
    hsl.h = 0;
    hsl.s = 0;
  } else {
    d = max - min;
    hsl.s = hsl.l >= 0.5 ? d / (2 - max - min) : d / (max + min);

    switch (max) {
      case rgba.r:
        hsl.h = (rgba.g - rgba.b) / d + (rgba.g < rgba.b ? 6 : 0);
        break;

      case rgba.g:
        hsl.h = (rgba.b - rgba.r) / d + 2;
        break;

      case rgba.b:
        hsl.h = (rgba.r - rgba.g) / d + 4;
        break;
    }

    hsl.h /= 6;
  }

  hsl.h = parseInt((hsl.h * 360).toFixed(0), 10);
  hsl.s = parseInt((hsl.s * 100).toFixed(0), 10);
  hsl.l = parseInt((hsl.l * 100).toFixed(0), 10);
  return hsl;
}

function hsvToRgb(bits) {
  var rgb = {},
      hsv = {
    h: bits[1] / 360,
    s: bits[2] / 100,
    v: bits[3] / 100
  },
      i = Math.floor(hsv.h * 6),
      f = hsv.h * 6 - i,
      p = hsv.v * (1 - hsv.s),
      q = hsv.v * (1 - f * hsv.s),
      t = hsv.v * (1 - (1 - f) * hsv.s);

  switch (i % 6) {
    case 0:
      rgb.r = hsv.v;
      rgb.g = t;
      rgb.b = p;
      break;

    case 1:
      rgb.r = q;
      rgb.g = hsv.v;
      rgb.b = p;
      break;

    case 2:
      rgb.r = p;
      rgb.g = hsv.v;
      rgb.b = t;
      break;

    case 3:
      rgb.r = p;
      rgb.g = q;
      rgb.b = hsv.v;
      break;

    case 4:
      rgb.r = t;
      rgb.g = p;
      rgb.b = hsv.v;
      break;

    case 5:
      rgb.r = hsv.v;
      rgb.g = p;
      rgb.b = q;
      break;
  }

  rgb.r = rgb.r * 255;
  rgb.g = rgb.g * 255;
  rgb.b = rgb.b * 255;
  return rgb;
}

function rgbToHsv(rgba) {
  rgba.r = toPercent(parseInt(rgba.r, 10) % 256, 256);
  rgba.g = toPercent(parseInt(rgba.g, 10) % 256, 256);
  rgba.b = toPercent(parseInt(rgba.b, 10) % 256, 256);
  var max = Math.max(rgba.r, rgba.g, rgba.b),
      min = Math.min(rgba.r, rgba.g, rgba.b),
      d = max - min,
      hsv = {
    "h": 0,
    "s": max === 0 ? 0 : d / max,
    "v": max
  };

  if (max !== min) {
    switch (max) {
      case rgba.r:
        hsv.h = (rgba.g - rgba.b) / d + (rgba.g < rgba.b ? 6 : 0);
        break;

      case rgba.g:
        hsv.h = (rgba.b - rgba.r) / d + 2;
        break;

      case rgba.b:
        hsv.h = (rgba.r - rgba.g) / d + 4;
        break;
    }

    hsv.h /= 6;
  }

  hsv.h = parseInt((hsv.h * 360).toFixed(0), 10);
  hsv.s = parseInt((hsv.s * 100).toFixed(0), 10);
  hsv.v = parseInt((hsv.v * 100).toFixed(0), 10);
  return hsv;
}

function hueToRgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }

  if (t > 1) {
    t -= 1;
  }

  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }

  if (t < 1 / 2) {
    return q;
  }

  if (t < 2 / 3) {
    return p + (q - p) * ((2 / 3 - t) * 6);
  }

  return p;
}

function toPercent(amount, limit) {
  return amount / limit;
}

module.exports = colorcolor;
global.colorcolor = module.exports;
/* ew */
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./main/copy-paste.js":
/*!****************************!*\
  !*** ./main/copy-paste.js ***!
  \****************************/
/*! exports provided: copyItem, pasteItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyItem", function() { return copyItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pasteItem", function() { return pasteItem; });
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");

function copyItem(el) {
  if ($('body').hasClass('pg-dragging')) {
    return;
  }

  var cloneId = el.attr('data-id-original');
  localStorage.setItem('pgCopy', cloneId);
}
function pasteItem() {
  if ($('body').hasClass('pg-dragging')) {
    return;
  }

  if ($("input:focus").length) {
    return;
  }

  var cloneId = localStorage.getItem('pgCopy') || 0;

  if (cloneId && cloneId !== null) {
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__["cloneItem"](cloneId);
  }
}

/***/ }),

/***/ "./main/dom-list.js":
/*!**************************!*\
  !*** ./main/dom-list.js ***!
  \**************************/
/*! exports provided: domListChildren, domList, domListSort, domListActions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domListChildren", function() { return domListChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domList", function() { return domList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domListSort", function() { return domListSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "domListActions", function() { return domListActions; });
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _add_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item */ "./main/add-item.js");
/* harmony import */ var _drag_resize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drag-resize */ "./main/drag-resize.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _item_header__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./item-header */ "./main/item-header.js");








function domListChildren(el) {
  var listMarkupC = '';
  var children = el.find('> .pg-item');
  children.each(function (index) {
    var el = $(this);
    var elIcon = el.find('> pg-icon').html() || '<i class="fa fw fa-folder-open" title="fa-folder-open"></i>';
    var toggle = '';
    var toggleClass = '';
    var icon = '';
    var text = el.attr('data-template') || el.attr('id');
    text = text.replace('_', '-'); // convert _ to -

    var subChildren = el.find('.pg-item');
    var pageId = el.attr('data-id'); //return if no sortable item

    if (typeof pageId == 'undefined' || pageId == false) {
      return;
    } // return if clone from glide slider to prevent duplicates


    if (el.parent().hasClass('glide__slide--clone')) {
      return;
    }

    if (subChildren.length) {
      toggle = '<div class="sort-item-toggle"></div>';
      toggleClass = ' sort-item-close';
    }

    if (el.hasClass('pg')) {
      toggle = '<div class="sort-item-toggle"></div>';
      toggleClass = ' sort-item-group sort-item-close';
    }

    if (el.hasClass('pg-ref')) {
      toggleClass += ' pg-ref no-parent-change';
    }

    if (el.hasClass('pg-locked')) {
      icon += '<i class="fa fa-lock" title="Unlock"></i>';
    }

    listMarkupC += '<div class="sort-item sort-item-' + el.attr('id') + toggleClass + '" data-sort-id="#' + el.attr('id') + '">';
    listMarkupC += toggle;
    listMarkupC += elIcon;
    listMarkupC += text;
    listMarkupC += icon;
    listMarkupC += domListChildren(el);
    listMarkupC += '</div>';
  });
  return listMarkupC;
}
function domList() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var listMarkup = '';
  var listMarkupInner = domListChildren(c.find('.pg-main'));
  $('.pg-item-list').remove();
  listMarkup = '<section class="pg-item-list pg-item-list-menu-active">';
  listMarkup += '<i class="fa fa-times close"></i>';
  listMarkup += '<div class="sort-item sort-item-body" data-sort-id="body">BODY<div class="sort-item sort-item-pg-main pg-sortable" data-sort-id=".pg-main">pg-wrapper' + listMarkupInner + '</div></div>';
  listMarkup += '</section>';
  $('body').append(listMarkup); //grid.sortGrid($(this));

  domListSort();
  var itemId = c.find('.pg-item-active').attr('id');
  $('.pg-item-list-active').removeClass('pg-item-list-active');
  $('.pg-item-list [data-sort-id="#' + itemId + '"]').addClass('pg-item-list-active');
  var activeParents = $('.pg-item-list-active').parents('.sort-item');

  if (activeParents.length) {
    activeParents.removeClass('sort-item-close');
  }
}
function domListSort() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var currentIndex;
  var parent;
  var parentAttr;
  var allowNewParent = 1;
  $('.pg-item-list .pg-sortable').sortable({
    items: '.sort-item',
    forcePlaceholderSize: true,
    tolerance: "pointer",
    appendTo: $('.pg-item-list'),
    greedy: true,
    // for nested elements 
    //        scroll: false,
    // containment: '.pg-sortable',
    start: function start(event, ui) {
      currentIndex = ui.helper.index();
      parent = ui.item.parent();
      parentAttr = parent.attr('data-sort-id');

      if (ui.item.hasClass('no-parent-change') || ui.item.parents('no-parent-change').length) {
        console.log('change of parent not allowed!');
        allowNewParent = 0;
      } else {
        allowNewParent = 1;
      }

      ui.placeholder.height(2);
      ui.placeholder.css('width', ui.item.width());
      ui.placeholder.css('background-color', 'blue'); //      ui.placeholder.css('border', '1px solid red');

      ui.placeholder.css('visibility', 'visible');
    },
    sort: function sort(event, ui) {
      var pos = ui.item.position();
      var posX = pos.left;
      var posY = pos.top;
      var newParent = ui.placeholder.parent().attr('data-sort-id');

      if (ui.item.prev().length) {
        var posPrev = ui.item.prev().position();
        var posPrevX = posPrev.left;
        var posPrevY = posPrev.top; //      console.log('X:' + e.screenX, 'Y:' + e.screenY);
        // console.log('posX: ' + posX);
        // console.log('posPrevX: ' + posPrevX);

        if (posX > posPrevX + 25 && ui.placeholder.prev('.sort-item-group') !== $(ui.item) && allowNewParent == 1) {
          // console.log('append To parent:' + ui.placeholder.prev().attr('data-sort-id'));
          ui.placeholder.prev('.sort-item-group').removeClass('sort-item-close');
          ui.placeholder.appendTo(ui.placeholder.prev('.sort-item-group:not(.no-parent-change)'));
        }

        if (allowNewParent == 0 && newParent !== parentAttr || ui.placeholder.parent().hasClass('no-parent-change') && newParent !== parentAttr) {
          ui.placeholder.appendTo(parent);
        }
      }
    },
    stop: function stop(event, ui) {
      var el = ui.item.attr('data-sort-id');
      var indexCount = ui.item.parent().find('div:not(.ui-sortable-helper)');
      var sortClass = ui.item.attr('data-sort-id');
      var sortClassNext = ui.item.next().attr('data-sort-id');
      var container = c.find('.pg-main');
      var newParent = ui.item.parent().attr('data-sort-id');
      console.log("sort insert after: " + c.find(sortClassNext).attr('id'));
      console.log('allowNewParent:' + allowNewParent);

      if (currentIndex > ui.placeholder.index()) {
        container.find(sortClassNext).first().before(container.find(sortClass));
      } else {
        container.find(sortClassNext).first().after(container.find(sortClass));
        currentIndex = ui.placeholder.index();
      }

      if ($(sortClassNext).attr('id') == null) {
        console.log('alternative value');
        var sortClassNext = ui.item.prev().attr('data-sort-id');
        container.find(sortClassNext).first().after(container.find(sortClass));
      } // new parent


      if (parentAttr !== newParent && allowNewParent) {
        console.log('new parent'); //if no next item append to new parent

        if (sortClassNext == undefined) {
          c.find(newParent).first().append(c.find(sortClass));
        }

        _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_6__["changeParent"](c.find(el), c.find(newParent));
      } // ajax update sort order


      console.log("sort parent: " + newParent);
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_6__["InputfieldPageGridSort"](c.find(newParent));
    }
  });
  $(".pg-item-list .pg-sortable").disableSelection();
}
function domListActions() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  $(document).on("mouseover mouseout", ".pg-item-list .sort-item", function (event) {
    event.stopPropagation();
    var el = $(this).attr('data-sort-id');
    c.find('.pg-item-selected').removeClass('pg-item-selected');
    c.find(el).addClass('pg-item-selected');
  });
  $(document).on("click", ".pg-item-list .sort-item", function (event) {
    event.stopPropagation();
    console.log('cliked list item');
    var el = '.pg-container ' + $(this).attr('data-sort-id');
    c.find('.pg-item-selected').removeClass('pg-item-selected'); //    $(this).addClass('pg-item-list-active');

    _item_header__WEBPACK_IMPORTED_MODULE_7__["showHeader"](c.find(el));
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_6__["InputfieldPageGridDialog"](c.find(el));
  });
  $(document).on("click", ".pg-item-list .sort-item-toggle", function (event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    $(this).parent().toggleClass('sort-item-close');
  });
  $(document).on("click", ".pg-item-list-button, .pg-item-list .close", function (e) {
    e.preventDefault();

    if ($('.pg-item-list').is(":visible")) {
      $('.pg-item-list').removeClass('pg-item-list-menu-active');
      $('.pg-item-list').hide();
    } else {
      domList();
      $('.pg-item-list').addClass('pg-item-list-menu-active');
      $('.pg-item-list').show();
    }
  });
  $(document).on("click", ".pg-item-list .sort-item .fa-lock", function (e) {
    e.preventDefault();
    var elId = $(this).parent().attr('data-sort-id');
    var pageId = c.find(elId).attr('data-id') || '';

    if (pageId) {
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_6__["lockItem"](pageId);
      $(this).hide();
    }
  });
}

/***/ }),

/***/ "./main/dom-navigator.js":
/*!*******************************!*\
  !*** ./main/dom-navigator.js ***!
  \*******************************/
/*! exports provided: createDoomNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDoomNavigator", function() { return createDoomNavigator; });
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");

function createDoomNavigator() {
  if (!$('.pg-stylepanel').length) return;
  console.log('create dom navigator');
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var parents = el.parents();
  var reverseParents = parents.toArray().reverse();
  var svg = '<svg aria-hidden="true" focusable="false" width="7" height="28" viewBox="0 0 7 28"><path fill="var(--path-fill, #cccccc)" d="M1 0H0l6 14-6 14h1l6-14z"></path></svg>';
  var elArray = el.toArray();
  reverseParents = reverseParents.concat(elArray);
  $('.pg-navigator').remove();
  $('body').append('<div class="pg-navigator"></div>');
  jQuery.each(reverseParents, function (i, parent) {
    if ($(parent).is('html, pg-edit, pg-uploader')) return;
    if ($(parent).hasClass('pw-edit')) return;
    var parentLabel = $(parent).attr('data-template') || $(parent).attr('data-class') || $(parent).attr('id') || $(parent).prop("tagName");
    if (parent.hasAttribute("data-template")) parentLabel = parentLabel.replace('_', '-'); // convert _ to -

    var parentId = $(parent).attr('data-class') || $(parent).attr('id') || $(parent).prop("tagName");
    var icon = $(parent).find('> pg-icon').html() || '';
    var disableClass = '';
    if ($(parent).hasClass('pg-item-active')) disableClass = 'pg-navigator-item-disable';
    if ($(parent).prop("tagName") !== parentId && !icon) icon = '<i class="fa fw fa-folder-open" title="fa-folder-open"></i>';
    if (parentId === 'div' || parentId === 'DIV') return;
    if ($(parent).is('body')) icon = '<i class="fa fw fa-window-maximize on" title="fa-window-maximize"></i>';
    if ($(parent).is('img, svg')) icon = '<i class="fa fw fa-image on" title="fa-window-maximize"></i>';
    if ($(parent).hasClass('pg-main')) parentLabel = 'pg-wrapper';
    var item = '<span class="pg-navigator-item ' + disableClass + '" data-id="' + parentId + '">' + icon + parentLabel + '</span>' + svg;
    $('.pg-navigator').append(item);
  });
}
$(document).on('click', '.pg-navigator-item', function () {
  //if active item is clicked return
  if ($(this).hasClass('pg-navigator-item-disable')) return;
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var elActive = c.find('.pg-item-active');
  var parents = elActive.parents();
  var elId = $(this).attr('data-id');
  var el = parents.find('.' + elId).first();
  if (!el.length) el = parents.find('#' + elId).first();
  if (!el.length) el = parents.find(elId).first();

  if (el.length) {
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_0__["InputfieldPageGridDialog"](el);
    createDoomNavigator();
  }
});

/***/ }),

/***/ "./main/drag-resize.js":
/*!*****************************!*\
  !*** ./main/drag-resize.js ***!
  \*****************************/
/*! exports provided: setPlacement, dragResize, dragResizeHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPlacement", function() { return setPlacement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dragResize", function() { return dragResize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dragResizeHelper", function() { return dragResizeHelper; });
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _add_item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add-item */ "./main/add-item.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./main/settings.js");






var autoRow = false,
    autoColumn = false,
    colEnd,
    rowEnd,
    colStart,
    rowStart,
    width,
    height,
    start,
    data;
function setPlacement(el) {
  if (el.css('grid-row-start') == 'auto') {
    autoRow = true;
  } else {
    autoRow = false;
  }

  if (el.css('grid-column-start') == 'auto') {
    autoColumn = true;
  } else {
    autoColumn = false;
  } // console.log(autoRow);

}

var direction = "",
    oldY = 0,
    mousemovemethod = function mousemovemethod(event) {
  if (event.pageY < oldY) {
    direction = "up";
  } else if (event.pageY > oldY) {
    direction = "down";
  }

  oldY = event.pageY; //      console.log('direction: ' + direction);

  return [direction];
}; //   drag and resize


function dragResize(el) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); // console.log('init resize');

  if (!el.hasClass('pg-item-resizable')) {
    return false;
  }

  if (!el.hasClass('pg-item')) {
    return false;
  }

  console.log('init resize success');
  el.resizable({
    handles: 'e, s, w, se, sw',
    ghost: true,
    //        containment: "#ProcessPageEdit",
    scroll: true,
    start: function start(event, ui) {
      //      $(this).css('z-index', ++zIndex);
      $(this).addClass('ui-resizing-item');
      $(this).parent().append($('.ui-resizable-helper'));
      $(this).parent().append('<div class="ui-resizable-helper-live"></div>');
      c.find('.ui-resizable-helper').css('left', $(this).position().left);
      c.find('.ui-resizable-helper').css('top', $(this).position().top); //      $('.ui-resizable-helper').addClass('pg-item');
      //set placement option on resize start

      setPlacement($(this));
      $(this).parent().addClass('resizing');
      c.find('html').addClass('resizing'); //      /block pannel while resizing

      $('body').addClass('pg-block-panel');
    },
    resize: function resize(event, ui) {
      var eventType = 'resize';
      var el = $(ui.helper);
      var placeholder = c.find('.ui-resizable-helper-live');
      var elOriginal = $(ui.originalElement); // update overlay

      _overlay__WEBPACK_IMPORTED_MODULE_1__["overlay"]($(el).parent()); //force same height than placeholder

      el.find('div').css('min-height', '100%');
      data = dragResizeHelper(eventType, el, elOriginal, event);
      colStart = data[0];
      rowStart = elOriginal.css('grid-row-start');
      colEnd = data[2];
      rowEnd = data[3];

      if (colEnd !== -1) {
        var colEnd = 'span ' + colEnd;
      }

      var axis = $(ui.element).data("ui-resizable").axis;

      if (axis == 'e' || axis == 'w') {
        c.find('.ui-resizable-helper').css('height', $(this).outerHeight());
      }

      if (axis == 'w' || axis == 'nw' || axis == 'sw') {
        c.find('.ui-resizable-helper').css('left', 'auto');
        c.find('.ui-resizable-helper').css('right', $(this).parent().outerWidth() - ($(this).position().left + $(this).outerWidth()));
      } //n ne nw not working hide for now


      if (axis == 'n' || axis == 'ne' || axis == 'nw') {
        c.find('.ui-resizable-helper').css('top', 'auto');
        c.find('.ui-resizable-helper').css('bottom', $(this).parent().outerHeight() - ($(this).position().top + $(this).outerHeight())); // rowStart = data[1];
      } // console.log('AA rowStart:' + rowStart);


      placeholder.css('grid-row-start', rowStart);
      placeholder.hide();
      c.find('.ui-resizable-helper').css('top', $(this).position().top); //if east or west skip row

      if (axis !== 'e' && axis !== 'w') {
        // console.log('ROWWWWWW');
        placeholder.css('grid-row-end', 'span ' + rowEnd); // elOriginal.css('grid-row-start', rowStart);

        elOriginal.css('grid-row-end', 'span ' + rowEnd); // save.saveData(elOriginal, 'grid-row-start', rowStart, false, true);
        // save.saveData(elOriginal, 'grid-row-end', 'span ' + rowEnd, false, true);
      } else {
        // console.log('COLLL');
        placeholder.css('grid-column-start', colStart);
        placeholder.css('grid-column-end', colEnd);
        elOriginal.css('grid-column-start', colStart);
        elOriginal.css('grid-column-end', colEnd); // save.saveData(elOriginal, 'grid-column-start', colStart, false, true);
        // save.saveData(elOriginal, 'grid-column-end', colEnd, false, true);
      } // console.log('resize-axis:' + axis);
      //save and set styles but skip ajax


      placeholder.css('width', '');
      $(this).css('position', '');
      $(this).css('top', '');
      $(this).css('left', '');
    },
    stop: function stop(event, ui) {
      var eventType = 'resize';
      var el = $(ui.helper);
      var elOriginal = ui.originalElement;
      c.find('.ui-resizable-helper').css('height', $(this).height());
      c.find('.resizing').removeClass('resizing');
      setTimeout(function () {
        $('.pg-block-panel').removeClass('pg-block-panel');
      }, 600);

      if (autoRow) {
        elOriginal.css('grid-row-start', 'auto'); // save.saveData(elOriginal, 'grid-row-start', 'auto', false, true);
      }

      if (autoColumn) {
        elOriginal.css('grid-column-start', 'auto'); // save.saveData(elOriginal, 'grid-column-start', 'auto', false, true);
      }

      c.find('.ui-resizable-helper-live').remove();
      $(this).removeClass('ui-resizing-item');
      $(this).css('position', '');
      $(this).css('top', '');
      $(this).css('bottom', '');
      $(this).css('right', '');
      $(this).css('left', '');
      $(this).css('height', '');
      $(this).css('width', '');
      $(this).css('opacity', '');
      el.find('div').css('min-height', ''); // update overlay

      _overlay__WEBPACK_IMPORTED_MODULE_1__["overlay"]($(el).parent()); // save.saveData(elOriginal, 'grid-column-start', 'all');

      _save__WEBPACK_IMPORTED_MODULE_0__["saveData"](elOriginal, 'grid-column-start', 'all', 0, 0, 0, 1, 1); // save.saveData(elOriginal);

      _settings__WEBPACK_IMPORTED_MODULE_5__["itemSettingsSet"]();
    }
  }); //remove ui-resizable class after init, causing css styleing of PageFrontEdit module

  el.removeClass('ui-resizable'); // add new event that fires before drag start to set position back to relative
  //    var oldMouseStart = $.ui.draggable.prototype._mouseStart;
  //    $.ui.draggable.prototype._mouseStart = function (event, overrideHandle, noActivation) {
  //        this._trigger("beforeStart", event, this._uiHash());
  //        oldMouseStart.apply(this, [event, overrideHandle, noActivation]);
  //    };
} // resize and drag helper function

function dragResizeHelper(eventType, el, elOriginal, event) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //      if (el.parent().css('display') != 'grid') {
  //          return;
  //      }

  var offset = el.offset();
  var pLeft = offset.left;
  var pTop = offset.top;
  var mouseX = event.pageX;
  var mouseY = event.pageY; //  if (pLeft < el.parent().offset.left) {
  //    console.log('return false');
  //    return [0, 0, 0, 0];
  //  }

  if (eventType == 'resize') {
    if (el.parent().css('display') == 'grid') {
      var totalColumns = el.parent().css("grid-template-columns").split("px").length - 1;
    } else {
      var totalColumns = 12;
    } // if resize starts on the left


    if (mouseX < pLeft + 20) {
      pLeft = mouseX;
    }

    var itemSizerStart = el.parent().children('.pg-overlay').eq(0).find('.pg-overlay-column').closestToOffset({
      left: pLeft + 5,
      top: pTop + 20
    });
    var itemSizerEnd = el.parent().children('.pg-overlay').eq(0).find('.pg-overlay-column').closestToOffset({
      left: pLeft + el.outerWidth(),
      top: pTop + el.outerHeight()
    });
    var colStart = parseInt(itemSizerStart.attr('data-column'));
    var rowStart = parseInt(itemSizerStart.attr('data-row')); //        var rowStart = parseInt(c.find('.pg-item.ui-resizing-item').css('grid-row-start'));

    var colEnd = parseInt(itemSizerEnd.attr('data-column'));
    var rowEnd = parseInt(itemSizerEnd.attr('data-row'));
    var width = colEnd + 1;
    var height = rowEnd + 1; // console.log('rowStart:' + rowStart);

    c.find('.over').removeClass('over'); //add hover class to matching overlay columns

    var i;

    for (i = rowStart; i < height; i++) {
      if (!i < rowStart) {
        var rowContainer = el.parent().children('.pg-overlay').first().find(".pg-overlay-row[data-row='" + i + "']");
        var c;

        for (c = colStart; c < width; c++) {
          if (!c < colStart) {
            rowContainer.find("[data-column='" + c + "']").addClass('over');
          }
        }

        ;
      }
    }

    ;
    var colEnd = colEnd - colStart + 1;
    var rowEnd = rowEnd - rowStart + 1;
  }

  if (eventType == 'drag') {
    // console.log('run helper');
    mousemovemethod(event);
    data = mousemovemethod(event);
    var direction = data[0]; // console.log('direction ' + direction);
    //SORABLE
    //check for move down

    if (!$('.pg-add.ui-draggable-dragging').length) {
      if (direction == 'down') {
        var rowEnd = parseInt(elOriginal.css('grid-row-end').replace('span ', ''));

        if (rowEnd > 1) {
          var pTop = pTop + elOriginal.outerHeight() / rowEnd - 20;
        } else {
          var pTop = pTop + el.outerHeight() - 20;
        }
      } else {
        var pTop = pTop + 10;
      }

      var itemSizerStart = c.find('.ui-drag-helper').parent().children('.pg-overlay').first().find('.pg-overlay-column').closestToOffset({
        left: pLeft,
        top: pTop
      });
    } //ADD ITEM
    //fix add item offset


    if ($('.pg-add.ui-draggable-dragging').length) {
      // console.log('add helper active');
      var iframeOffset = iframe.offset();
      var iframeTop = iframeOffset.top;
      var iframeLeft = iframeOffset.left;
      var iframeBottom = iframeTop + iframe.outerHeight();
      pLeft = mouseX - iframeLeft;
      pTop = event.pageY - iframeTop + c.scrollTop(); // mouseY = mouseY - iframeTop;

      var helper = c.find('.ui-drag-helper').first();

      if (direction === 'up') {
        c.find('.pg-lock-row-bottom').removeClass('pg-lock-row-bottom');
      } //find parent new


      var helperParent = c.find('.pg-main .pg-droppable, .pg-main, .pg-droppable-dummy').closestToOffset({
        left: pLeft,
        top: pTop
      });

      if (!helperParent) {
        return false;
      }

      if (helperParent.hasClass('pg-droppable-dummy')) {
        helper.insertAfter(helperParent);
        helperParent = helperParent.parent();
        return;
      }

      if (event.pageY - 10 < iframeTop) {
        console.log('AT TOP');
        helper.prependTo(c.find('.pg-main'));
        if (c.find('.pg-main').css('display') !== 'grid') return;
      }

      if (event.pageY > iframeBottom) {
        console.log('AT BOTTOM');
        helper.appendTo(c.find('.pg-main'));
        c.scrollTop(c.find('body').height());
        if (c.find('.pg-main').css('display') !== 'grid') return;
      }

      helper.appendTo(helperParent);

      if (helperParent.css('display') === 'grid') {
        var itemSizerStart = helperParent.children('.pg-overlay').find('.pg-overlay-column').closestToOffset({
          left: pLeft,
          top: pTop
        });
      } else {
        var itemSizerStart = helperParent.children('.pg-item').closestToOffset({
          left: pLeft,
          top: pTop
        });

        if (itemSizerStart) {
          helper.insertAfter(itemSizerStart);
          return;
        }
      }
    }

    if (!itemSizerStart) {
      // console.log('itemsizer not found!')
      return false;
    }

    var colStart = parseInt(itemSizerStart.attr('data-column'));
    var rowStart = parseInt(itemSizerStart.attr('data-row'));
    var colStart = Math.abs(colStart);
    var rowStart = Math.abs(rowStart);
    var colEnd = parseInt(elOriginal.css('grid-column-end').replace('span ', ''));
    var rowEnd = parseInt(elOriginal.css('grid-row-end').replace('span ', ''));
    var width = Math.abs(colStart) + Math.abs(colEnd);
    var height = Math.abs(rowStart) + Math.abs(rowEnd);
    var helper = c.find('.ui-drag-helper').first();
    var parent = c.find('.ui-drag-helper').parent(); //append helper to parent
    // if (!$('body').hasClass('pg-lock-parent')) {
    //     helper.appendTo(parent);
    // }
    // if ($('.pg-add.ui-draggable-dragging').length) {
    //     parent = itemSizerStart.parents('.pg-droppable:not(.pg-locked)').first();
    //     helper.appendTo(parent);
    // }
    //get current rows and columns max

    if (parent.css('display') == 'grid') {
      var totalColumns = parent.css("grid-template-columns").split("px").length - 1;
      var totalRows = parent.css("grid-template-rows").split("px").length - 1;
    } else {
      return false;
    }

    if ($('.pg-add.ui-draggable-dragging').length) {
      colEnd = totalColumns / 2;
    }

    if (colEnd == -1) {
      var width = totalColumns + 1;
    } //    create rows if dragged into first row


    if (itemSizerStart.parent().hasClass('pg-overlay-row-first')) {
      if (!c.find('.pg-lock-row').length) {
        if (el.hasClass('pg-add')) {
          height = rowStart + parseInt(_add_item__WEBPACK_IMPORTED_MODULE_3__["defaultRowEnd"].replace('span ', '')); // console.log("add-height: " + height);
        }

        _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_2__["addRow"](parent, 0);
        parent.addClass('pg-lock-row');
      }
    } else {
      if (c.find('.pg-lock-row').length) {
        c.find(".pg-lock-row").each(function () {
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_2__["removeRow"]($(this), 0);
          $(this).removeClass('pg-lock-row');
        });
      }
    }
  } // console.log('colStart:' + colStart);
  // console.log('colEnd:' + colEnd);
  // console.log('totalColumns:' + totalColumns);
  // console.log('width:' + width);


  if (width > totalColumns) {
    var colEndCheck = colEnd;

    if (colEnd == -1) {
      colEndCheck = totalColumns;
    }

    colStart = totalColumns - colEndCheck + 1; // console.log('out of bounds! total:' + width);
    // console.log('new start:' + colStart);
  } //only create one more row max


  if (height > totalRows + 1) {
    //lock rows
    if (parent.hasClass('pg-lock-row-bottom')) {
      rowStart = totalRows; // console.log('LOCK ROW');
    }

    parent.addClass('pg-lock-row-bottom');
  }

  if (colStart == null || rowStart == null) {
    return;
  }

  if (colEnd == 'auto') {
    colEnd = totalColumns / 2;
  }

  return [colStart, rowStart, colEnd, rowEnd];
}

/***/ }),

/***/ "./main/editSymbols.js":
/*!*****************************!*\
  !*** ./main/editSymbols.js ***!
  \*****************************/
/*! exports provided: createEditIds, convertEditIds */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEditIds", function() { return createEditIds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertEditIds", function() { return convertEditIds; });
//this is needed to prevent bug for inline editing symbols with the same page id
function createEditIds() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //hack force unique edit id for symbols with same id

  c.find('.pg-symbol .pw-edit[data-page]').each(function () {
    var pageId = $(this).closest('[data-id-original]').attr('data-id-original');
    var pageIdOld = $(this).attr('data-page');
    var copy = $(this).find('.pw-edit-copy').first();
    var copyId = copy.attr('id').replace(pageIdOld, pageId);
    $(this).attr('data-page', pageId);
    copy.attr('id', copyId);
  }); //END hack force unique edit id for symbols with same id
}
function convertEditIds() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //remove symbol unique id hack

  c.find('.pg-symbol .pw-edit[data-page]').each(function () {
    var pageId = $(this).closest('[data-id]').attr('data-id');
    var pageIdOld = $(this).attr('data-page-original');
    var copy = $(this).find('.pw-edit-copy').first();
    var copyId = copy.attr('id').replace(pageIdOld, pageId);
    $(this).attr('data-page', pageId);
    copy.attr('id', copyId); //copy content over

    if ($(this).hasClass('pw-changed')) {
      var content = copy.html();
      c.find('.pg-symbol .pw-edit[data-page="' + pageId + '"] .pw-edit-orig').html(content);
      c.find('.pg-symbol .pw-edit[data-page="' + pageId + '"] .pw-edit-copy').html(content);
      c.find('.pg-symbol .pw-edit[data-page="' + pageIdOld + '"] .pw-edit-orig').html(content);
      c.find('.pg-symbol .pw-edit[data-page="' + pageIdOld + '"] .pw-edit-copy').html(content);
    }
  });
}

/***/ }),

/***/ "./main/file_uploader.js":
/*!*******************************!*\
  !*** ./main/file_uploader.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

$(document).ready(function () {
  var iframe = $('#pg-iframe-canvas');
  iframe.on('load', function () {
    var cFrame = iframe.contents();
    var c = $(document);
    initUploader(c);
    initUploader(cFrame);
  });
});

function initUploader(c) {
  var $dropzone = c.find('.pg-file-picker'),
      $droptarget = c.find('.drop_target'),
      $dropinput = c.find('.inputFile'),
      $dropfile = c.find('.pg-fileupload'),
      $remover = c.find('[data-action="remove_current_image"]'); // $dropzone.hide();
  //add class to target

  c.find('pg-edit img').addClass('pg-fileupload');
  c.find('pg-edit video').addClass('pg-fileupload');
  c.on("mouseenter", ".pg-fileupload", function (e) {
    var fPicker = $(this).closest('.pg-item[data-id]').find('.pg-file-picker'); // console.log('fiel-uploader-hover: ' + fPicker.attr('class'));
    //    $(this).parent().append(fPicker);

    fPicker.show();
  });
  c.on('dragover', '.pg-file-picker', function () {
    $(this).find('.drop_target').addClass('dropping');
    return false;
  });
  c.on('dragend dragleave', '.pg-file-picker', function () {
    $(this).find('.drop_target').removeClass('dropping'); //    $dropzone.hide();

    return false;
  });
  c.on('drop', '.pg-file-picker', function (e) {
    //  $dropzone.on('drop', function (e) {
    var el = $(this).find('.inputFile');
    var file = e.originalEvent.dataTransfer.files[0],
        reader = new FileReader();
    var $dropfileChanged = $(this).parent().find('.pg-fileupload').first();
    var $srcset = $dropfileChanged.attr('srcset');

    if (!file) {
      return false;
    }

    $(this).find('.drop_target').removeClass('dropping');
    $(this).find('.drop_target').addClass('dropped');
    c.find('[data-action="remove_current_image"]').removeClass('disabled');
    e.preventDefault();

    reader.onload = function (event) {
      // $dropfileChanged.attr("src", URL.createObjectURL(file));
      if (_typeof($srcset) !== ( true ? "undefined" : undefined) && $srcset !== false) {// $dropfileChanged.attr("srcset", URL.createObjectURL(file));
      }

      $dropfileChanged.load();
    };

    console.log(file);
    reader.readAsDataURL(file);
    ajaxFileUpload(el, file);
    return false;
  });
  c.on('change', '.inputFile', function (e) {
    //  $dropinput.change(function (e) {
    console.log('change triggered');
    var el = $(this);
    $(this).closest('.drop_target').addClass('dropped');
    c.find('[data-action="remove_current_image"]').removeClass('disabled');
    c.find('.image_title input').val('');
    var file = $(this).get(0).files[0],
        reader = new FileReader();
    var $dropfileChanged = $(this).parent().parent().parent().parent().find('.pg-fileupload').first();
    console.log($dropfileChanged);

    reader.onload = function (event) {
      // $dropfileChanged.attr("src", "");
      // $dropfileChanged.attr("srcset", "");
      // $dropfileChanged.attr("src", URL.createObjectURL(file));
      // $dropfileChanged.find("source").attr("src", URL.createObjectURL(file));
      if ((typeof $srcset === "undefined" ? "undefined" : _typeof($srcset)) !== ( true ? "undefined" : undefined) && $srcset !== false) {// $dropfileChanged.attr("srcset", URL.createObjectURL(file));
      }

      console.log('file: ' + URL.createObjectURL(file));
    };

    reader.readAsDataURL(file);
    ajaxFileUpload(el, file);
  });
  c.on('click', $('[data-action="remove_current_image"]'), function () {
    //  $remover.on('click', function () {
    c.find('.pg-fileupload').css('background-image', '');
    c.find('.drop_target').removeClass('dropped');
    c.find('[data-action="remove_current_image"]').addClass('disabled');
    c.find('.image_title input').val('');
  });
  c.on('blur', $('.image_title input'), function () {
    if ($(this).val() != '') {
      c.find('.drop_target').removeClass('dropped');
    }
  });
  c.on("click", ".drop_target .input_button", function (e) {
    //        e.stopPropagation();
    //        e.stopImmediatePropagation();
    //    e.preventDefault();
    console.log('file upload clicked'); //    $(this).closest('.inputFile').trigger("click");

    $(this).parent().parent().find('.inputFile').trigger("click"); //    event.preventDefault();
    //    $('.dropping .inputFile').trigger("click");
  });
  c.on("click", ".pg a", function (e) {
    e.preventDefault();
  });
} // ajax


function ajaxFileUpload(el, file) {
  field = el.attr('data-field');
  pageId = el.attr('data-id');
  pageGridId = el.closest('.pg[data-id]').attr('data-id');
  upload = file; // modified

  form_data = new FormData(); // added

  form_data.append('pageId', pageId); // added

  form_data.append('pageGridId', pageGridId); // added

  form_data.append('preview_name', upload); // added

  form_data.append('field_name', field); // added

  form_data.append('type', 'upload'); // added
  //    console.log(title);

  console.log('upload:');
  console.log(upload);
  console.log(pageId);
  console.log(pageGridId);
  console.log(field);
  var ajaxPostUrl = $('.pg-container').attr('data-admin-url');
  var pgItem = el.closest('.pg-item');
  $.ajax({
    type: 'POST',
    data: form_data,
    url: ajaxPostUrl,
    contentType: false,
    // added
    processData: false,
    // added
    success: function success(data) {
      console.log("Woo");
      console.log(data); // only needed for upload inside settings panel

      el.parent().find('.file-url').attr('data-url', data);
      el.parent().find('.file-url').val(data).trigger('change'); // END only needed for upload inside settings panel

      var $dropfileChanged = el.parents('pg-edit').find(':first-child').first();
      var $srcset = $dropfileChanged.attr('srcset');
      $dropfileChanged.attr("src", data);
      $dropfileChanged.find("source").attr("src", data);

      if (_typeof($srcset) !== ( true ? "undefined" : undefined) && $srcset !== false) {
        $dropfileChanged.attr("srcset", data);
      }

      el.closest('.pg-file-picker').removeClass('pg-file-picker-empty');
      pgItem.removeClass('pg-file-picker-empty');
    },
    error: function error(xhr, ajaxOptions, thrownError) {
      alert(xhr.responseText);
    }
  });
} //    end ajax

/***/ }),

/***/ "./main/iframe-scroll.js":
/*!*******************************!*\
  !*** ./main/iframe-scroll.js ***!
  \*******************************/
/*! exports provided: initIframeScroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initIframeScroll", function() { return initIframeScroll; });
function initIframeScroll() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var fieldTop = iframe.offset().top;
  var navHeight = $('.AdminThemeCanvas #pw-masthead').height();
  var interval;
  $('.pg-container').parent().css('height', c.find('body').outerHeight());
  $('.pg-container').parent().css('position', 'relative');
  $('.pg-container').css('position', 'sticky');
  $('.pg-container').css('top', '0');
  $('.AdminThemeCanvas .pg-container').css('top', navHeight);
  $('.AdminThemeCanvas .pg-container #pg-iframe-canvas').css('max-height', 'calc(100vh - ' + navHeight + 'px)'); //create scroll drag helper

  c.find('body').append('<pghelper class="iframe-scroll-up"></pghelper>');
  c.find('body').append('<pghelper class="iframe-scroll-down"></pghelper>'); //END create scroll drag helper

  c.find('.iframe-scroll-down').css('bottom', +$('.pg-container').offset().top - navHeight); //scroll child with parent

  $(document).on('scroll touchmove mousewheel', function (e) {
    //scroll helper for sortable
    if (!$('body.pg-dragging-add').length) {
      $('.pg-container').parent().css('height', c.find('body').outerHeight());

      if ($('.pg-container').offset().top > $(document).scrollTop() + navHeight) {
        // console.log('scroll trigger');
        c.find('.iframe-scroll-down').css('bottom', $('.pg-container').offset().top - $(document).scrollTop() - navHeight);
      } else {
        c.find('.iframe-scroll-down').css('bottom', 0);
      }

      if ($(document).scrollTop() + iframe.height() > $('.pg-container').height() + $('.pg-container').offset().top - navHeight) {
        // console.log('scroll trigger top');
        c.find('.iframe-scroll-up').css('top', $(document).scrollTop() - $('.pg-container').offset().top + navHeight);
      } else {
        c.find('.iframe-scroll-up').css('top', 0);
      }
    }

    var top = $(this).scrollTop();

    if (top < fieldTop) {
      c.scrollTop(0);
      return;
    }

    var top = $(this).scrollTop() - fieldTop;
    c.scrollTop(top);
  }); //END scroll child with parent
  //drag helper mouse events

  c.on("mousemove", ".iframe-scroll-up", function (event) {
    // console.log('hover-up');
    if ($('.pg-dragging').length && $('.pg-dragging-add').length == 0) {
      var delta = -10;
      $(document).scrollTop($(document).scrollTop() + delta);
    }
  });
  c.on("mousemove", ".iframe-scroll-down", function (event) {
    if ($('.pg-dragging').length && $('.pg-dragging-add').length == 0) {
      var delta = 10;
      $(document).scrollTop($(document).scrollTop() + delta);
    }
  });
  c.on("mouseover", ".iframe-scroll-up", function (event) {
    if ($('.pg-dragging').length && $('.pg-dragging-add').length == 0) {
      interval = setInterval(function () {
        var delta = -10;
        $(document).scrollTop($(document).scrollTop() + delta);
      }, 10);
    }
  });
  c.on("mouseover", ".iframe-scroll-down", function (event) {
    if ($('.pg-dragging').length && $('.pg-dragging-add').length == 0) {
      interval = setInterval(function () {
        var delta = 10;
        $(document).scrollTop($(document).scrollTop() + delta);
      }, 10);
    }
  });
  c.on("mouseout", ".iframe-scroll-up, .iframe-scroll-down", function (event) {
    clearInterval(interval);
  }); //END drag helper mouse events
}

/***/ }),

/***/ "./main/input-rangeslider.js":
/*!***********************************!*\
  !*** ./main/input-rangeslider.js ***!
  \***********************************/
/*! exports provided: rangeSlider, rangeSliderMulti, setAnimationkeyframes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeSlider", function() { return rangeSlider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeSliderMulti", function() { return rangeSliderMulti; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAnimationkeyframes", function() { return setAnimationkeyframes; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./save */ "./main/save.js");



function rangeSlider() {
  //single range slider with native html input
  var allRanges = document.querySelectorAll(".pg-settings .range-wrap");
  allRanges.forEach(function (wrap) {
    var range = wrap.querySelector(".range");
    var bubble = wrap.querySelector(".bubble");
    range.addEventListener("input", function () {
      setBubble(range, bubble);
    }); //        console.log('set bubble')

    setBubble(range, bubble);
    wrap.addEventListener("mouseenter", function (event) {
      setBubble(range, bubble);
    }, false);
  });

  function setBubble(range, bubble) {
    var val = range.value;
    var min = range.min ? range.min : 0;
    var max = range.max ? range.max : 100;
    var newVal = Number((val - min) * 100 / (max - min));
    var unit = bubble.getAttribute('data-unit') || '';
    bubble.innerHTML = val + unit; // Sorta magic numbers based on size of the native UI thumb

    bubble.style.left = "calc(".concat(newVal, "% + (").concat(8 - newVal * 0.15, "px))");
  } //init multi


  var allRangesMulti = document.querySelectorAll(".pg-settings .range-multi");
  allRangesMulti.forEach(function (wrap) {
    rangeSliderMulti(wrap);
  });
} // –––––––––––––––––––––––––––––––––––––––––
/// multi range with jQuery UI

function rangeSliderMulti(wrap) {
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var selectID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  // console.log('rangeSliderMulti');
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var bubble = wrap.querySelector(".bubble");
  var unit = wrap.getAttribute('data-unit') || '';
  var min = parseFloat(wrap.getAttribute('min')) || 0;
  var max = parseFloat(wrap.getAttribute('max')) || 100;
  var valStart; // console.log('ids:');
  // console.log(ids);

  if (!values.length) {
    values = [max];
    ids = ['pg-keyframe-' + Date.now()];
  }

  if ($(wrap).slider()) {
    $(wrap).slider("destroy");
  }

  $(wrap).slider({
    min: min,
    max: max,
    values: values,
    start: function start(event, ui) {
      valStart = ui.value;
      $('.pg-animation-keyframe-active').removeClass('pg-animation-keyframe-active');
      $(ui.handle).addClass('pg-animation-keyframe-active');
      $(ui.handle).attr('data-value', valStart);

      if (valStart === '100' || valStart >= 99) {
        // $(wrap).slider('disable');
        _save__WEBPACK_IMPORTED_MODULE_2__["saveData"](el, 'pg-save', 'true', 0, 0, 0);
        _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
        _settings__WEBPACK_IMPORTED_MODULE_0__["initActiveTab"]();
        event.preventDefault();
        return;
      }
    },
    slide: function slide(event, ui) {
      // set bubble
      var val = ui.value; // const newVal = Number(((val - min) * 100) / (max - min));

      if (val === '99' || val >= 99) {
        _save__WEBPACK_IMPORTED_MODULE_2__["saveData"](el, 'pg-save', 'true', 0, 0, 0);
        _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
        _settings__WEBPACK_IMPORTED_MODULE_0__["initActiveTab"]();
        event.preventDefault();
        return;
      }

      bubble.innerHTML = val + unit;
      bubble.style.left = "calc(".concat(val, "% + (").concat(8 - val * 0.15, "px))");
      $(ui.handle).attr('data-value', val);
    },
    stop: function stop(event, ui) {
      //save if value has changed
      if (valStart != ui.value) {
        _save__WEBPACK_IMPORTED_MODULE_2__["saveData"](el, 'pg-save', 'true', 0, 0, 0);
      }

      _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
      _settings__WEBPACK_IMPORTED_MODULE_0__["initActiveTab"]();
    }
  });
  var allHandlesMulti = wrap.querySelectorAll(".ui-slider-handle");
  var maximum = null;
  ids.forEach(function (id, i) {
    // const className = #wrap_Inputfield_--pg-animation;
    var handle = allHandlesMulti[i];

    if (!handle) {
      return;
    }

    handle.setAttribute('data-id', id);
    handle.setAttribute('data-value', values[i]);

    if (values[i] === 100) {
      handle.classList.add('ui-slider-handle-locked');
    }

    maximum = values[i] > maximum ? values[i] : maximum;
    handle.addEventListener("mouseenter", function (e) {
      // const value = handle.getAttribute('data-value');
      // bubble.style.left = value + '%';
      // bubble.innerHTML = value + '%';
      var value = handle.style.left;
      bubble.style.left = value;
      bubble.innerHTML = value;
      bubble.setAttribute('data-value', value);
    }, false);
  }); //add play progress bar

  $(wrap).find('.pg-animation-progress').remove();
  $(wrap).append('<div class="pg-animation-progress"></div>'); //select keyframe with maximum value if no selectID is specified

  if (selectID) {
    $('.pg-settings .Inputfield_data-animation-keyframes .ui-slider-handle[data-id="' + selectID + '"]').addClass('pg-animation-keyframe-active');
  } else {
    $('.pg-settings .Inputfield_data-animation-keyframes .ui-slider-handle[data-value="' + maximum + '"]').first().addClass('pg-animation-keyframe-active');
  } //save default selected keyframe


  _save__WEBPACK_IMPORTED_MODULE_2__["saveData"](el, 'pg-save', 'true', 0, 0, 0);
  _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
  _settings__WEBPACK_IMPORTED_MODULE_0__["initActiveTab"](); //set value on hover to be able to add more on click

  if (wrap.classList.contains('range-add')) {
    wrap.addEventListener("mousemove", function (e) {
      //if handle return
      if (e.target != wrap) {
        $(wrap).slider('enable');
        return;
      } //if wrap disable slider and click events to make add new work


      $(wrap).slider('disable');
      var bounds = wrap.getBoundingClientRect();
      var x = e.clientX - bounds.left;
      bubble.innerHTML = 'add keyframe';
      bubble.style.left = x + 'px';
    }, false);
  }
} //gets called from settings to set initial state

function setAnimationkeyframes() {
  var newValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  console.log('setAnimationkeyframes');

  if (!$('.pg-animation-active').length) {
    return;
  }

  var values = [];
  var ids = [];
  var field = $('.pg-settings .Inputfield_data-animation-keyframes .range-multi');
  var pageId = $('.pg-container').attr('data-animations-id');
  var classId = $('.pg-animation-active').attr('data-value');
  var data = $('.pg-container').data('pg')[pageId][classId];
  var newId = false; //get saved data

  if (classId !== null && data !== null && data !== undefined && classId !== undefined) {
    $.each(data, function (key, val) {
      var id = data[key]['id']; //filter out animation object

      if (id && data[key]['keyframe'] !== null && data[key]['keyframe']) {
        var value = parseFloat(data[key]['keyframe']);
        values.push(value);
        ids.push(id);
      }
    });
  } //create new item


  if (newValue && newValue !== 100) {
    newValue = parseFloat(newValue);
    newId = 'pg-keyframe-' + Date.now();
    values.push(newValue);
    ids.push(newId);
  }

  rangeSliderMulti(field[0], values, ids, newId);
} //delete keyframe

function deletekeyframe(dataId) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var globalPageId = $('.pg-container').attr('data-animations-id');
  var field = $('.pg-settings .Inputfield_data-animation-keyframes .range-multi');
  var pageName = $('.pg-animation-active').attr('data-value');
  _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["deleteData"](pageName, dataId);
  field.find('[data-id="' + dataId + '"]').remove(); // delete local keyframe

  if ($('.pg-container').data('pg')[globalPageId][pageName][dataId]) {
    delete $('.pg-container').data('pg')[globalPageId][pageName][dataId];
    c.find("style.pg-style-id-g-" + dataId).remove();
    _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
  }
} //add values to multi range


$(document).on('click', '.pg-settings .Inputfield_data-animation-keyframes .range-multi', function (e) {
  console.log('add keyframe');
  e.preventDefault();
  e.stopPropagation();
  e.stopImmediatePropagation();
  var bounds = $(this)[0].getBoundingClientRect();
  var x = e.clientX - bounds.left;
  var percent = Math.round(x * 100 / $(this).width());

  if (percent >= 98 || percent === '100') {
    $('.pg-animation-keyframe-active').removeClass('pg-animation-keyframe-active');
    $(this).find('.ui-slider-handle[data-value=100]').addClass('pg-animation-keyframe-active');
    return;
  }

  setAnimationkeyframes(percent);
}); // remove on right click

$(document).on("contextmenu", ".pg-settings .Inputfield_data-animation-keyframes .range-multi .ui-slider-handle", function (e) {
  e.preventDefault();
  if ($('.pg-settings .Inputfield_data-animation-keyframes .range-multi .ui-slider-handle').length == 1) return;
  if ($(this).attr('data-value') === '100') return;
  var active = $(this);
  var menuItems = {
    'pg-delete-keyframe': '<i class="fa fa-trash"></i>'
  };
  _settings__WEBPACK_IMPORTED_MODULE_0__["createContextMenu"](active, menuItems, e);
  return false;
});
$(document).on('click', '.pg-delete-keyframe', function (e) {
  var handle = $('.Inputfield_data-animation-keyframes .pg-context-menu-active');
  var dataId = handle.attr('data-id');
  handle.removeClass('pg-context-menu-active');
  $('.pg-context-menu').hide();
  deletekeyframe(dataId);
});

/***/ }),

/***/ "./main/item-header.js":
/*!*****************************!*\
  !*** ./main/item-header.js ***!
  \*****************************/
/*! exports provided: showHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showHeader", function() { return showHeader; });
function showHeader(el) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var offset = el.offset();
  var offsetTop = offset.top - c.scrollTop();
  var offsetLeft = offset.left;
  var elId = el.attr('data-id-original') || el.attr('data-page'); // use data-page if saving goes to block item

  var iHeader = $('.pg-item-header[data-id-original="' + elId + '"]');
  var activeId = c.find('.pg-item-active').attr('data-id-original') || c.find('.pg-item-active').attr('data-page');
  var aHeader = $('.pg-item-header[data-id-original="' + activeId + '"]');
  $('.pg-item-header').hide(); //            $('.pg-item-header.active').removeClass('active');

  c.find('.pg-item-selected').removeClass('pg-item-selected');
  el.addClass('pg-item-selected');
  iHeader.css('top', offsetTop - 25);
  iHeader.css('left', offsetLeft - 1);
  iHeader.show();
  aHeader.show();

  if ($('.pg-settings').length == 0) {
    // aHeader.addClass('active');
    iHeader.addClass('active');
  }

  if (el.hasClass('pg-locked')) {
    // iHeader.find('.pg-lock').show();
    iHeader.addClass('pg-locked');
  }

  if (el.hasClass('pg-ref') || el.parent().hasClass('pg-ref')) {
    iHeader.addClass('pg-ref');

    if (el.hasClass('pg-item-active')) {
      aHeader.addClass('pg-ref');
    }
  }
}

/***/ }),

/***/ "./main/jquery.fontpicker.js":
/*!***********************************!*\
  !*** ./main/jquery.fontpicker.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// get new font list at local dev:
// http://google-fonts.test/convertJSON.php
//JP
var iframe = $('#pg-iframe-canvas');
var c = iframe.contents();
/**
 * jQuery.fontpicker - A font picker for Google Web Fonts and local fonts.
 *
 * Made by Arjan Haverkamp, https://www.webgear.nl
 * Copyright 2020-2021 Arjan Haverkamp
 * MIT Licensed
 * @version 1.4 - 2020-02-26
 * @url https://github.com/av01d/fontpicker-jquery-plugin
 */
// Default: web safe fonts available on all platforms

var localFonts = {
  "Arial": {
    "category": "sans-serif",
    "variants": "400,400i,600,600i"
  },
  "Courier New": {
    "category": "monospace",
    "variants": "400,400i,600,600i"
  },
  "Georgia": {
    "category": "serif",
    "variants": "400,400i,600,600i"
  },
  "Tahoma": {
    "category": "sans-serif",
    "variants": "400,400i,600,600i"
  },
  "Times New Roman": {
    "category": "serif",
    "variants": "400,400i,600,600i"
  },
  "Trebuchet MS": {
    "category": "sans-serif",
    "variants": "400,400i,600,600i"
  },
  "Verdana": {
    "category": "sans-serif",
    "variants": "400,400i,600,600i"
  }
};
exports.localFonts = localFonts;

(function ($) {
  var pluginName = 'fontpicker';
  var fontsLoaded = {};
  var googleFontLangs = {
    'arabic': 'Arabic',
    'bengali': 'Bengali',
    'chinese-hongkong': 'Chinese (Hong Kong)',
    'chinese-simplified': 'Chinese (Simplified',
    'chinese-traditional': 'Chinese (Traditional)',
    'cyrillic': 'Cyrillic',
    'cyrillic-ext': 'Cyrillic Extended',
    'devanagari': 'Devanagari',
    'greek': 'Greek',
    'greek-ext': 'Greek Extended',
    'gujarati': 'Gujarati',
    'gurmukhi': 'Gurmukhi',
    'hebrew': 'Hebrew',
    'japanese': 'Japanese',
    'kannada': 'Kannada',
    'khmer': 'Khmer',
    'korean': 'Korean',
    'latin': 'Latin',
    'latin-ext': 'Latin Extended',
    'malayalam': 'Malayalam',
    'myanmar': 'Myanmar',
    'oriya': 'Oriya',
    'sinhala': 'Sinhala',
    'tamil': 'Tamil',
    'telugu': 'Telugu',
    'thai': 'Thai',
    'tibetan': 'Tibetan',
    'vietnamese': 'Vietnamese'
  };
  var googleFontCats = ['serif', 'sans-serif', 'display', 'handwriting', 'monospace']; // Object.keys(..).length for all browsers, including IE <= 11:

  function objLength(obj) {
    var nr = 0;

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        nr++;
      }
    }

    return nr;
  }

  $.fn.fontpicker = function (options) {
    var __scrollIntoViewIfNeeded = function __scrollIntoViewIfNeeded(elem) {//      var container = elem.parentElement;
      //      var rectElem = elem.getBoundingClientRect(),
      //        rectContainer = container.getBoundingClientRect();
      //      if (rectElem.bottom > rectContainer.bottom) {
      //        elem.scrollIntoView(false);
      //      }
      //      if (rectElem.top < rectContainer.top) {
      //        elem.scrollIntoView();
      //      }
    };
    /**
     * Utility function for getting/setting cookies.
     * This function stores multiple values in one single cookie: max efficiency!
     * Also: this function gets/sets cookies that PHP can also get/set (static Cookie class).
     * Cookies are valid for 365 days.
     *
     * @param {string} key Name of the value to store.
     * @param {string} value Value to store. Omit to get a cookie, provide to set a cookie.
     * @return {string} The value for a cookie (when value is omitted, of course).
     */


    var __cookie = function __cookie(key, value) {
      var cookieName = 'jqfs',
          cookieDays = 365,
          result,
          date = new Date(),
          jar = {},
          expires = '',
          x,
          pts,
          pt;
      result = (result = new RegExp('(?:^|; )' + cookieName + '=([^;]*)').exec(document.cookie)) ? decodeURIComponent(result[1]) : null;

      if (null !== result) {
        pts = result.split('||');

        for (x in pts) {
          try {
            pt = pts[x].split('|', 2);
            jar[pt[0]] = pt[1];
          } catch (e) {}
        }
      } // Get cookie:


      if (1 === arguments.length) {
        return jar[key];
      } // Set cookie


      if (null === value || false === value) {
        delete jar[key];
      } else {
        jar[key] = value;
      }

      pts = [];

      for (x in jar) {
        pts.push(x + '|' + jar[x]);
      }

      if (cookieDays > 0) {
        date.setTime(date.getTime() + cookieDays * 24 * 60 * 60 * 1000);
        expires = '; expires=' + date.toGMTString();
      }

      document.cookie = cookieName + '=' + encodeURIComponent(pts.join('||')) + '; path=/; SameSite=Lax' + expires;
    }; //load JSON file


    var __googleFonts = __webpack_require__(/*! ./../../templates/googleFonts.json */ "../templates/googleFonts.json");

    exports.__googleFonts = __googleFonts;
    var dictionaries = {
      'en': {
        'selectFont': 'Select a font',
        'search': 'Search',
        'allLangs': 'All languages',
        'favFonts': 'Favorite fonts',
        'localFonts': 'Local fonts',
        'googleFonts': 'Google fonts',
        'select': 'Select',
        'styles': 'styles',
        'sampleText': 'The quick brown fox jumps over the lazy dog.',
        'sampleTextEditable': 'Sample text, editable'
      },
      'nl': {
        'selectFont': 'Kies een lettertype',
        'search': 'Zoek',
        'allLangs': 'Alle talen',
        'favFonts': 'Favoriete lettertypen',
        'localFonts': 'Lokale lettertypen',
        'googleFonts': 'Google lettertypen',
        'select': 'Kies',
        'styles': 'stijlen',
        'sampleText': 'Wazig tv-filmpje rond chique skybox.',
        'sampleTextEditable': 'Voorbeeldtekst, bewerkbaar'
      },
      'de': {
        'selectFont': 'Schriftart wählen',
        'search': 'Suchen',
        'allLangs': 'Alle Sprachen',
        'favFonts': 'Favorisierte Schriftarten',
        'localFonts': 'Lokale Schriftarten',
        'googleFonts': 'Google Schriftarten',
        'select': 'Wählen',
        'styles': 'stile',
        'sampleText': 'Vogel Quax zwickt Johnys Pferd Bim.',
        'sampleTextEditable': 'Beispieltext, editierbar'
      },
      'es': {
        'selectFont': 'Seleccionar fuente',
        'search': 'Buscar',
        'allLangs': 'Todos los idiomas',
        'favFonts': 'Fuentes favoritas',
        'localFonts': 'Fuentes locales',
        'googleFonts': 'Fuentes de Google',
        'select': 'Seleccionar',
        'styles': 'estilos',
        'sampleText': 'La cigüeña tocaba cada vez mejor el saxofón y el búho pedía kiwi y queso',
        'sampleTextEditable': 'Texto de ejemplo, editable'
      }
    };
    var settings = {
      lang: 'en',
      // Interface language
      variants: true,
      // Whether or not to show font variants
      nrRecents: 3,
      // How many recently picked fonts to remember (shown in 'Favorite fonts' section)
      lazyLoad: true,
      // Whether or not to lazy load fonts
      debug: false,
      // Debugging shows some useful info in console
      localFontsUrl: '/fonts/',
      // Where .woff files (for local fonts) reside
      parentElement: 'body',
      // What element to attach the Fontpicker to
      localFonts: localFonts
    }; //    exports.localFonts = settings.localFonts;
    // End settings

    var Fontpicker = function () {
      //JP Iframe 
      var iframe = $('#pg-iframe-canvas');
      var c = iframe.contents();

      function Fontpicker(original, options) {
        if (options.googleFonts && Array.isArray(options.googleFonts)) {
          // User supplied an array of Google fonts.
          var googleFonts = {},
              fontFamily;

          for (var f = 0; f < options.googleFonts.length; f++) {
            fontFamily = options.googleFonts[f];
            googleFonts[fontFamily] = __googleFonts[fontFamily];
          }

          options.googleFonts = googleFonts;
        } else if (false !== options.googleFonts) {
          // If user did not supply a subset of Google Fonts, list them all
          options.googleFonts = __googleFonts;
        }

        if (!options.localFonts) {
          options.localFonts = [];
        }

        if (!dictionaries[options.lang]) {
          options.lang = 'en';
        }

        this.dictionary = dictionaries[options.lang];
        this.allFonts = {
          'google': options.googleFonts,
          'local': options.localFonts
        };
        this.options = options;
        this.$original = $(original);
        this.setupHtml();
        this.bindEvents();
      }

      Fontpicker.prototype = {
        /**
         * Load font, either from Google or from local url.
         *
         * @param {string} type Font type, either 'google' or 'local'.
         * @param {string} font Font family name. F.e: 'Chakra', 'Zilla Slab'.
         */
        loadFont: function loadFont(type, font) {
          if (fontsLoaded[font]) {
            return;
          }

          fontsLoaded[font] = true;

          switch (type) {
            case 'google':
              var url = 'https://fonts.googleapis.com/css?family=' + font.replace(/ /g, '+') + ':' + this.options.googleFonts[font].variants + '&display=swap';
              this.options.debug && console.log('Loading Google font ' + font + ' from ' + url);
              c.find('head').append($('<link>', {
                href: url,
                rel: 'stylesheet',
                type: 'text/css'
              }));
              $('head').append($('<link>', {
                href: url,
                rel: 'stylesheet',
                type: 'text/css'
              }));
              break;

            case 'local':
              this.options.debug && console.log('Loading local font ' + font);
              c.find('head').append("<style> @font-face { font-family:'" + font + "'; src:local('" + font + "'), url('" + this.options.localFontsUrl + font + ".woff'); } </style>");
              $('head').append("<style> @font-face { font-family:'" + font + "'; src:local('" + font + "'), url('" + this.options.localFontsUrl + font + ".woff'); } </style>");
              c.find('head').append("<style> @font-face { font-family:'" + font + "'; src:local('" + font + "'), url('" + this.options.localFontsUrl + font + ".woff2'); } </style>");
              $('head').append("<style> @font-face { font-family:'" + font + "'; src:local('" + font + "'), url('" + this.options.localFontsUrl + font + ".woff2'); } </style>");
              break;
          }
        },

        /**
         * Show an (editable) font sample.
         *
         * @param {object} $li jQuery list object to extract font spec from (stored in data attributes).
         */
        showSample: function showSample($li) {
          $('.fp-sample', this.$element).css({
            fontFamily: "'" + $li.data('font-family') + "'",
            fontStyle: $li.data('font-italic') ? 'italic' : 'normal',
            fontWeight: $li.data('font-weight') || 400
          });
        },

        /**
         * Handle key presses.
         *
         * @param {object} e Event.
         * @param {object} el Element that received the event.
         */
        keyDown: function keyDown(e, el) {
          function stop(e) {
            e.preventDefault();
            e.stopPropagation();
          }

          var $activeLi = $('li.fp-active:visible', this.$results);

          if (e.keyCode >= 49 && e.keyCode <= 57 || e.keyCode >= 97 && e.keyCode <= 105) {
            // Numbers 1-9
            stop(e);
            var fw = 100 * (e.keyCode - (e.keyCode >= 97 ? 96 : 48));
            $('.fp-pill[data-font-weight=' + fw + ']', $activeLi).trigger('click');
            return;
          }

          switch (e.keyCode) {
            case 73:
              // i, italic
              stop(e);
              $('.fp-pill.italic:visible', $activeLi).trigger('click');
              break;

            case 38:
              // Cursor up
              stop(e);
              $prevLi = $activeLi.prevAll(':not(.fp-divider):visible:first');

              if ($prevLi.length == 0) {
                $prevLi = $('li:not(.fp-divider):visible:last', this.$results);
              }

              $prevLi.trigger('mouseenter').trigger('click');

              __scrollIntoViewIfNeeded($prevLi[0]);

              break;

            case 40:
              // Cursor down
              stop(e);
              $nextLi = $activeLi.nextAll(':not(.fp-divider):visible:first');

              if ($nextLi.length == 0) {
                $nextLi = $('li:not(.fp-divider):visible:first', this.$results);
              }

              $nextLi.trigger('mouseenter').trigger('click');

              __scrollIntoViewIfNeeded($nextLi[0]);

              break;

            case 13:
              // Enter
              stop(e);
              $('li.fp-active', this.$results).find('button.apply').trigger('click');
              break;

            case 27:
              // Esc
              stop(e);
              $('.fp-close', this.$modal).trigger('click');
              break;
          }
        },

        /**
         * Handle mouse enter events on items in the font list.
         *
         * @param {object} e Event.
         * @param {object} el Element that received the event.
         */
        mouseEnter: function mouseEnter(e, el) {
          var $li = $(el);
          $('li.fp-hover', this.$results).removeClass('fp-hover');
          $li.addClass('fp-hover');
          this.loadFont($li.data('font-type'), $li.data('font-family'));
          this.showSample($li);
        },

        /**
         * Handle clicks on items in the font list.
         * @param {object} e Event.
         * @param {object} el Element that received the event.
         */
        click: function click(e, el) {
          var $li = $(el),
              self = this,
              fontType = $li.data('font-type'),
              fontFamily = $li.data('font-family'),
              italic = $li.data('font-italic') || false,
              weight = $li.data('font-weight') || 400,
              $lis = $("li[data-font-family='" + fontFamily + "']", this.$results),
              favorites = __cookie('favs'),
              favoriteFonts = favorites ? favorites.split(',') : [];

          $('li.fp-active', this.$results).removeClass('fp-active').find('.fp-variants,.fp-btns').remove();
          $li.addClass('fp-active');
          var $btns = $('<div class="fp-btns">'),
              isFav = favoriteFonts.indexOf(fontType + ':' + fontFamily) != -1;
          $btns.append($('<span class="fp-favorite' + (isFav ? ' checked' : '') + '"></span>').on('click', function (e) {
            e.stopPropagation();
            var idx = favoriteFonts.indexOf(fontType + ':' + fontFamily);

            if ($(this).is('.checked')) {
              // Remove from favorites
              if (idx != -1) {
                favoriteFonts.splice(idx, 1);
              }
            } else {
              // Add to favorites
              if (-1 == idx) {
                favoriteFonts.push(fontType + ':' + fontFamily);
              }
            }

            $(this).toggleClass('checked');

            __cookie('favs', favoriteFonts.join(','));
          }), $('<button type="button" class="fp-btn apply">').html(this.dictionary['select']).on('click', function (e) {
            e.stopPropagation();
            italic = $li.data('font-italic');
            weight = $li.data('font-weight') || 400;
            var value = fontFamily;

            if (self.options.variants) {//                value += ':' + weight + (italic ? 'i' : '');
            }

            self.$select.css({
              fontFamily: "'" + fontFamily + "'",
              fontStyle: italic ? 'italic' : 'normal',
              fontWeight: weight
            }).find('.fp-fontspec').html(value);
            self.$original.val(value).change(); // Update original <input> element
            // Call onSelect callback, if specified

            if (!!self.options.onSelect) {
              self.options.onSelect({
                fontType: fontType,
                fontFamily: fontFamily,
                fontStyle: italic ? 'italic' : 'normal',
                fontWeight: weight,
                fontSpec: value
              });
            }

            self.toggleModal('hide'); // Save recent

            if (!!self.options.nrRecents) {
              var recentFonts = __cookie('recents'),
                  cookieVal = $li.data('font-type') + ':' + fontFamily;

              recentFonts = recentFonts ? recentFonts.split(',') : [];

              if (recentFonts.indexOf(cookieVal) == -1) {
                recentFonts.unshift(cookieVal);
              }

              recentFonts = recentFonts.slice(0, self.options.nrRecents); // Remember last X

              __cookie('recents', recentFonts.join(','));
            }
          }));
          $btns.appendTo($li);
          var font = this.allFonts[fontType][fontFamily],
              variants = font.variants ? font.variants.split(',') : [];

          if (this.options.variants && variants.length > 1) {
            var $variants = $('<div class="fp-variants">'),
                hasItalic = false;

            var _loop = function _loop() {
              if (/i$/.test(variants[v])) {
                if (!hasItalic) {
                  hasItalic = true;
                }

                return "continue";
              }

              var variant = variants[v],
                  fontWeight = +variant.replace(/i$/, '');
              v > 0 && $variants.append(' '); // Separate by space

              $('<span data-font-weight="' + fontWeight + '" class="fp-pill weight' + (weight == fontWeight ? ' checked' : '') + '">').text(variant).on('click', function (e) {
                e.stopPropagation();

                if (variants.indexOf(fontWeight + 'i') == -1) {
                  // This font weight does not have an italic variant
                  $('.fp-pill.italic', $li).removeClass('checked').css('display', 'none');
                  italic = false;
                  $li.data('font-italic', italic);
                } else {
                  // This font weight does have an italic variant
                  $('.fp-pill.italic', $li).css('display', '');
                }

                $('span.fp-pill.weight', $li).removeClass('checked');
                $(this).addClass('checked');
                $lis.data('font-weight', fontWeight); // Set for favorite and normal

                self.showSample($li);
              }).appendTo($variants);
            };

            for (var v = 0; v < variants.length; v++) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }

            if (hasItalic) {
              $variants.append(' ');
              $('<span class="fp-pill italic ' + (italic ? ' checked' : '') + '">').css('display', variants.indexOf(weight + 'i') == -1 ? 'none' : '').html('italic').on('click', function (e) {
                e.stopPropagation();
                italic = !italic;
                $(this).toggleClass('checked');
                $lis.data('font-italic', italic); // Set for favorite and normal

                self.showSample($li);
              }).appendTo($variants);
            }

            $li.append($variants);
          } else if (variants.length == 1 && /i$/.test(variants[0])) {
            $lis.data('font-italic', true);
          }
        },

        /**
         * Turn a font spec (Arial:700i, Canga:400) into its components: family, weight and italic.
         *
         * @param {string} fontSpec The font specification to split into components.
         * @return {object} An object containing 3 items: family (string), weight (int) and italic (bool).
         */
        fontSpecToComponents: function fontSpecToComponents(fontSpec) {
          var tmp = fontSpec.split(':'),
              family = tmp[0],
              variant = tmp[1] || '400',
              italic = false,
              weight = 400;

          if (/(\d+)i$/.test(variant)) {
            italic = true;
            weight = +RegExp.$1;
          } else {
            weight = +variant;
          }

          return {
            family: family,
            weight: weight,
            italic: italic
          };
        },

        /**
         * Style the original input element with a font.
         *
         * @param {string} fontSpec The font specification, f.e: 'Changa:400i' or 'Arial'.
         */
        applyFontToOriginalInput: function applyFontToOriginalInput(fontSpec) {
          if ('' === fontSpec) {
            this.$select.removeAttr('style').find('.fp-fontspec').html(this.dictionary['selectFont']);
            this.$original.val('');
            return;
          }

          var font = this.fontSpecToComponents(fontSpec);
          this.loadFont(this.options.googleFonts !== false && __googleFonts[font.family] ? 'google' : 'local', font.family);
          this.$select.css({
            fontFamily: "'" + font.family + "'",
            fontStyle: font.italic ? 'italic' : 'normal',
            fontWeight: font.weight
          }).find('.fp-fontspec').html(font.family);
        },

        /**
         * Bind all events.
         */
        bindEvents: function bindEvents() {
          var self = this;
          this.$results.on('keydown', function (e) {
            self.keyDown(e, this);
          }).on('mouseenter', 'li:not(.fp-divider):visible', function (e) {
            self.mouseEnter(e, this);
          }).on('click', 'li:not(.fp-divider):visible', function (e) {
            self.click(e, this);
          }).on('dblclick', 'li:not(.fp-divider):visible', function (e) {
            $('li.fp-active', this.$results).find('button.apply').trigger('click');
          });
          this.$original.on('change', function (e) {
            self.applyFontToOriginalInput(this.value);
          });
        },

        /**
         * Automatically load fonts as they come in to view.
         */
        lazyLoad: function lazyLoad() {
          if (!window.IntersectionObserver) {
            return;
          }

          var self = this,
              $li;
          var observer = new IntersectionObserver(function (lis) {
            [].forEach.call(lis, function (li) {
              if (li.intersectionRatio > 0) {
                observer.unobserve(li.target); // Load only once per li

                $li = $(li.target);
                self.loadFont($li.data('font-type'), $li.data('font-family'));
                $li.css('fontFamily', "'" + $li.data('font-family') + "'");
              }
            });
          });
          $('li:not(.fp-divider)', this.$results).each(function () {
            observer.observe(this);
          });
        },

        /**
         * Show or hide the fontpicker modal window.
         *
         * @param {string} state Either 'hide' or 'show'. When omitted visibility of the modal is toggled.
         */
        toggleModal: function toggleModal(state) {
          if (!state) {
            state = this.$modal.is(':visible') ? 'hide' : 'show';
          }

          if ('hide' == state) {
            // Hide modal
            $('.fp-fav,.fp-variants,.fp-btns').remove();
            this.$modal.css('display', 'none');
            $('.fp-modal-backdrop', this.$element).remove();
            $(this.options.parentElement).removeClass('fp-modal-open');
            $('span', this.$select).focus();
          } else {
            // Show modal
            $(this.options.parentElement).addClass('fp-modal-open');
            this.$element.append($('<div class="fp-modal-backdrop">').on('click', function () {
              // Click outside modal window closes the modal
              $('.fp-close', this.$modal).trigger('click');
            }));
            this.$modal.css('display', 'flex');
            this.getFavorites(); // List favorites & recents

            var fontSpec = this.$original.val();

            if (fontSpec) {
              var font = this.fontSpecToComponents(fontSpec),
                  $li = $("li[data-font-family='" + font.family + "']", this.$results); // Either 0, 1 or 2 elements

              if ($li.length > 0) {
                $li.data({
                  'font-italic': font.italic,
                  'font-weight': font.weight
                }).eq(0).trigger('click');

                __scrollIntoViewIfNeeded($li[0]);
              }
            } else {
              this.$results.scrollTop(0);
            }

            this.options.lazyLoad && this.lazyLoad();
            this.$results.focus(); // Make keyboard work
          }
        },

        /**
         * Apply user filters to font list: language, categories and search term.
         */
        applyFilter: function applyFilter() {
          var lang = this.$lang.val(),
              searchTerm = this.$search.val().trim(),
              cats = [];
          $('.fp-category', this.$filter).each(function () {
            if ($(this).hasClass('checked')) {
              cats.push($(this).data('category'));
            }
          }); // Remember lang and cats

          __cookie('lang', '' === lang ? false : lang);

          __cookie('cats', cats.join(','));

          console.log('searchTerm' + searchTerm); // Hide options that don't match query:

          $('.fp-results li', self.$results).each(function () {
            if ($(this).text().toLowerCase().indexOf(searchTerm) == -1) {
              $(this).hide();
            } else {
              $(this).show();
            }
          }); //          for (var c in this.allFonts) {
          //            for (var f in this.allFonts[c]) {
          //              var item = this.allFonts[c][f],
          //                langs = item.subsets ? item.subsets.split(',') : [],
          //                $li = $("li[data-font-family='" + f + "']", this.$results),
          //                cat = item.category || 'other';
          //
          //              if (('' == lang || langs.indexOf(lang) != -1) &&
          //                (cats.indexOf(cat) != -1) &&
          //                ('' == searchTerm || f.toLowerCase().indexOf(searchTerm.toLowerCase()) != -1)) {
          //                $li.show();
          //              } else {
          //                $li.hide();
          //              }
          //            }
          //          }
        },

        /**
         * Construct filter UI.
         */
        getFilterUI: function getFilterUI() {
          var self = this,
              $searchWrap = $('<div class="fp-search-wrap">');
          this.$filter = $('<div class="fp-filter">'); // Search input

          this.$search = $('<input>', {
            'class': 'fp-search',
            type: 'text',
            placeholder: this.dictionary['search'],
            spellcheck: false
          }).on('keyup', function () {
            self.applyFilter();
          }).appendTo($searchWrap); // Clear button

          $('<div class="fp-clear">').on('click', function () {
            self.$search.val('').focus();
            self.applyFilter();
          }).appendTo($searchWrap); // Language pulldown

          var opts = ['<option value="">' + this.dictionary['allLangs'] + '</option>'];

          for (var l in googleFontLangs) {
            opts.push('<option value="' + l + '">' + googleFontLangs[l] + '</option>');
          }

          this.$lang = $('<select class="fp-lang">').on('change', function () {
            self.applyFilter();
          }).html(opts.join(''));
          this.$filter.append($('<div class="fp-row">').append($searchWrap, this.$lang));
          $('<div class="hr">').appendTo(this.$filter);
          var gFontCats = googleFontCats.slice(0); // Clone

          gFontCats.push('other');

          for (var g = 0; g < gFontCats.length; g++) {
            $('<span class="fp-category fp-pill checked">').data('category', gFontCats[g]).text(gFontCats[g]).on('click', function () {
              $(this).toggleClass('checked');
              self.applyFilter();
            }).appendTo(this.$filter);
          }
        },

        /**
         * Construct font list.
         */
        getFontsList: function getFontsList() {
          var self = this,
              $frag = $(document.createDocumentFragment()),
              // Use a document fragment to increase performance
          $li,
              fontFamily;

          function append(fontType, fontFamily) {
            var font = self.allFonts[fontType][fontFamily],
                small = '';

            if (font.category || font.variants) {
              var items = [];

              if (font.category) {//                items.push(font.category);
              }

              if (self.options.variants && font.variants) {
                var nr = font.variants.split(',').length;

                if (nr > 1) {
                  items.push(nr + ' ' + self.dictionary['styles']);
                }
              }

              small = ' <small>' + items.join(', ') + '</small>';
            }

            $li = $('<li>', {
              'data-font-type': fontType,
              'data-font-family': fontFamily
            }).html(fontFamily + small);
            $frag.append($li[0]);
          } // Local fonts


          if (objLength(this.options.localFonts) > 0) {
            $li = $('<li class="fp-divider">' + this.dictionary['localFonts'] + '</li>');
            $frag.append($li[0]);

            for (fontFamily in this.options.localFonts) {
              append('local', fontFamily);
            }
          } // Google fonts


          if (objLength(this.options.googleFonts) > 0) {
            $li = $('<li class="fp-divider">' + this.dictionary['googleFonts'] + '</li>');
            $frag.append($li[0]);

            for (fontFamily in this.options.googleFonts) {
              append('google', fontFamily);
            }
          }

          this.$results = $('<ul>', {
            'class': 'fp-results',
            tabindex: 0
          }).append($frag);
        },

        /**
         * Construct list of favorited and recently picked fonts
         */
        getFavorites: function getFavorites() {
          var favoriteFonts = __cookie('favs'),
              recentFonts = __cookie('recents');

          favoriteFonts = favoriteFonts ? favoriteFonts.split(',') : [];
          recentFonts = !!this.options.nrRecents && recentFonts ? recentFonts.split(',') : []; // Dedupe:

          var fonts = recentFonts.slice(0);

          for (var f = 0; f < favoriteFonts.length; f++) {
            if (fonts.indexOf(favoriteFonts[f]) == -1) {
              fonts.push(favoriteFonts[f]);
            }
          }

          var $frag = $(document.createDocumentFragment()),
              $li = null,
              $orgLi,
              tmp;

          for (var f = 0; f < fonts.length; f++) {
            tmp = fonts[f].split(':'), fontType = tmp[0], fontFamily = tmp[1], font = this.allFonts[fontType][fontFamily];

            if (!font) {
              continue;
            }

            $orgLi = $("[data-font-family='" + fontFamily + "']", this.$results);

            if ($orgLi.length > 0) {
              $li = $orgLi.clone().addClass('fp-fav');
              $frag.append($li[0]);
            }
          }

          if (null !== $li) {
            $frag.prepend($('<li class="fp-fav fp-divider">' + this.dictionary['favFonts'] + '</li>')[0]);
            this.$results.prepend($frag);
          }
        },

        /**
         * Setup HTML structure for the font picker.
         */
        setupHtml: function setupHtml() {
          var self = this,
              fontSpec = this.$original.val();
          this.$original.hide();
          this.$select = $('<div class="font-picker fp-select">').on('click', function () {
            self.toggleModal('show');
          }).on('keydown', function (e) {
            // Open the modal with spacebar
            if (e.keyCode == 32) {
              e.stopPropagation();
              e.preventDefault();
              self.toggleModal('show');
            }
          }).append('<span class="fp-fontspec" tabindex="0">' + (fontSpec ? fontSpec : this.dictionary['selectFont']) + '</span>');

          if (!!self.options.showClear) {
            // Add a clear button
            self.$select.append($('<span class="fp-clear"></span>').on('click', function (e) {
              e.stopPropagation();
              self.$select.removeAttr('style').find('.fp-fontspec').html(self.dictionary['selectFont']);
              ;
              self.$original.val('').change(); // Update original <input> element
            }));
          }

          this.$original.after(this.$select);
          this.$element = $('<div>', {
            'class': 'font-picker'
          });
          this.$modal = $('<div class="fp-modal">').appendTo(this.$element);
          this.$modal.append($('<div class="fp-header">').append($('<div class="fp-icons">').append($('<span class="fp-close">&times</span>').on('click', function () {
            self.toggleModal('hide');
          })), $('<h5>').text(this.dictionary['selectFont'])));
          this.getFilterUI();
          this.$modal.append(this.$filter);
          this.$sample = $('<div>', {
            'class': 'fp-sample',
            contenteditable: true,
            spellcheck: false,
            title: this.dictionary['sampleTextEditable']
          }).html(this.dictionary['sampleText']).appendTo(this.$modal);
          this.getFontsList();
          this.$modal.append(this.$results);

          var lang = __cookie('lang'),
              cats = __cookie('cats');

          if (lang) {
            this.$lang.val(lang);
          }

          if (cats) {
            cats = cats.split(',');
            $('.fp-category', this.$filter).each(function () {
              if (-1 == cats.indexOf($(this).data('category'))) {
                $(this).removeClass('checked');
              } else {
                $(this).addClass('checked');
              }
            });
          }

          if (lang || cats) {
            self.applyFilter();
          }

          fontSpec && self.applyFontToOriginalInput(fontSpec);
          $(this.options.parentElement).append(this.$element);
        },
        //
        // Public Methods, via $element.fontpicker(method)
        //

        /**
         * Show the fontpicker.
         */
        show: function show() {
          var el = $(this).data('plugin_' + pluginName);

          if (!el.$select) {
            throw new Error('jquery.' + pluginName + ': Cannot show, as I\'ve been destroyed.');
          }

          el.toggleModal('show');
        },

        /**
         * Hide the fontpicker.
         */
        hide: function hide() {
          var el = $(this).data('plugin_' + pluginName);

          if (!el.$select) {
            throw new Error('jquery.' + pluginName + ': Cannot hide, as I\'ve been destroyed.');
          }

          el.toggleModal('hide');
        },

        /**
         * Destroy the fontpicker plugin, revert element back to original.
         */
        destroy: function destroy() {
          var el = $(this).data('plugin_' + pluginName);

          if (!el.$select) {
            throw new Error('jquery.' + pluginName + ': Cannot destroy, as I\'ve been destroyed already.');
          }

          el.toggleModal('hide');
          el.$select.remove();
          el.$element.remove();
          el.$original.off('setFont');
          el.$original.show();
          el.$select = el.$element = el.$original = el.$modal = null;
          $(el).removeData('plugin_' + pluginName);
        }
      }; // End prototype

      return Fontpicker;
    }();

    if (typeof arguments[0] === 'string') {
      var methodName = arguments[0],
          args = Array.prototype.slice.call(arguments, 1),
          returnVal;
      this.each(function () {
        if ($.data(this, 'plugin_' + pluginName) && typeof $.data(this, 'plugin_' + pluginName)[methodName] === 'function') {
          returnVal = $.data(this, 'plugin_' + pluginName)[methodName].apply(this, args);
        } else {
          throw new Error('jquery.' + pluginName + ': Method ' + methodName + ' does not exist.');
        }
      });
      return returnVal !== undefined ? returnVal : this; // Preserve chainablility
    }

    return this.each(function () {
      if (!$.data(this, 'plugin_' + pluginName)) {
        // If options exist, merge them
        options && $.extend(settings, options);
        $.data(this, 'plugin_' + pluginName, new Fontpicker(this, settings));
      }
    });
  };
})(jQuery);

/***/ }),

/***/ "./main/jquery.ui.touch-punch.min.js":
/*!*******************************************!*\
  !*** ./main/jquery.ui.touch-punch.min.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
!function (a) {
  function f(a, b) {
    if (!(a.originalEvent.touches.length > 1)) {
      a.preventDefault();
      var c = a.originalEvent.changedTouches[0],
          d = document.createEvent("MouseEvents");
      d.initMouseEvent(b, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), a.target.dispatchEvent(d);
    }
  }

  if (a.support.touch = "ontouchend" in document, a.support.touch) {
    var e,
        b = a.ui.mouse.prototype,
        c = b._mouseInit,
        d = b._mouseDestroy;
    b._touchStart = function (a) {
      var b = this;
      !e && b._mouseCapture(a.originalEvent.changedTouches[0]) && (e = !0, b._touchMoved = !1, f(a, "mouseover"), f(a, "mousemove"), f(a, "mousedown"));
    }, b._touchMove = function (a) {
      e && (this._touchMoved = !0, f(a, "mousemove"));
    }, b._touchEnd = function (a) {
      e && (f(a, "mouseup"), f(a, "mouseout"), this._touchMoved || f(a, "click"), e = !1);
    }, b._mouseInit = function () {
      var b = this;
      b.element.bind({
        touchstart: a.proxy(b, "_touchStart"),
        touchmove: a.proxy(b, "_touchMove"),
        touchend: a.proxy(b, "_touchEnd")
      }), c.call(b);
    }, b._mouseDestroy = function () {
      var b = this;
      b.element.unbind({
        touchstart: a.proxy(b, "_touchStart"),
        touchmove: a.proxy(b, "_touchMove"),
        touchend: a.proxy(b, "_touchEnd")
      }), d.call(b);
    };
  }
}(jQuery);

/***/ }),

/***/ "./main/main.js":
/*!**********************!*\
  !*** ./main/main.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _InputfieldPageTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputfieldPageTable */ "./main/InputfieldPageTable.js");
/* harmony import */ var _resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resize-observer-polyfill */ "./main/resize-observer-polyfill.js");
/* harmony import */ var _resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jquery_ui_touch_punch_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jquery.ui.touch-punch.min */ "./main/jquery.ui.touch-punch.min.js");
/* harmony import */ var _jquery_ui_touch_punch_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jquery_ui_touch_punch_min__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _drag_resize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./drag-resize */ "./main/drag-resize.js");
/* harmony import */ var _add_item__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./add-item */ "./main/add-item.js");
/* harmony import */ var _iframe_scroll__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./iframe-scroll */ "./main/iframe-scroll.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _nearest_element__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nearest-element */ "./main/nearest-element.js");
/* harmony import */ var _nearest_element__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_nearest_element__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _dom_list__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-list */ "./main/dom-list.js");
/* harmony import */ var _dom_navigator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-navigator */ "./main/dom-navigator.js");
/* harmony import */ var _file_uploader__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./file_uploader */ "./main/file_uploader.js");
/* harmony import */ var _file_uploader__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_file_uploader__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./jquery.fontpicker */ "./main/jquery.fontpicker.js");
/* harmony import */ var _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_jquery_fontpicker__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _undo_redo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./undo-redo */ "./main/undo-redo.js");
/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shortcuts */ "./main/shortcuts.js");
/* harmony import */ var _input_rangeslider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./input-rangeslider */ "./main/input-rangeslider.js");
/* harmony import */ var _item_header__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./item-header */ "./main/item-header.js");
/* harmony import */ var _editSymbols__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./editSymbols */ "./main/editSymbols.js");
/* harmony import */ var _ajaxSave__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ajaxSave */ "./main/ajaxSave.js");
/* harmony import */ var _colorContrast__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./colorContrast */ "./main/colorContrast.js");
/* harmony import */ var _uiFixes__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./uiFixes */ "./main/uiFixes.js");
/* harmony import */ var _uiFixes__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_uiFixes__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tabs */ "./main/tabs.js");
// Opt-in to Webpack hot module replacement
//if (module.hot) module.hot.accept();
//load jquery ui externaly
// import * as jqueryUi from './jquery-ui';
























 // prevent jQuery .css() method from automatically adding the px unit
//https://api.jquery.com/jQuery.cssNumber/

jQuery.cssNumber.gridColumnStart = true;
jQuery.cssNumber.gridColumnEnd = true;
jQuery.cssNumber.gridRowStart = true; // END prevent jQuery .css() method from automatically adding the px unit
//main init

$(document).ready(function () {
  console.log('Loading jQuery: ' + $.fn.jquery); // console.log('jQUery UI: ' + jQuery.ui.version);
  //return in inside modal

  if ($('body').hasClass('modal')) return; //set loading icon
  // $('.pg-container').append('<div class="pg-loading"><div class="fa fa-spin fa-spinner fa-fw"></div></div>');
  //init seletizize

  if ($('.pg-settings-container .InputfieldTextTags').length) {
    InputfieldTextTags('.pg-settings-container .InputfieldTextTags');
  } //init blueprint nav


  _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["initBlueprintNav"](); //append settings container to body

  $('.pg-settings-container').appendTo('body');
  $('.pg-settings-container').prepend('<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix"><span class="ui-dialog-title">Item</span><button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only ui-dialog-titlebar-close" role="button" aria-disabled="false" title="close" style="padding-top: 0px;"><i class="fa fa-times"></i><span class="ui-button-text">close</span></button></div>');
  _input_rangeslider__WEBPACK_IMPORTED_MODULE_18__["rangeSlider"]();
  $(document).on("mousemove", "html, body", function (e) {
    if (!$('.pg-item-list-menu-active').length) {
      $('.pg-item-header').hide();
    }
  }); // delete marked items

  $(".pg-wraper-delete-marked").appendTo('body');
  $('<button class="pg-button-delete-marked-cancel ui-button ui-widget ui-corner-all ui-state-default ui-priority-secondary" type="button"><span class="ui-button-text"><i class="fa fa-times fa-fw"></i> Cancel</span></button>').appendTo('.pg-wraper-delete-marked');
  $(document).on("click", ".pg-button-delete-marked", function (e) {
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents(); // remove marked items

    c.find('.pg-item.pg-delete').each(function (e) {
      var el = $(this);
      var elParent = $(this).parent();
      var itemID = el.attr('data-id-original') || el.attr('data-id'); // console.log('delet ID: ' + itemID);

      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["removeItem"](itemID);
      el.remove();
      _overlay__WEBPACK_IMPORTED_MODULE_7__["overlay"](elParent);

      if (el.hasClass('pg-item-active')) {
        $('.pg-stylepanel .ui-dialog-titlebar-close').trigger('click');
      }
    });
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["checkIfEmpty"]();
    $('body:not(.hideSaveButton) #wrap_submit_save, body:not(.hideSaveButton) #wrap_submit_save_unpublished').show();
    $(".pg-wraper-delete-marked").hide();
  }); //cancel delete

  $(document).on("click", ".pg-button-delete-marked-cancel", function (e) {
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents();
    $('.pg-item-header').removeClass('pg-delete');
    c.find('.pg-item.pg-delete').removeClass('pg-delete');
    $(".pg-wraper-delete-marked").hide();
    $('body:not(.hideSaveButton) #wrap_submit_save, body:not(.hideSaveButton) #wrap_submit_save_unpublished').show();
  });
  $('.pw-masthead .uk-navbar-container .uk-navbar-left').after($('.pg-topnav'));
  $('.AdminThemeDefault #PageEditTabs').append($('.pg-topnav'));
  $('.AdminThemeMinimal #masthead').append($('.pg-topnav'));
  $('.pg .pg').addClass('pg-nested');
  $(document).on('click', '.createItem', _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["createItem"]); //    $(document).on('click', '.pg-edit', grid.InputfieldPageGridDialog);

  $(document).on("click", ".pg-edit", function (e) {
    var el = $(this);
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents();
    var elId = el.parent().attr('data-id-original') || el.parent().attr('data-id');
    c.find('.pg-item[data-id-original=' + elId + ']').addClass('pg-item-active');
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["busyDialogTrue"](); //hide style panel

    $('.pg-settings-active.pg-stylepanel').removeClass('pg-settings-active'); //update header position

    setTimeout(function () {
      if (c.find('.pg-item-active').length) {
        _item_header__WEBPACK_IMPORTED_MODULE_19__["showHeader"](c.find('.pg-item-active'));
      }
    }, 600);
  });
  $(document).on('click', '.pg-clone', function (e) {
    e.preventDefault();
    e.stopPropagation(); //make sure not to clone symbol, so use data-id-original

    var pageId = $(this).parent('.pg-item-header').attr('data-id-original') || $(this).parent('.pg-item-header').attr('data-id');
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["cloneItem"](pageId);
  });
  $(document).on('click', '.pg-lock', function (e) {
    e.preventDefault();
    e.stopPropagation();
    var pageId = $(this).parent('.pg-item-header').attr('data-id');
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["lockItem"](pageId);
  });
  $(document).on("click", ".pg-symbol", function (e) {
    e.preventDefault();
    e.stopPropagation();
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents();
    var pageId = $(this).parent('.pg-item-header').attr('data-id');
    var name = c.find('[data-id="' + pageId + '"]').attr('data-template') || 'Symbol';
    name = name.replace('pg_', '');
    name = name.replace('_', '-');
    name = 'symbol-' + name;

    if ($(this).parent().hasClass('pg-symbol')) {
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["convertSymbol"](pageId, name);
      return;
    }

    $(".pg-dialog").remove();
    $("body").append('<div id="pg-dialog-symbol" class="pg-dialog"><label class="uk-form-label">Symbol Name</label><br /><input type="text" pattern="[a-zA-Z]+" class="uk-input" value="' + name + '"></div>');
    $("#pg-dialog-symbol").dialog({
      title: "Create Symbol",
      width: 450,
      modal: true,
      buttons: [{
        text: "Cancel",
        class: "ui-priority-secondary",
        click: function click() {
          $(this).dialog("close");
        }
      }, {
        text: "Save",
        click: function click() {
          name = $(this).find('input').val();
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["convertSymbol"](pageId, name);
          $(this).dialog("close");
        }
      }]
    });
  });
  $(document).on("contextmenu", ".pg-add-symbol", function (e) {
    e.preventDefault();
    var active = $(this);
    var menuItems = {
      'pg-delete-symbol': 'delete symbol'
    };
    _settings__WEBPACK_IMPORTED_MODULE_10__["createContextMenu"](active, menuItems, e);
    return false;
  }); //start

  $(document).on('click', '.pg-delete-symbol', function (e) {
    var symbolName = $('.pg-context-menu-active .pg-symbol-title').text();
    var symbolCount = $('.pg-context-menu-active .pg-symbol-number').text();
    var text = 'Are you sure you want to delete <b>"' + symbolName + '"</b>?';

    if (symbolCount !== '0') {
      text += '<br><br><span style="color:red;">This will convert <b>' + symbolCount + '</b> items that are linked to this symbol, back to regular items!</span>';
    }

    $(".pg-dialog").remove();
    $("body").append('<div id="pg-dialog-symbol-delete" class="pg-dialog">' + text + '</div>'); // symbolCount

    $("#pg-dialog-symbol-delete").dialog({
      title: "Delete Symbol",
      width: 450,
      modal: true,
      buttons: [{
        text: "Cancel",
        class: "ui-priority-secondary",
        click: function click() {
          $(this).dialog("close");
        }
      }, {
        text: "Delete",
        click: function click() {
          var pageId = $('.pg-context-menu-active.pg-add-symbol').attr('data-id') || 0;

          if (pageId) {
            _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["removeItem"](pageId);
            $('.pg-context-menu-active.pg-add-symbol').remove();
          }

          $(this).dialog("close");
        }
      }]
    });
  }); //end

  $(document).on("click", ".pg-delete", function (e) {
    e.preventDefault();
    e.stopPropagation();
    var pageId = $(this).parent('.pg-item-header').attr('data-id-original') || $(this).parent('.pg-item-header').attr('data-id');
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["deleteItem"](pageId);
  });
  $(document).on("click", ".pg-file-picker .input_button", function (e) {
    $(this).parent().parent().find('.inputFile').trigger("click");
  });
  $(document).on('click', '.pg-stylepanel .ui-dialog-titlebar-close', function (e) {
    //                e.preventDefault();
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents(); //remove navigator

    $('.pg-navigator').remove(); // c.find('.pg-settings-container').hide();

    c.find('.pg-settings-active').removeClass('pg-settings-active');
    $('.pg-settings-active').removeClass('pg-settings-active');
    c.find('.pg-item-active').removeClass('pg-item-active');
    c.find('.pg-item-selected').removeClass('pg-item-selected'); //remove keyframe classes

    c.find("[class*='pg-keyframe-']").each(function () {
      var prefix = "pg-keyframe-";
      var classes = $(this)[0].className.split(" ").filter(function (c) {
        return !c.startsWith(prefix);
      });
      $(this)[0].className = classes.join(" ").trim();
    });
  });
  $(document).on('click', '.breakpoint-icon', function () {
    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["setBreakpoint"]($(this));
  });
  $(document).on('click', '#_Inputfield_grid_tab', function () {
    $('.pg').toggleClass('show-grid');
  }); //set base breakpoint

  $('.breakpoint-icon-base').trigger('click'); // LOADING FRONTEND IFRAME

  var iframe = $('#pg-iframe-canvas');
  iframe.on('load', function () {
    var c = iframe.contents();
    console.log('frontend iframe loaded'); //fade iframe in

    iframe.addClass('pg-iframe-canvas-loaded');
    $('.pg-container .pg-loading').remove(); // show empty grid 

    _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["checkIfEmpty"](); //init scroll

    _iframe_scroll__WEBPACK_IMPORTED_MODULE_6__["initIframeScroll"](); //append inline edit buttons to parent

    if (c.find('.pw-edit-buttons').length) {
      var editButtons = c.find('.pw-edit-buttons');
      editButtons.appendTo('body'); //append new inline edit buttons to be able to attach new click events

      $('.pw-edit-buttons').prepend('<button class="ui-button pw-edit-save-new ui-state-default">' + $('.pw-edit-save')[0].innerHTML + '</button>');
      $('.pw-edit-buttons').prepend('<button class="ui-button pw-edit-cancel-new ui-state-default ui-priority-secondary">' + $('.pw-edit-cancel')[0].innerHTML + '</button>'); // Inline Edit

      $(document).on("click", ".pw-edit-save-new, .pw-edit-cancel-new", function (e) {
        console.log('enable drag');
        var iframe = $('#pg-iframe-canvas');
        var c = iframe.contents(); //CANCEL event

        if ($(this).hasClass('pw-edit-cancel-new')) {
          console.log('cancel inline edit'); //show own confirm to cancel changes

          if (c.find('.pw-changed').length) {
            if (!confirm("Are you sure you want to cancel?")) {
              return;
            }
          } //make sure all edited classes are back to normal


          c.find('.pw-edited').each(function () {
            var orig = $(this).children('.pw-edit-orig');
            var copy = $(this).children('.pw-edit-copy');
            copy[0].innerHTML = orig[0].innerHTML;
          }); //make sure no warning gets triggered

          c.find('.pw-changed').removeClass('pw-editing pw-changed');
          $('.pw-edit-cancel').trigger('click');
          $('.pg-item-header').css('visibility', '');
          $('.Inputfield_submit_save').css('visibility', '');
        } //SAVE event


        if ($(this).hasClass('pw-edit-save-new')) {
          //make sure no warning gets triggered
          c.find('.pw-edited').addClass('pw-changed');
          $('.pw-edit-saving').show();
          $(this).hide();
          _editSymbols__WEBPACK_IMPORTED_MODULE_20__["convertEditIds"]();
          $('.pw-edit-save').trigger('click');
        }

        $('.pw-edit-save, .pw-edit-cancel').hide(); // c.find('.pw-editing').removeClass('pw-editing');

        c.find('.pg-item-active').removeClass('pg-item-active');
        c.find('.pg-item-selected').removeClass('pg-item-selected');
        $('.pg-settings-active').removeClass('pg-settings-active');
        c.find('.tox-tinymce-inline').hide();
        $('.pg-navigator').remove();
        c.find('.pg').sortable({
          disabled: false
        }); //fix for second edit

        setTimeout(function () {
          c.find('.pw-changed').removeClass('pw-editing pw-changed');
          $('.pw-edit-saving').hide();
          $('.pw-edit-save-new').show();
          $('.pg-item-header').css('visibility', '');
          $('.Inputfield_submit_save').css('visibility', ''); // grid.reinitInlineEdit();
          // symbols.createEditIds();
        }, 2000);
      }); //make sure save button is shown, when change happend
      // c.on('keydown', '.pw-edit-copy', function (event) {
      //     $(this).parents('.pw-edit').addClass('pw-changed');
      //     $('.pw-edit-save-new').show();
      // });
    } // END Inline Edit
    //append item header inside iframe to main document


    c.find('.pg-item-header').appendTo('#pg-item-header'); //init
    // Group option

    c.find('.pg [data-pg-children]').each(function () {
      var el = $(this).closest('.pg-item');
      el.addClass('pg pg-nested pg-droppable');
    }); // END Group option

    c.find('.pg .pg-item').each(function () {
      var el = $(this);
      _drag_resize__WEBPACK_IMPORTED_MODULE_4__["dragResize"](el);

      if (el.hasClass('pg-ref')) {
        el.children().addClass('pg-ref');
      } //enable drag for custom items


      if (el.hasClass('pg-item-draggable') || el.hasClass('pg-item-resizable')) {
        el.parent().addClass('pg');
      } //setStyles to convert vh to px
      // var val = settings.getSavedValue(el, 'height');
      // var vhVal = save.vhToPx(val);
      // if (val) {
      //     if (vhVal) {
      //         save.saveData(el, 0, 0, 0, 1);
      //     }
      // }
      //setStyles to convert vh to px

    }); // watch size changr for overlay

    c.find('.pg').each(function () {
      _observer__WEBPACK_IMPORTED_MODULE_8__["observeSize"]($(this));
    });
    _observer__WEBPACK_IMPORTED_MODULE_8__["observeIframe"](iframe); // END create overlay
    //remove smoothscroll to fix drag scrolling

    c.find('html').css('scroll-behavior', 'auto'); //remove PW drag function for cke fields on double click

    c.find('.pw-edit, .pw-edit-copy, .ui-dialog').each(function () {
      _observer__WEBPACK_IMPORTED_MODULE_8__["observeMutation"]($(this));
    }); //remove empty file picker class if second image found (makes it possible to define placeholders)

    c.find('.pg-file-picker-empty').each(function () {
      if ($(this).parent().find('img').length === 2) {
        $(this).removeClass('pg-file-picker-empty');
        $(this).parent().children('.pg-fileupload').last().remove();
      }
    }); // init functions

    _settings__WEBPACK_IMPORTED_MODULE_10__["itemSettingsGet"]();
    _add_item__WEBPACK_IMPORTED_MODULE_5__["addItems"]();
    _shortcuts__WEBPACK_IMPORTED_MODULE_17__["shortcuts"]();
    _dom_list__WEBPACK_IMPORTED_MODULE_11__["domListActions"]();
    _editSymbols__WEBPACK_IMPORTED_MODULE_20__["createEditIds"](); // EVENTS
    //remove resize class, unwanted styles from pageFrontEdit Module

    c.find('.pg-item.ui-resizable').removeClass('ui-resizable');
    c.on("mouseenter", ".pg-item", function (event) {
      if (!$(this).hasClass('pg-item-active')) {
        c.find('.pg-file-picker-disable').removeClass('pg-file-picker-disable');
      }
    }); // c.on("mouseout", ".pg-item", function (event) {
    //     if ($(this).hasClass('pg-item-active') || $(this).find('.pg-item-active').length) {
    //         $(this).parent().find('.pg-file-picker-disable').removeClass('pg-file-picker-disable');
    //     }
    // });

    c.on("mouseover mouseout", ".pg-item", function (event) {
      event.stopPropagation();
      var el = $(this);
      var bgColor = el.parent().css('background-color');
      var elHeight = el.outerHeight();

      if (el.hasClass('pg-no-edit')) {
        return;
      } //set height on hover to fix drag of auto grid items


      if (!$('body').hasClass('pg-dragging')) {
        el.attr('data-height', elHeight);
      } //new fix uploader height only run on mouseover


      if (!$('body').hasClass('pg-dragging')) {
        var filePicker = el.find('.pg-file-picker:not(.pg-file-picker-empty)');
        filePicker.each(function () {
          var file = $(this).parent().find(':first-child');

          if (file.length) {
            filePicker.css('max-height', file.outerHeight());
            filePicker.css('max-width', file.outerWidth());
            filePicker.css('top', file.position().top);
            filePicker.css('left', file.position().left);
          }
        });
      } //END new fix uploader height
      //fix color contrast


      _colorContrast__WEBPACK_IMPORTED_MODULE_22__["setColor"](el.parent(), bgColor);
      _item_header__WEBPACK_IMPORTED_MODULE_19__["showHeader"](el);
      c.find('.show-grid').removeClass('show-grid');

      if (el.parent().css('display') == 'grid') {
        el.find('.ui-resizable-handle').show();
      } else {
        el.find('.ui-resizable-handle').hide();
      }
    });
    c.on("mouseover mouseout mouseenter", ".pg", function (event) {
      // event.stopPropagation();
      var el = $(this);

      if (el.hasClass('pg-no-edit')) {
        return;
      }

      if (!$('.pg-item-list-menu-active').length) {
        c.find('.pg-item-selected').removeClass('pg-item-selected');
      }

      c.find('.show-grid').removeClass('show-grid');
      el.addClass('pg-item-selected');

      if (el.css('display') == 'grid') {
        if (event.type === 'mouseenter') _overlay__WEBPACK_IMPORTED_MODULE_7__["overlay"](el);
        el.children('.pg-overlay').first().addClass('show-grid');
      }
    });
    $(document).on("mouseout", "#content", function (event) {
      if (!$('.pg-item-list-menu-active').length) {
        event.stopPropagation();
        c.find('.pg-item-selected').removeClass('pg-item-selected');
        c.find('.show-grid').removeClass('show-grid');
      }
    });
    c.on('scroll', function (e) {
      if ($('body.pg-dragging').length) return;

      if (c.find('.pg-item-active').length) {
        _item_header__WEBPACK_IMPORTED_MODULE_19__["showHeader"](c.find('.pg-item-active'));
      }

      if (c.find('.pg-item-selected').length) {
        _item_header__WEBPACK_IMPORTED_MODULE_19__["showHeader"](c.find('.pg-item-selected'));
      }
    });
    c.on('click', '.pg-remove-row', function () {
      console.log('remove row');
      var gridContainer = $(this).closest('.pg');
      var row = $(this).parent().parent().attr('data-row');
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["removeRow"](gridContainer, row);
    });
    c.on('click', '.pg-add-row', function () {
      console.log('add row');
      var gridContainer = $(this).closest('.pg');
      var row = $(this).parent().parent().attr('data-row');
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["addRow"](gridContainer, row);
    });
    c.on('click', '.pg-remove-col', function () {
      console.log('remove col');
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["removeCol"]($(this));
    });
    c.on('click', '.pg-add-col', function () {
      console.log('add col');
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["addCol"]($(this));
    }); //nesting bug with p tags: change p tags back to original tag

    c.find('pg-ptag').each(function () {
      _settings__WEBPACK_IMPORTED_MODULE_10__["changeTagname"]($(this), 'p');
    }); // c.find('.pw-edit-InputfieldTextarea, .pw-edit-InputfieldTextarea .pw-edit-orig, .pw-edit-InputfieldTextarea .pw-edit-copy').each(function () {
    //     settings.changeTagname($(this), 'editor');
    // });
    //END nesting bug with p tags:change p tags back to original tag

    c.find('html').addClass('pg-container pg-iframe');
    c.on("click", ".pg-item-active .pg-style-panel, .pg-item-active [data-class], .pg-item:not(.pg-locked), .pg:not(.pg-locked), .pg-item-active pg-edit, .pg-item-active .pg-file-picker, body, .pg-item-active h1, .pg-item-active h2, .pg-item-active h3, .pg-item-active h4, .pg-item-active h5, .pg-item-active h6, .pg-item-active p, .pg-item-active span:not(.pw-edit-copy, .pw-edit-orig, .pw-edit), .pg-item-active a, .pg-item-active img, .pg-item-active video, .pg-item-active pg-edit video, .pg-item-active ul, ul.pg-item-active li, ol.pg-item-active li, .pg-item-active strong, .pg-item-active table, table.pg-item-active tr, table.pg-item-active th, table.pg-item-active td, .pg-item-active svg", function (e) {
      // is double click for inline editing
      // if (e.originalEvent.detail === 2 && e.originalEvent.detail !== undefined) {
      //     console.log('cancel: double click');
      //     return false;
      // }
      //remove if not already (needed for color picker)
      c.find('pg-uploader').removeClass('pg-file-picker-disable-all');
      var el = $(this);

      if (el.hasClass('pg-no-edit')) {
        return;
      }

      if (el.parents('.cke_dialog_container').length) {
        return;
      }

      if (c.find('.ui-dialog').is(":visible")) {
        return;
      }

      if ($('.pg-settings').length == 0) {
        return;
      }

      if (el.parents('.cke_chrome').length) {
        return;
      } // if (!(el.hasClass('pg-file-picker'))) {
      //     e.preventDefault();
      // }


      el.addClass('pg-file-picker-disable');
      console.log(el);

      if (el.is('pg-edit') || el.is('pg-uploader') || el.hasClass('pg-file-picker')) {
        if (el.is('input')) {
          $('.pg-file-picker-disable').removeClass('pg-file-picker-disable');
        } // el.addClass('pg-file-picker-disable');


        return;
      } //prevent link clicks


      if (el.is('a')) e.preventDefault();

      if (el == 'undefined' || el == null) {
        return;
      }

      e.stopImmediatePropagation();
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_14__["InputfieldPageGridDialog"](el);
      _dom_navigator__WEBPACK_IMPORTED_MODULE_12__["createDoomNavigator"](); //update header position

      setTimeout(function () {
        if (c.find('.pg-item-active').length) {
          _item_header__WEBPACK_IMPORTED_MODULE_19__["showHeader"](c.find('.pg-item-active')); // el.find('.pg-file-picker-disable').removeClass('pg-file-picker-disable');
        }
      }, 600);
    }); // remove tags when pasted inside textarea

    c.find(".pw-edit-InputfieldTextarea .pw-edit-copy").on("paste", function (e) {
      console.log('run filter'); // var pastedData = e.originalEvent.clipboardData.getData('text');

      var el = $(this);
      setTimeout(function () {
        // replace all br and closing p tags with special tokens
        el.html(el.html().replace(/\<\/p\>/g, "").replace(/\<br\>/g, "[br]")); // remove all the tags, and then replace the tokens for their original values

        el.html(el.text().replace(/\[p\]/g, "").replace(/\[br\]/g, "<br>")); // remove spans

        el.html(el.text().replace(/\<\/span\>/g, ""));
      }, 100);
    }); // END remove tags when pasted inside textarea
  }); // END LOADING FRONTEND IFRAME
});

/***/ }),

/***/ "./main/nearest-element.js":
/*!*********************************!*\
  !*** ./main/nearest-element.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

jQuery.fn.closestToOffset = function (offset) {
  var el = null,
      elOffset,
      x = offset.left,
      y = offset.top,
      distance,
      dx,
      dy,
      minDistance; //get elements in reverse order to get first nested el

  $(this.get().reverse()).each(function () {
    var $t = $(this);
    elOffset = $t.offset();
    right = elOffset.left + $t.outerWidth();
    bottom = elOffset.top + $t.outerHeight();

    if (x >= elOffset.left && x <= right && y >= elOffset.top && y <= bottom) {
      el = $t;
      return false;
    }

    var offsets = [[elOffset.left, elOffset.top], [right, elOffset.top], [elOffset.left, bottom], [right, bottom]];

    for (var off in offsets) {
      dx = offsets[off][0] - x;
      dy = offsets[off][1] - y;
      distance = Math.sqrt(dx * dx + dy * dy);

      if (minDistance === undefined || distance < minDistance) {
        minDistance = distance;
        el = $t;
      }
    }
  });
  return el;
};

/***/ }),

/***/ "./main/observer.js":
/*!**************************!*\
  !*** ./main/observer.js ***!
  \**************************/
/*! exports provided: observeIframe, observeSize, observeMutation, observeStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeIframe", function() { return observeIframe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeSize", function() { return observeSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeMutation", function() { return observeMutation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeStyle", function() { return observeStyle; });
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


 //observe size change 

function observeIframe(iframe) {
  // watch content update
  var ro = new ResizeObserver(function (entries) {
    var _iterator = _createForOfIteratorHelper(entries),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;
        // // console.log('trigger resize');
        var target = entry.target; // var el = $(target);

        var c = iframe.contents();
        var cHeight = c.find('body').outerHeight() + 2; //if dragging return to prevent item jump
        // if($('body').hasClass('pg-dragging')) {
        //     return;
        // }

        iframe.height(cHeight);

        if (iframe.is('#pg-iframe-canvas')) {
          $('.pg-container').parent().css('height', cHeight); // c.find('.pg').each(function () {
          //     overlay.overlay($(this));
          // });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }); // init observer to resize iframe automatically when content changes
  //get vanilla js element to make work with observer

  var iframeV = iframe[0];

  if (iframeV.contentDocument) {
    var inner = iframeV.contentDocument.getElementsByTagName('body')[0];
    var wrapper = iframeV.contentDocument.querySelectorAll('.pg-main')[0];

    if (inner) {
      ro.observe(inner);
    }

    if (wrapper) {
      ro.observe(wrapper);
    }
  }
}
function observeSize(el) {
  // watch content update
  var ro = new ResizeObserver(function (entries) {
    var _iterator2 = _createForOfIteratorHelper(entries),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var entry = _step2.value;
        // console.log('trigger resize: ' + el.attr('class'));
        var target = entry.target;
        _overlay__WEBPACK_IMPORTED_MODULE_0__["overlay"](el);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }); // init observer to resize iframe automatically when content changes
  //get vanilla js element to make work with observer

  if (el) {
    ro.observe(el[0]);
  }
} //observe class change 

function observeMutation(el) {
  // console.log('MutationObserver start');
  // Observe one or multiple elements mutation observer
  //  var $item = $(".InputfieldFile");
  var $item = el; //  var $item = document.getElementsByClassName("InputfieldFileName")[0];

  var observer = new MutationObserver(function (mutations) {
    mutations.forEach(function (mutation) {
      if (mutation.attributeName === "class") {
        var attributeValue = $(mutation.target).prop(mutation.attributeName); //        // console.log("Class attribute changed to:", attributeValue);

        var iframe = $('#pg-iframe-canvas');
        var c = iframe.contents();
        var fieldTop = iframe.offset().top;
        $('body').css('overflow', '');

        if (c.find('.ui-dialog').is(":visible")) {
          //copy to parent window
          c.find('.ui-dialog').addClass('ui-dialog-fullscreen');
          c.find('.ui-dialog').appendTo($('body')); // c.find('.ui-widget-overlay').appendTo($('body'));
        }

        if (c.find('.pw-editing').length) {
          // c.find('.pw-editing').closest('.pg-item.pg-delete').removeClass('pg-delete');
          $('.pg-item-header.pg-delete').removeClass('pg-delete');
          c.find('.pg-item.pg-delete').removeClass('pg-delete');
          $(".pg-wraper-delete-marked").hide();
          c.find('.pg').sortable({
            disabled: true
          });
          $('.pg-item-header').css('visibility', 'hidden');
          $('.Inputfield_submit_save').css('visibility', 'hidden');

          if (c.find('.ui-dialog').is(":visible") == 0) {
            $('.pw-edit-buttons-new').show();
          } else {
            $('.pw-edit-buttons-new').hide();
          }

          if (c.find('.pw-changed').length) {// $('.pw-edit-save-new').show();
          } else {
            // $('.pw-edit-save-new').hide();
            $('.pw-edit-saving').hide();
          } //hide overlay to fix offset bug


          c.find('.pg-overlay').css('display', 'none');
        } else {
          c.find('.pg').sortable({
            disabled: false
          }); //show overlay again after edit

          c.find('.pg-overlay').css('display', '');
        }
      }
    });
  });
  el.each(function () {
    observer.observe(this, {
      attributes: true
    });
  });
}
function observeStyle(el) {
  var observer = new MutationObserver(function (mutations) {
    mutations.forEach(function (mutationRecord) {
      // console.log('style change');
      _overlay__WEBPACK_IMPORTED_MODULE_0__["overlay"](el.parent());
    });
  });
  el.each(function () {
    observer.observe(this, {
      attributes: true,
      attributeFilter: ['style']
    });
  });
}

/***/ }),

/***/ "./main/overlay.js":
/*!*************************!*\
  !*** ./main/overlay.js ***!
  \*************************/
/*! exports provided: overlay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "overlay", function() { return overlay; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _colorContrast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorContrast */ "./main/colorContrast.js");


function overlay(el) {
  if (!(el.css('display') == 'grid') || el.hasClass('ui-sortable') == 0) {
    // el.children('.pg-overlay').first().remove();
    return false;
  } // console.log('overlay');


  if (el.children('.pg-overlay').length == 0) {
    el.append('<div class="pg-overlay"></div>');
  }

  var overlayContainer = el.children('.pg-overlay').first(); // console.log(el.css('background-color'));
  // if(el.css('background-color') !== 'rgb(255, 255, 255)') {
  //     overlayContainer.css('mix-blend-mode', 'difference');
  // }

  var bgColor = el.css('background-color');
  _colorContrast__WEBPACK_IMPORTED_MODULE_1__["setColor"](el, bgColor); //set same padding as grid

  overlayContainer.css('padding', el.css('padding')); //keep icons in view

  var paddingLeft = parseInt(el.css('padding-right'));

  if (paddingLeft < 20) {
    overlayContainer.addClass('pg-nopadding'); // overlayContainer.css('--offset-right', parseInt(el.css('padding-right')));
  } else {
    overlayContainer.removeClass('pg-nopadding');
  } // get the rows/columns/gaps
  //  const styles = window.getComputedStyle(container);


  var rows = el.css("grid-template-rows");
  var columns = el.css("grid-template-columns");
  var rowGap = el.css("grid-row-gap");
  var columnGap = el.css("grid-column-gap"); // convert the rows and columns into a format we can work with

  var columnData = parseGridTemplate(columns, columnGap);
  var rowData = parseGridTemplate(rows, rowGap);
  var extendLines = 0; //  console.log("rows: " + rows);
  //  console.log("rowData: " + rowData);
  //  empty old overlay
  //  if ($('.block_group.ui-resizable-resizing').length) {
  //    el.find(".pg-group .pg-overlay").first().empty();
  //    //    $(".pg-main").find(".pg-overlay").first().empty();
  //  } else {
  //    overlayContainer.empty();
  //  }

  overlayContainer.empty(); // render rows

  rowData.forEach(function (item, index) {
    //          console.log("Current: " + item.start);
    var prevItem = 0;
    var nextItem = 0;
    var rowIndex = index;
    var total = rowData.length;

    if (index == 0) {
      return false;
    }

    if (index > 0) {
      //               console.log("Previous: " + rowData[index - 1].start);
      var prevItem = rowData[index - 1];
    }

    if (index < rowData.length - 1) {
      //               console.log("Next: " + rowData[index + 1].start);
      var nextItem = rowData[index + 1];
    }

    var row = document.createElement('div');
    row.setAttribute('style', "\n    width: 100%;\n    height: ".concat(item.start - prevItem.start - (prevItem.gap || 0), "px;\n    margin-bottom: ").concat(item.gap || 0, "px;\n  "));
    $(row).addClass('pg-overlay-row');
    $(row).attr('data-row', rowIndex);
    overlayContainer.attr('data-row-gap', item.gap); //add settings

    $(row).append('<div class="pg-grid-settings"></div>');
    $(row).find(".pg-grid-settings").first().append('<i class="pg-add-row fa fa-plus-circle"></i>');
    $(row).find(".pg-grid-settings").first().append('<i class="pg-remove-row fa fa-minus-circle"></i>'); //END add settings

    overlayContainer.append(row); // render column

    columnData.forEach(function (item, index) {
      //               console.log("Current: " + item.start);
      var prevItem = 0;
      var nextItem = 0;

      if (index == 0) {
        return false;
      }

      if (index > 0) {
        //                    console.log("Previous: " + columnData[index - 1].start);
        var prevItem = columnData[index - 1];
      }

      if (index < columnData.length - 1) {
        //                    console.log("Next: " + columnData[index + 1].start);
        var nextItem = columnData[index + 1];
      }

      var col = document.createElement('div');
      col.setAttribute('style', "\n    height: 100%;\n    width: ".concat(item.start - prevItem.start - (prevItem.gap || 0), "px;\n    margin-right: ").concat(item.gap || 0, "px;\n  "));
      $(col).addClass('pg-overlay-column');
      $(col).attr('data-column', index);
      $(col).attr('data-row', rowIndex);
      overlayContainer.attr('data-columns', index);
      overlayContainer.attr('data-rows', rowIndex);
      overlayContainer.parent().attr('data-columns', index);
      overlayContainer.parent().attr('data-rows', rowIndex); //add settings

      if (rowIndex == 1) {
        $(col).append('<div class="pg-grid-settings"></div>');
        $(col).find(".pg-grid-settings").first().append('<i class="pg-add-col fa fa-plus-circle"></i>');
        $(col).find(".pg-grid-settings").first().append('<i class="pg-remove-col fa fa-minus-circle"></i>');
      }

      ; //END add settings

      row.appendChild(col);
    }); // add one more row as first row

    if (index === 1) {
      var firstIndex = overlayContainer.find('.pg-overlay-row').first().attr('data-row');
      overlayContainer.find('.pg-overlay-row').first().clone().addClass('pg-overlay-row-first').prependTo(overlayContainer);
      overlayContainer.find('.pg-overlay-row-first').attr('data-row', '1');
      overlayContainer.find('.pg-overlay-row-first .pg-overlay-column').attr('data-row', '1');
    } // add one more row as last row


    if (index === total - 1) {
      overlayContainer.find('.pg-overlay-row').last().clone().addClass('pg-overlay-row-last').appendTo(overlayContainer);
      overlayContainer.find('.pg-overlay-row-last').attr('data-row', rowIndex + 1);
      overlayContainer.find('.pg-overlay-row-last .pg-overlay-column').attr('data-row', rowIndex + 1);
    }
  }); //     example code
  //    width: ${container.offsetWidth + extendLines * 2}px;
  //    height: ${item.end - item.start + (item.gap || 0)}px;

  /*
        Converts a grid template string into an array of grid line objects
        
        Example input: "[full-start] 300px 300px [full-end]"
           
        Example outut:
        [{
          "start": -1,
          "end": 1,
          "name": "full-start"
        },
        {
          "start": 299,
          "end": 301,
          "name": null,
          "gap": 20
        },
        {
          "start": 619,
          "end": 621,
          "name": "full-end"
        }]
      */

  function parseGridTemplate(templateStr) {
    var gap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "0px";
    var gapSize = parseFloat(gap.replace("px", "")); // splits at and space that isn't between two [ ] brackets

    var parsedArray = templateStr.split(/\s(?![^[]*])/);
    var lines = [];
    var currentPosition = 0; // add in any missing names as ""
    // "200px [center-start] 300px [center-end] 400px" becomes:
    // "'' 200px [center-start] 300px [center-end] 400px ''"

    var allItems = [];
    parsedArray.forEach(function (item, index) {
      if (item.includes("px")) {
        // add a null name before it if missing
        if (!parsedArray[index - 1] || parsedArray[index - 1].includes("px")) {
          allItems.push("");
        }
      }

      allItems.push(item);
    }); // handle last item

    if (parsedArray[parsedArray.length - 1].includes("px")) {
      allItems.push("");
    }

    allItems.forEach(function (item, index) {
      if (item.includes("px")) {
        var trackSize = parseFloat(item.replace("px", ""));
        currentPosition += trackSize;
      } else {
        var newLine = {
          start: currentPosition - 1,
          end: currentPosition + 1,
          name: getName(item)
        }; // add gaps on just the inner lines
        // and count it for positioning

        if (index !== 0 && index !== allItems.length - 1 && gapSize !== 0) {
          newLine.gap = gapSize;
          currentPosition += gapSize;
        }

        lines.push(newLine);
      }
    });
    return lines;
  }

  function getName(item) {
    return item.includes("[") ? item.match(/\[(.*)\]/)[1].trim() : null;
  } //    update drag functions
  //  dragResize($('.pg .pg-item'));

}

/***/ }),

/***/ "./main/resize-observer-polyfill.js":
/*!******************************************!*\
  !*** ./main/resize-observer-polyfill.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';
  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */

  /* eslint-disable require-jsdoc, valid-jsdoc */

  var MapShim = function () {
    if (typeof Map !== 'undefined') {
      return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */


    function getIndex(arr, key) {
      var result = -1;
      arr.some(function (entry, index) {
        if (entry[0] === key) {
          result = index;
          return true;
        }

        return false;
      });
      return result;
    }

    return (
      /** @class */
      function () {
        function class_1() {
          this.__entries__ = [];
        }

        Object.defineProperty(class_1.prototype, "size", {
          /**
           * @returns {boolean}
           */
          get: function get() {
            return this.__entries__.length;
          },
          enumerable: true,
          configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */

        class_1.prototype.get = function (key) {
          var index = getIndex(this.__entries__, key);
          var entry = this.__entries__[index];
          return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */


        class_1.prototype.set = function (key, value) {
          var index = getIndex(this.__entries__, key);

          if (~index) {
            this.__entries__[index][1] = value;
          } else {
            this.__entries__.push([key, value]);
          }
        };
        /**
         * @param {*} key
         * @returns {void}
         */


        class_1.prototype.delete = function (key) {
          var entries = this.__entries__;
          var index = getIndex(entries, key);

          if (~index) {
            entries.splice(index, 1);
          }
        };
        /**
         * @param {*} key
         * @returns {void}
         */


        class_1.prototype.has = function (key) {
          return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */


        class_1.prototype.clear = function () {
          this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */


        class_1.prototype.forEach = function (callback, ctx) {
          if (ctx === void 0) {
            ctx = null;
          }

          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
            var entry = _a[_i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };

        return class_1;
      }()
    );
  }();
  /**
   * Detects whether window and document objects are available in current environment.
   */


  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.

  var global$1 = function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
      return global;
    }

    if (typeof self !== 'undefined' && self.Math === Math) {
      return self;
    }

    if (typeof window !== 'undefined' && window.Math === Math) {
      return window;
    } // eslint-disable-next-line no-new-func


    return Function('return this')();
  }();
  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */


  var requestAnimationFrame$1 = function () {
    if (typeof requestAnimationFrame === 'function') {
      // It's required to use a bounded function because IE sometimes throws
      // an "Invalid calling object" error if rAF is invoked without the global
      // object on the left hand side.
      return requestAnimationFrame.bind(global$1);
    }

    return function (callback) {
      return setTimeout(function () {
        return callback(Date.now());
      }, 1000 / 60);
    };
  }(); // Defines minimum timeout before adding a trailing call.


  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */

  function throttle(callback, delay) {
    var leadingCall = false,
        trailingCall = false,
        lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */

    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }

      if (trailingCall) {
        proxy();
      }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */


    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */


    function proxy() {
      var timeStamp = Date.now();

      if (leadingCall) {
        // Reject immediately following calls.
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        } // Schedule new call to be in invoked when the pending one is resolved.
        // This is important for "transitions" which never actually start
        // immediately so there is a chance that we might miss one if change
        // happens amids the pending invocation.


        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }

      lastCallTime = timeStamp;
    }

    return proxy;
  } // Minimum delay before invoking the update of observers.


  var REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.

  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.

  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */

  var ResizeObserverController =
  /** @class */
  function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
      /**
       * Indicates whether DOM listeners have been added.
       *
       * @private {boolean}
       */
      this.connected_ = false;
      /**
       * Tells that controller has subscribed for Mutation Events.
       *
       * @private {boolean}
       */

      this.mutationEventsAdded_ = false;
      /**
       * Keeps reference to the instance of MutationObserver.
       *
       * @private {MutationObserver}
       */

      this.mutationsObserver_ = null;
      /**
       * A list of connected observers.
       *
       * @private {Array<ResizeObserverSPI>}
       */

      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */


    ResizeObserverController.prototype.addObserver = function (observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      } // Add listeners if they haven't been added yet.


      if (!this.connected_) {
        this.connect_();
      }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */


    ResizeObserverController.prototype.removeObserver = function (observer) {
      var observers = this.observers_;
      var index = observers.indexOf(observer); // Remove observer if it's present in registry.

      if (~index) {
        observers.splice(index, 1);
      } // Remove listeners if controller has no connected observers.


      if (!observers.length && this.connected_) {
        this.disconnect_();
      }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */


    ResizeObserverController.prototype.refresh = function () {
      var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might
      // be future ones caused by CSS transitions.

      if (changesDetected) {
        this.refresh();
      }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */


    ResizeObserverController.prototype.updateObservers_ = function () {
      // Collect observers that have active observations.
      var activeObservers = this.observers_.filter(function (observer) {
        return observer.gatherActive(), observer.hasActive();
      }); // Deliver notifications in a separate cycle in order to avoid any
      // collisions between observers, e.g. when multiple instances of
      // ResizeObserver are tracking the same element and the callback of one
      // of them changes content dimensions of the observed target. Sometimes
      // this may result in notifications being blocked for the rest of observers.

      activeObservers.forEach(function (observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */


    ResizeObserverController.prototype.connect_ = function () {
      // Do nothing if running in a non-browser environment or if listeners
      // have been already added.
      if (!isBrowser || this.connected_) {
        return;
      } // Subscription to the "Transitionend" event is used as a workaround for
      // delayed transitions. This way it's possible to capture at least the
      // final state of an element.


      document.addEventListener('transitionend', this.onTransitionEnd_);
      window.addEventListener('resize', this.refresh);

      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      } else {
        document.addEventListener('DOMSubtreeModified', this.refresh);
        this.mutationEventsAdded_ = true;
      }

      this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */


    ResizeObserverController.prototype.disconnect_ = function () {
      // Do nothing if running in a non-browser environment or if listeners
      // have been already removed.
      if (!isBrowser || !this.connected_) {
        return;
      }

      document.removeEventListener('transitionend', this.onTransitionEnd_);
      window.removeEventListener('resize', this.refresh);

      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }

      if (this.mutationEventsAdded_) {
        document.removeEventListener('DOMSubtreeModified', this.refresh);
      }

      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */


    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
      var _b = _a.propertyName,
          propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.

      var isReflowProperty = transitionKeys.some(function (key) {
        return !!~propertyName.indexOf(key);
      });

      if (isReflowProperty) {
        this.refresh();
      }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */


    ResizeObserverController.getInstance = function () {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController();
      }

      return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */


    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
  }();
  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */


  var defineConfigurable = function defineConfigurable(target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
      var key = _a[_i];
      Object.defineProperty(target, key, {
        value: props[key],
        enumerable: false,
        writable: false,
        configurable: true
      });
    }

    return target;
  };
  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */


  var getWindowOf = function getWindowOf(target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from
    // provided element.

    return ownerGlobal || global$1;
  }; // Placeholder of an empty content rectangle.


  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */

  function toFloat(value) {
    return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */


  function getBordersSize(styles) {
    var positions = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      positions[_i - 1] = arguments[_i];
    }

    return positions.reduce(function (size, position) {
      var value = styles['border-' + position + '-width'];
      return size + toFloat(value);
    }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */


  function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};

    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position = positions_1[_i];
      var value = styles['padding-' + position];
      paddings[position] = toFloat(value);
    }

    return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */


  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */


  function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth,
        clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.

    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }

    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.

    var width = toFloat(styles.width),
        height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).

    if (styles.boxSizing === 'border-box') {
      // Following conditions are required to handle Internet Explorer which
      // doesn't include paddings and borders to computed CSS dimensions.
      //
      // We can say that if CSS dimensions + paddings are equal to the "client"
      // properties then it's either IE, and thus we don't need to subtract
      // anything, or an element merely doesn't have paddings/borders styles.
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, 'left', 'right') + horizPad;
      }

      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
      }
    } // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.


    if (!isDocumentElement(target)) {
      // In some browsers (only in Firefox, actually) CSS width & height
      // include scroll bars size which can be removed at this step as scroll
      // bars are the only difference between rounded dimensions + paddings
      // and "client" properties, though that is not always true in Chrome.
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of "client" properties.
      // E.g. for an element with content width of 314.2px it sometimes gives
      // the client width of 315px and for the width of 314.7px it may give
      // 314px. And it doesn't happen all the time. So just ignore this delta
      // as a non-relevant.

      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }

      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }

    return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */


  var isSVGGraphicsElement = function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
      return function (target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    } // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens


    return function (target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
  }();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */


  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */


  function getContentRect(target) {
    if (!isBrowser) {
      return emptyRect;
    }

    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }

    return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */


  function createReadOnlyRect(_a) {
    var x = _a.x,
        y = _a.y,
        width = _a.width,
        height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.

    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.

    defineConfigurable(rect, {
      x: x,
      y: y,
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: height + y,
      left: x
    });
    return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */


  function createRectInit(x, y, width, height) {
    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  }
  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */


  var ResizeObservation =
  /** @class */
  function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
      /**
       * Broadcasted width of content rectangle.
       *
       * @type {number}
       */
      this.broadcastWidth = 0;
      /**
       * Broadcasted height of content rectangle.
       *
       * @type {number}
       */

      this.broadcastHeight = 0;
      /**
       * Reference to the last observed content rectangle.
       *
       * @private {DOMRectInit}
       */

      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */


    ResizeObservation.prototype.isActive = function () {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */


    ResizeObservation.prototype.broadcastRect = function () {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };

    return ResizeObservation;
  }();

  var ResizeObserverEntry =
  /** @class */
  function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable
      // and are also not enumerable in the native implementation.
      //
      // Property accessors are not being used as they'd require to define a
      // private WeakMap storage which may cause memory leaks in browsers that
      // don't support this type of collections.

      defineConfigurable(this, {
        target: target,
        contentRect: contentRect
      });
    }

    return ResizeObserverEntry;
  }();

  var ResizeObserverSPI =
  /** @class */
  function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
      /**
       * Collection of resize observations that have detected changes in dimensions
       * of elements.
       *
       * @private {Array<ResizeObservation>}
       */
      this.activeObservations_ = [];
      /**
       * Registry of the ResizeObservation instances.
       *
       * @private {Map<Element, ResizeObservation>}
       */

      this.observations_ = new MapShim();

      if (typeof callback !== 'function') {
        throw new TypeError('The callback provided as parameter 1 is not a function.');
      }

      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */


    ResizeObserverSPI.prototype.observe = function (target) {
      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      } // Do nothing if current environment doesn't have the Element interface.


      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
      }

      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }

      var observations = this.observations_; // Do nothing if element is already being observed.

      if (observations.has(target)) {
        return;
      }

      observations.set(target, new ResizeObservation(target));
      this.controller_.addObserver(this); // Force the update of observations.

      this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */


    ResizeObserverSPI.prototype.unobserve = function (target) {
      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      } // Do nothing if current environment doesn't have the Element interface.


      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
      }

      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }

      var observations = this.observations_; // Do nothing if element is not being observed.

      if (!observations.has(target)) {
        return;
      }

      observations.delete(target);

      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */


    ResizeObserverSPI.prototype.disconnect = function () {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */


    ResizeObserverSPI.prototype.gatherActive = function () {
      var _this = this;

      this.clearActive();
      this.observations_.forEach(function (observation) {
        if (observation.isActive()) {
          _this.activeObservations_.push(observation);
        }
      });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */


    ResizeObserverSPI.prototype.broadcastActive = function () {
      // Do nothing if observer doesn't have active observations.
      if (!this.hasActive()) {
        return;
      }

      var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.

      var entries = this.activeObservations_.map(function (observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */


    ResizeObserverSPI.prototype.clearActive = function () {
      this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */


    ResizeObserverSPI.prototype.hasActive = function () {
      return this.activeObservations_.length > 0;
    };

    return ResizeObserverSPI;
  }(); // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.


  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */

  var ResizeObserver =
  /** @class */
  function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
      if (!(this instanceof ResizeObserver)) {
        throw new TypeError('Cannot call a class as a function.');
      }

      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      }

      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);
      observers.set(this, observer);
    }

    return ResizeObserver;
  }(); // Expose public methods of ResizeObserver.


  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
      var _a;

      return (_a = observers.get(this))[method].apply(_a, arguments);
    };
  });

  var index = function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
      return global$1.ResizeObserver;
    }

    return ResizeObserver;
  }();

  return index;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./main/save.js":
/*!**********************!*\
  !*** ./main/save.js ***!
  \**********************/
/*! exports provided: saveData, setStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveData", function() { return saveData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setStyles", function() { return setStyles; });
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/throttle */ "../../node_modules/lodash/throttle.js");
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./main/settings.js");
/* harmony import */ var _undo_redo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./undo-redo */ "./main/undo-redo.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






 //throttle ajax save

var throttleSaveItem = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(_InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["saveItem"], 300);
var throttleCreateRedoUndo = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(createRedoUndo, 800); // save data

function saveData(el) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var local = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var skipAjax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var debounce = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
  var setStyle = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;

  // if grid is inside iframe modal don't save to prevent breakpoint overrride
  if ($('body').hasClass('pg-settings-body')) {
    console.log('grid inside iframe');
    return;
  }

  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var breakpoint = $('body').attr('data-breakpoint') || 'base';
  var breakpointSize = $('body').attr('data-breakpoint-size');
  var dataId = el.attr('data-class') || el.attr('id');
  var classId = el.attr('data-class') || el.attr('id');
  var classes = el.attr('data-classes');
  var attributes = el.attr('data-attributes');
  var tagName = String(el.prop('tagName')).toLowerCase();
  var itemData = {};
  var pageId = el.attr('data-id') || el.closest('.pg-item[data-id]').attr('data-id');
  var global = 0;
  var dataObj = $('.pg-container').data('pg');
  var saveAsCss = true;

  if (name === null || !name) {
    name = '';
  } //make sure name is always a string


  name = String(name); //if name start with pg- we sill save it inside item root

  if (name.startsWith('pg-')) {
    name = name.substring(3);
    saveAsCss = false;
    setStyle = false;
  } //empty classId will use page name (makes it possible to change page name without data loss)


  if (el.hasClass('pg-item') && el[0].hasAttribute('data-id')) {
    var dataId = 'pgitem';
    var classId = '';
  }

  if (dataId == '' || typeof dataId == 'undefined') {
    var dataId = tagName;
    var classId = '';
  } // console.log('save: ' + dataId);
  // when global class is clicked save value to this class


  if ($('.pg-class-active').length && local == 0) {
    // console.log('save active global class');
    var global = 1;
    var pageId = $('.pg-container').attr('data-id'); // var dataId = $('.pg-class-active').attr('data-value');
    // var classId = dataId;

    var dataId = 'pgitem';
    var classId = $('.pg-class-active').attr('data-value'); //force tagname, to be able to style body from pg-main

    if ($('.pg-class-active.pg-tag-name').length) {
      var tagN = $('.pg-class-active').attr('data-value');
      var tagName = tagN;
    }
  } // animation 


  var animation = false;
  var keyframe = '';

  if ($('#tab-interactions.uk-active').length && $('.pg-animation-active').length && !name.startsWith('grid') && name !== '--pg-animation') {
    //save animation
    //always use base breakpoint for animations
    //resonsive animations can still be created and set for each breakpoint via "--pg-animation"
    breakpoint = 'base';
    var pageId = $('.pg-container').attr('data-animations-id');
    var classId = $('.pg-animation-active').attr('data-value');
    var dataId = $('.pg-animation-active').attr('data-value');
    animation = true; //save keyframe

    if ($('.pg-animation-keyframe-active').length && !name.startsWith('animation') && !name.startsWith('pg-animation')) {
      dataId = $('.pg-animation-keyframe-active').attr('data-id');
      keyframe = $('.pg-animation-keyframe-active').attr('data-value');
    }
  } // END animation 


  if (typeof breakpoint == "undefined") {
    breakpoint = "base";
  }

  if (typeof breakpointSize == "undefined" || breakpointSize == "") {
    breakpointSize = "@media (min-width: 640px)";
  }

  if (dataId == '' || dataId == null || dataId == 'div') {
    return;
  } // if no pageid found use pg-main


  if (pageId == null) {
    var pageId = c.find('.pg-main').attr('data-id');
  } //body has no parent classes so just set body as class


  if (dataId == 'body' && global == 0) {
    var classId = dataId;
  }

  if (dataId === 'undefined' || dataId == null) {
    return false;
  }

  itemData.id = dataId;
  itemData.cssClass = classId;

  if (typeof classes !== 'undefined' && classes !== false) {
    itemData.cssClasses = classes;
  }

  if (typeof attributes !== 'undefined' && attributes !== false) {
    itemData.attributes = attributes;
  } //only set keyframe on keyframe page!


  if (keyframe) {
    itemData.keyframe = keyframe;
  }

  if (!animation) {
    itemData.tagName = tagName;
  } //save data prefixed with pg- that we don't need as css


  if (!saveAsCss) {
    itemData[name] = value;
  }

  itemData.breakpoints = {};
  itemData.breakpoints[breakpoint] = {};
  itemData.breakpoints[breakpoint].css = {};
  itemData.breakpoints[breakpoint].size = breakpointSize;
  itemData.breakpoints[breakpoint].name = breakpoint;

  if (name && value && saveAsCss) {
    itemData.breakpoints[breakpoint].css[name] = value;

    if (name === 'grid-column-start' && value === 'all') {
      var rowStart = el.css('grid-row-start');
      var colStart = el.css('grid-column-start');
      var colEnd = el.css('grid-column-end');
      var rowEnd = el.css('grid-row-end');
      itemData.breakpoints[breakpoint].css['grid-row-start'] = rowStart;
      itemData.breakpoints[breakpoint].css['grid-column-start'] = colStart;
      itemData.breakpoints[breakpoint].css['grid-column-end'] = colEnd;
      itemData.breakpoints[breakpoint].css['grid-row-end'] = rowEnd;
    }
  } //update data locally
  // console.log('update data locally');
  //if global look for classname as ID


  if (global) {
    var dataId = classId;
  }

  if (!animation) {
    if (dataObj[pageId] != null) {
      var dataObjNewAll = $.extend(true, {}, dataObj);
      var dataObjNew = $.extend(true, {}, dataObjNewAll[pageId][dataId], itemData);
      dataObjNewAll[pageId][dataId] = dataObjNew;
    } else {
      //new item
      dataObj[pageId] = [];
      dataObj[pageId][dataId] = itemData;
    }
  } //for keyframe animation save nested


  if (animation) {
    if (dataObj[pageId][classId] != null) {
      var dataObj = $('.pg-container').data('pg');
      var dataObjNewAll = $.extend(true, {}, dataObj);
      var dataObjNew = $.extend(true, {}, dataObjNewAll[pageId][classId][dataId], itemData);
      dataObjNewAll[pageId][classId][dataId] = dataObjNew;
    } else {
      //new item
      dataObj[pageId][classId] = {};
      dataObj[pageId][classId][dataId] = itemData;
    }
  } //delete name if value is ''


  if (name && value == '') {
    console.log('delete!: ' + dataId + ': ' + name);
    delete itemData.breakpoints[breakpoint].css[name];

    if (!saveAsCss) {
      delete itemData[name];
    }

    if (typeof dataObjNew !== 'undefined') {
      delete dataObjNew.breakpoints[breakpoint].css[name];

      if (!saveAsCss) {
        delete dataObjNew[name];
      }
    }
  } //delete breakpoint if empty
  // if (breakpoint !== 'base') {
  //     if (Object.keys(itemData.breakpoints[breakpoint].css).length == 0) {
  //         delete itemData.breakpoints[breakpoint];
  //     }
  //     if (typeof dataObjNew !== 'undefined') {
  //         if (Object.keys(dataObjNew.breakpoints[breakpoint].css).length == 0) {
  //             delete dataObjNew.breakpoints[breakpoint];
  //         }
  //     }
  // }
  // sort breakpoints


  if (typeof dataObjNew !== 'undefined') {
    var orderArr = ['base', 'l', 'm', 's'];
    dataObjNew.breakpoints = Object.keys(dataObjNew['breakpoints']).map(function (a) {
      return _defineProperty({}, a, dataObjNew['breakpoints'][a]);
    }).sort(function (a, b) {
      return orderArr.indexOf(Object.keys(a)[0]) + 1 - (orderArr.indexOf(Object.keys(b)[0]) + 1);
    });
    dataObjNew.breakpoints.reduce(function (result, breakpoint) {
      //      console.log(breakpoint);
      var key = Object.keys(breakpoint)[0]; //first property: a, b, c

      result[key] = breakpoint[key];
      dataObjNew.breakpoints = result;
      return result;
    }, {});
  } //save local


  if (typeof dataObjNew !== 'undefined') {
    $('.pg-container').data('pg', dataObjNewAll);
  } else {
    $('.pg-container').data('pg', dataObj);
  } //ajax save


  if (skipAjax == 0) {
    if (typeof dataObjNew !== 'undefined') {
      var jsonArray = JSON.stringify(dataObjNew);
    } else {
      var jsonArray = JSON.stringify(itemData);
    } // debounce ajax save not working for font (firing multiple times)


    if (name == 'font-family' || name == 'font-style' || name == 'font-weight' || debounce == 0) {
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["saveItem"](pageId, jsonArray);
    } else {
      throttleSaveItem(pageId, jsonArray);
    } // console.log('save array: ' + jsonArray);
    //create redo/undo and debounce 


    if (debounce) {
      var dataObjOld = $.extend(true, {}, dataObj);
      var sortOrder = _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["InputfieldPageGridSort"](el.parent());
      var sortOrderOld = el.parent().data('sortOrderOld'); // console.log(sortOrderOld);

      throttleCreateRedoUndo(el, dataObjOld, dataObjNew, dataObjNewAll, sortOrder, sortOrderOld);
    }
  }

  console.log('save: ' + dataId + ' name:' + name);

  if (setStyle) {
    setStyles(el, pageId, dataId, local, animation);
  }
} // set styles in js for better performance

function setStyles(el, pageId, dataId) {
  var local = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var animation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return function (dataId) {
    var css = "";
    var iframe = $('#pg-iframe-canvas');
    var c = iframe.contents();
    var tagName = String(el.prop('tagName')).toLowerCase();
    var global = 0;
    var data = $('.pg-container').data('pg');
    var pName = c.find('[data-id=' + pageId + ']').attr('id');

    if (typeof dataId == 'undefined') {
      return;
    }

    if (typeof $('.pg-container').data('pg')[pageId] != "undefined") {
      if (typeof $('.pg-container').data('pg')[pageId][dataId] != "undefined") {
        data = $('.pg-container').data('pg')[pageId][dataId];
      }

      if (animation) {
        var animationName = $('.pg-animation-active').attr('data-value');
        data = $('.pg-container').data('pg')[pageId][animationName][dataId];
      }
    }

    if (typeof data == 'undefined') {
      return;
    }

    if (typeof data.breakpoints == "undefined") {
      return;
    }

    var rootEl = 0;

    if (c.find('[data-id=' + pageId + ']').hasClass('pg-main')) {
      var rootEl = 1;
    } //set ID for style tag


    if (pName !== undefined) {
      if (data['id'].startsWith('pgitem')) {
        var dataId = pName;
      } else {
        var dataId = pName + data['id'];
      }
    }

    if ($('.pg-class-active').length && local == 0) {
      var global = 1;
      var classId = $('.pg-class-active').attr('data-value');
      var pName = classId;

      if (data['id'].startsWith('pgitem')) {
        var dataId = classId;
      } else {
        var dataId = classId + data['id'];
      }
    }

    $.each(data['breakpoints'], function (key, breakpoint) {
      //for backend use name rather than size to be able to set larger size on smaller screens
      if (breakpoint.name !== 's' && breakpoint.name !== 'base') {
        // css += ' ' + breakpoint.size + '{ ';
        css += ' .breakpoint-' + breakpoint.name + ' ';
      } // breakpoint s more specific to allow setting default mobile position


      if (breakpoint.name == 's') {
        // css += breakpoint.size + '{ html ';
        css += 'html.breakpoint-' + breakpoint.name + ' ';
      } //if no cssClass use page name


      if (data.cssClass == '') {
        if (data['id'].startsWith('pgitem')) {
          var pageName = el.attr('id');
        } else {
          var pageName = el.closest('.pg-item').attr('id');
        }

        data['cssClass'] = pageName;
      } //force parent class if id is not page name (subitem)


      if (!data['id'].startsWith('pgitem') && rootEl == 0) {
        if (data['id'] == String(data.tagName).toLowerCase() || data['id'] == String(data.tagName).toLowerCase() + ':hover') {
          data['cssClass'] = pName + ' ' + data['id'];
        } else {
          data['cssClass'] = pName + ' .' + data['id'];
        }
      } //END force parent class if id is not page name (subitem)
      //prefix animations


      if (animation) {
        var animationName = $('.pg-animation-active').attr('data-value');
        var animationPrefix = 'pg-animation-';
        var keyframeName = $('.pg-animation-keyframe-active').attr('data-id');

        if (data['keyframe'] !== undefined) {
          dataId = keyframeName;
          data['cssClass'] = keyframeName;
        } else {
          dataId = animationPrefix + animationName;
          data['cssClass'] = animationPrefix + animationName;
        }
      } //END set ID for style tag
      //render selector


      if (data.cssClass == String(data.tagName).toLowerCase() || data.cssClass == String(data.tagName).toLowerCase() + ':hover') {
        css += String(data.tagName).toLowerCase() + '{ ';
      } else {
        css += '.' + data['cssClass'] + '{ ';
      } // render css


      $.each(breakpoint['css'], function (key, val) {
        var cssAtribute = key.replace(/[A-Z]/g, function (m) {
          return "-" + m.toLowerCase();
        });
        var fallbackFonts = $('.pg-container').attr('data-fallbackfonts');

        if (cssAtribute == 'font-family' && fallbackFonts) {
          val += ', ' + $('.pg-container').attr('data-fallbackfonts');
        } // vh to px 
        // var vhHeight = vhToPx(val);
        // if (vhHeight) {
        //     val = vhHeight;
        // }
        // END vh to px


        css += cssAtribute + ': ' + val + ';';
      });
      css += '}';
    }); //set id for tags

    if (global == 0 && dataId == tagName) {
      var parentId = el.closest('.pg-item').attr('id');
      var dataId = parentId + tagName;
    } //replace styles to keep document order


    var globalClass = '';

    if (global) {
      var globalClass = 'pg-global'; //unique selector for global classes to prevent duplicate

      var dataId = 'g-' + dataId;
    } //hover fix, ":" not allowed in classId


    if (typeof dataId !== 'undefined') {
      var dataId = dataId.replace(':', '');
    }

    var styleOld = c.find("style.pg-style-id-" + dataId);
    var style = "<style class='pg-style pg-style-id-" + dataId + " " + globalClass + "' type='text/css'>" + css + "</style>"; // console.log(dataId);
    // console.log(style);
    // console.log('setstyles for: ' + dataId);

    if (styleOld.length) {
      // console.log('style existst');
      styleOld.replaceWith(style);
    } else {
      //new style
      if (global) {
        var lastItem = c.find('style.pg-global').last() || c.find('style.pg-style').first();
      } else {
        var lastItem = c.find('style.pg-style').last() || c.find('style.pg-style-defaults');
      } //if no items insert after defaults


      if (!lastItem.length) {
        var lastItem = c.find('style.pg-style-defaults');
      }

      if (animation) {
        var lastItem = c.find('head style').last();
      }

      $(style).insertAfter(lastItem);
    } // remove style attr


    if (!animation && !$("body").hasClass("pg-dragging")) {
      el.removeAttr("style");
    } //update overlay


    _overlay__WEBPACK_IMPORTED_MODULE_3__["overlay"](el);
    _overlay__WEBPACK_IMPORTED_MODULE_3__["overlay"](el.parent());
  }(dataId);
}

function createRedoUndo(el, dataObjOld, dataObjNew, dataObjNewAll, sortOrder, sortOrderOld) {
  // console.log('CREATE UNDO 😎');
  // create undo redo
  _undo_redo__WEBPACK_IMPORTED_MODULE_5__["undoManager"].add({
    undo: function undo() {
      if (typeof dataObjOld !== 'undefined') {
        $('.pg-container').data('pg', dataObjOld);
        _settings__WEBPACK_IMPORTED_MODULE_4__["itemSettingsSet"](true);

        if (typeof sortOrderOld !== 'undefined') {
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["sortParent"](el.parent(), sortOrderOld);
          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["updateSort"](el.parent(), sortOrderOld);
        }

        saveData(el, 0, 0, 0, false, false);
      }
    },
    redo: function redo() {
      if (typeof dataObjNew !== 'undefined') {
        $('.pg-container').data('pg', dataObjNewAll);
        _settings__WEBPACK_IMPORTED_MODULE_4__["itemSettingsSet"](true);
        _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["sortParent"](el.parent(), sortOrder);
        _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_1__["updateSort"](el.parent(), sortOrder);
        saveData(el, 0, 0, 0, false, false);
      }
    }
  }); // END create undo redo
} // export function vhToPx(val) {
//     if (val == null || val == 0) {
//         return false;
//     }
//     //convert to string
//     val = String(val);
//     if (val.length < 3) {
//         return false;
//     }
//     //get last two characters
//     var unit = val.slice(-2);
//     if (unit == 'vh') {
//         var vhHeight = Number(val.replace(/[^\d.-]/g, ''));
//         if (vhHeight) {
//             var height = $(window).height() * (vhHeight / 100);
//             var height = height - 110;
//             return Math.round(height) + 'px';
//         } else {
//             return false;
//         }
//     } else {
//         return false;
//     }
// }

/***/ }),

/***/ "./main/settings.js":
/*!**************************!*\
  !*** ./main/settings.js ***!
  \**************************/
/*! exports provided: getSavedValue, setFieldState, getSelectableAnimations, getSelectableClasses, sanitizeClassName, changeTagname, initSettings, itemSettingsSet, itemSettingsGet, setFontWeights, initActiveTab, createContextMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSavedValue", function() { return getSavedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setFieldState", function() { return setFieldState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSelectableAnimations", function() { return getSelectableAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSelectableClasses", function() { return getSelectableClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sanitizeClassName", function() { return sanitizeClassName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeTagname", function() { return changeTagname; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSettings", function() { return initSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "itemSettingsSet", function() { return itemSettingsSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "itemSettingsGet", function() { return itemSettingsGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setFontWeights", function() { return setFontWeights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initActiveTab", function() { return initActiveTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createContextMenu", function() { return createContextMenu; });
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/throttle */ "../../node_modules/lodash/throttle.js");
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./save */ "./main/save.js");
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./overlay */ "./main/overlay.js");
/* harmony import */ var _colorcolor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./colorcolor */ "./main/colorcolor.js");
/* harmony import */ var _colorcolor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_colorcolor__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jquery.fontpicker */ "./main/jquery.fontpicker.js");
/* harmony import */ var _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./InputfieldPageGrid */ "./main/InputfieldPageGrid.js");
/* harmony import */ var _drag_resize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drag-resize */ "./main/drag-resize.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./observer */ "./main/observer.js");
/* harmony import */ var _input_rangeslider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./input-rangeslider */ "./main/input-rangeslider.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }










var show;
var skipClasses;
var throttleSave = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(_save__WEBPACK_IMPORTED_MODULE_1__["saveData"], 300);
var throttleOverlay = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(_overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"], 50); //  get saved values ----------------------------

function getSavedValue(el, name) {
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var className = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var iframe = document.getElementById('pg-iframe-canvas');
  var c = iframe.contentDocument;
  if (!el || typeof el === 'undefined' || typeof el.tagName === 'undefined') el = c.querySelector('.pg-item-active');
  if (!el || typeof el === 'undefined' || typeof el.tagName === 'undefined') return;
  var breakpoint = document.body.getAttribute('data-breakpoint');
  var pageId = el.getAttribute('data-id') || '';
  var dataId = el.getAttribute('data-class') || el.getAttribute('id') || '';
  var tagName = el.tagName.toLowerCase(); // var parentId = el.closest('.pg-item').getAttribute('id');

  var value = '';
  var data = $('.pg-container').data('pg');

  if (!pageId && el.closest('.pg-item')) {
    var pageId = el.closest('.pg-item[data-id]').getAttribute('data-id') || '';
  }

  if (el.classList.contains('pg-item') && el.hasAttribute('data-id')) {
    var dataId = 'pgitem';
  }

  if (dataId == '' || typeof dataId === 'undefined') {
    var dataId = tagName;
  }

  if (document.querySelector('.pg-class-active') && context === 'global') {
    var pageId = document.querySelector('.pg-container').getAttribute('data-id');
    var dataId = document.querySelector('.pg-class-active').getAttribute('data-value');
  }

  if (context === 'global' && className) {
    var pageId = document.querySelector('.pg-container').getAttribute('data-id');
    var dataId = className;
  }

  if (pageId == null || !pageId) {
    var pageId = c.querySelector('.pg-main').getAttribute('data-id');
  }

  if (el.closest('[data-class]') && dataId == tagName && context !== 'global') {
    var dataIdClass = el.closest('[data-class]').getAttribute('data-class');

    if (typeof dataIdClass !== 'undefined' && dataIdClass !== false) {
      var dataId = dataIdClass + tagName;
    }
  } // animation


  if ($('#tab-interactions.uk-active').length && $('.pg-animation-active').length && name !== '--pg-animation') {
    //get nested data
    var pageIdAnimations = $('.pg-container').attr('data-animations-id');
    var pageId = $('.pg-animation-active').attr('data-value');
    var dataId = $('.pg-animation-active').attr('data-value');
    data = data[pageIdAnimations]; //keyframe if not animation value

    if (document.querySelector('.pg-animation-keyframe-active') && !name.startsWith('animation') && !name.startsWith('pg-animation')) {
      dataId = $('.pg-animation-keyframe-active').attr('data-id'); // console.log('get keyframe data');
    }
  } // END animation


  if (!data[pageId]) {
    return value;
  }

  if (!data[pageId][dataId]) {
    return value;
  }

  data = data[pageId][dataId]; // for pg- prefix just return value

  if (name.startsWith('pg-')) {
    name = name.substring(3);

    if (data[name]) {
      value = data[name];
    }

    return value;
  }

  if (typeof data !== 'undefined') {
    if (name == 'data-classes' && data.cssClasses !== undefined) {
      return data.cssClasses;
    }

    if (name == 'data-attributes' && data.attributes !== undefined) {
      return data.attributes;
    }
  }

  if (typeof data === 'undefined') {
    return value;
  }

  if (typeof data.breakpoints === 'undefined') {
    return value;
  }

  if (typeof data.breakpoints[breakpoint] !== 'undefined') {
    if (typeof data.breakpoints[breakpoint].css[name] !== 'undefined') {
      value = data.breakpoints[breakpoint].css[name];
    }
  }

  if (value == '' && typeof data.breakpoints.m !== 'undefined' && breakpoint == 's') {
    if (typeof data.breakpoints.m.css[name] !== 'undefined') {
      value = data.breakpoints.m.css[name];
    }
  } //use base fallback value


  if (value == '' && typeof data.breakpoints.base !== 'undefined' && breakpoint !== 'base') {
    if (typeof data.breakpoints.base.css[name] !== 'undefined') {
      value = data.breakpoints.base.css[name];
    }
  }

  if (value === undefined || value == 'undefined') {
    value = '';
  }

  return value;
}
function setFieldState(el, name, value) {
  var context = '';
  var savedValue = getSavedValue(el, name, context, null);
  var inputfieldContent = document.querySelector('.pg-settings .Inputfield_' + name);
  var inputfieldContentCombo = document.querySelector('.pg-settings .field-combo.Inputfield_' + name);

  if (!document.body.contains(inputfieldContent)) {
    return;
  }

  var notes = inputfieldContent.querySelector('.notes');
  inputfieldContent.classList.remove('pg-settings-hasvalue', 'pg-settings-class-hasvalue'); //remove classes also from unit selectt

  if (document.body.contains(inputfieldContentCombo)) inputfieldContentCombo.classList.remove('pg-settings-hasvalue', 'pg-settings-class-hasvalue');

  if (notes) {
    notes.classList.remove('pg-settings-hasvalue', 'pg-settings-class-hasvalue');
  }

  if (savedValue !== '') {
    inputfieldContent.classList.add('pg-settings-hasvalue');

    if (notes) {
      notes.classList.add('pg-settings-hasvalue');
    }
  }

  if (el.classList.contains('pg-item') && (el.tagName === 'H1' || el.tagName === 'H2' || el.tagName === 'H3' || el.tagName === 'H4' || el.tagName === 'H5' || el.tagName === 'H6' || el.tagName === 'P' || el.tagName === 'SPAN' || el.tagName === 'I') && savedValue === '') {
    context = 'global';
    inputfieldContent.classList.remove('pg-settings-hasvalue');

    if (notes) {
      notes.classList.remove('pg-settings-hasvalue');
    } // console.log('context global!');

  } // check if also a class value exists


  if (document.querySelector('.pg-class-active') && name !== 'data-classes' || context === 'global') {
    context = 'global';
    var classValue = getSavedValue(el, name, context, null);

    if (classValue && document.querySelector('.pg-class-active')) {
      inputfieldContent.classList.add('pg-settings-class-hasvalue');
      if (document.body.contains(inputfieldContentCombo)) inputfieldContentCombo.classList.add('pg-settings-class-hasvalue');

      if (notes) {
        notes.classList.add('pg-settings-class-hasvalue');
      } // console.log('added class value');

    } // handle overwrite, show global value only if no page value exists


    if (savedValue === '' && classValue !== '') {
      var savedValue = classValue;
    }
  }
}
function getSelectableAnimations() {
  var pageId = $('.pg-container').attr('data-animations-id');
  var settingsDataObj = $('.pg-container').data('pg')[pageId];
  var array = [];

  if (settingsDataObj == null) {
    return false;
  }

  $.each(settingsDataObj, function (idx, item) {
    array.push(idx);
  });
  return array;
}
function getSelectableClasses() {
  var pageId = $('.pg-container').attr('data-id');
  var array = [];

  if ($('.pg-container').data('pg') == null) {
    return false;
  }

  if ($('.pg-container').data('pg')[pageId] == null) {
    return false;
  }

  var settingsDataObj = $('.pg-container').data('pg')[pageId];
  $.each(settingsDataObj, function (idx, item) {
    if (typeof item.cssClass != "undefined") {
      // remove tag names from classes
      var cssClasses = item.cssClass;
      var cssClassesClean = cssClasses.split(" ")[0];
      var cssClasses = item.cssClass.trim();

      if (cssClasses == item.tagName || cssClasses == 'DIV' || cssClasses == 'div') {
        return;
      } // console.log('class list add: ' + cssClasses);


      array.push(cssClassesClean);
    }
  });
  return array;
}
function sanitizeClassName(name) {
  return name.replace(/[!\"#$%&'\(\)\*\+,\.\/:;<=>\?\@\ü\ä\ö\[\\\]\^`\{\|\}~]/g, '').toLowerCase();
}
function changeTagname(el, value) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var elId = el.attr('id');
  var attr = ''; // copy all attributes from old elemnt

  $.each(el[0].attributes, function () {
    if (this.specified) {
      // // console.log(this.name, this.value);
      attr += this.name + '="' + this.value + '" ';
    }
  });
  el.replaceWith(function () {
    return $('<' + value + ' ' + attr + ' />').append(el.contents());
  });
  var el = c.find('#' + elId); // reinit

  _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["reInitItem"](el); // save and disable debounce

  _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 0, 0, 0, 0, 0);
} // init settings

function initSettings() {
  // // console.log('init item Settings');
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var settings = $(".pg-settings-active.pg-stylepanel");
  var el = c.find('.pg-item-active'); // return early if no active item exists

  if (!el.length) {
    // // console.log('no active item');
    return false;
  }

  el.removeClass('pg-event-trigger-load pg-event-trigger-hover pg-event-trigger-scroll pg-event-trigger-click');
  $('.pg-settings-hasvalue').removeClass('pg-settings-hasvalue');
  $('.pg-class-active').removeClass('pg-class-active');
  $('.pg-settings-class-hasvalue').removeClass('pg-settings-class-hasvalue');
  $('.pg-settings .pg-animation-active').removeClass('pg-animation-active');

  if (el.hasClass('pg-main')) {
    //    settings.find('.Inputfield_layout').hide();
    //    settings.find('.Inputfield_display').hide();
    settings.find('.Inputfield_data-show').show();
  } else {
    //    settings.find('.Inputfield_display').show();
    settings.find('.Inputfield_data-show').hide();
  }

  if (el.hasClass('pg')) {
    //update overlay
    _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"](el);
    settings.find('.Inputfield_pg_settings_grid').show(); //        $('#Inputfield_pg_settings_typography').hide();

    settings.find('.Inputfield_object-fit').hide();
    settings.find('.Inputfield_display').show();
  } else {
    // settings.find('.Inputfield_display').hide();
    settings.find('.Inputfield_pg_settings_grid').hide();
  }

  if (el.hasClass('pg-item')) {
    settings.find('#Inputfield_layout').show(); //    settings.find('#wrap_Inputfield_data-classes').show();
    // settings.find('#Inputfield_pg_settings_typography').hide();

    settings.find('.Inputfield_object-fit').hide(); //    settings.find('.Inputfield_color').hide();
    //    settings.find('.Inputfield_data-color-opacity').hide();

    settings.find('.Inputfield_grid-row-start').show();
    settings.find('.Inputfield_grid-column-start').show();
    settings.find('.Inputfield_data-attributes').show();
  } else {
    settings.find('.Inputfield_data-attributes').hide();
  }

  if (el.hasClass('pg') && el.hasClass('pg-item')) {
    settings.find('#Inputfield_pg_settings_typography').show();
  } //if el has custom class added via template code
  // if (typeof customClass !== 'undefined' && customClass !== false) {
  //     settings.find('#Inputfield_pg_settings_selector').hide();
  // } else {
  //     settings.find('#Inputfield_pg_settings_selector').show();
  // }


  if (el.hasClass('pg-item') && el.children('.pg-data[data-pg-tags]').length) {
    $('#Inputfield_pg_settings_typography').show();
    $('#wrap_Inputfield_data-tagname').show();
  } else {
    $('#wrap_Inputfield_data-tagname').hide();
  }

  if (el.is('h1') || el.is('h2') || el.is('h3') || el.is('h4') || el.is('h5') || el.is('h6') || el.is('p') || el.is('span') || el.is('i') || el.is('a')) {
    $('#Inputfield_pg_settings_typography').show();
  }

  if (el.is('img') || el.is('video')) {
    settings.find('.Inputfield_object-fit').show();
    settings.find('.Inputfield_colors').hide();
    settings.find('#Inputfield_pg_settings_typography').hide();
  } else {
    settings.find('.Inputfield_colors').show();
  }

  if (el.parent().css('display') == 'grid') {
    settings.find('.Inputfield_pg_settings_griditem').show();
  } else {
    settings.find('.Inputfield_pg_settings_griditem').hide();
  }

  if (el.parent().css('display') == 'flex') {
    settings.find('.Inputfield_pg_settings_flexitem').show();
  } else {
    settings.find('.Inputfield_pg_settings_flexitem').hide();
  } // if (el.parent().css('display') == 'block') {
  //     settings.find('.Inputfield_align-self').hide();
  //     settings.find('.Inputfield_justify-self').hide();
  // } else {
  //     settings.find('.Inputfield_align-self').show();
  //     settings.find('.Inputfield_justify-self').show();
  // }
  // init fontpicker


  if (!$('.font-picker').lengh) {
    // custom fonts via pw inputfield setting
    var localFonts = $('#Inputfield_font-family').attr('local-fonts');

    if (typeof localFonts !== 'undefined' && localFonts !== false) {
      var localFonts = localFonts.split(",");
      var lFonts = _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4__["localFonts"];
      console.log(localFonts);

      for (var i = 0; i < localFonts.length; i++) {
        lFonts[localFonts[i]] = {};
        lFonts[localFonts[i]].category = 'display';
        lFonts[localFonts[i]].variants = '400';
        lFonts[localFonts[i]].subsets = 'latin';
      }
    }

    $('.fp-modal').css('display', 'none');
    $('.fp-clear').trigger('click');
    $('#Inputfield_font-family').fontpicker({
      debug: 'false',
      lang: 'en',
      variants: true,
      lazyLoad: true,
      showClear: false,
      nrRecents: 3,
      parentElement: '.Inputfield_font-family',
      localFontsUrl: '/site/templates/fonts/',
      // End with a slash!
      localFonts: lFonts
    });
    $(document).click(function () {
      $('.fp-modal').css('display', 'none');
    });
    $(document).on('click', '.fp-clear', function (e) {
      $('.fp-modal').css('display', 'none');
    });
    $(document).on('click', '.fp-select', function (e) {
      e.stopPropagation();
      var inputWidth = $(this).outerWidth();
      $('.fp-modal').css('width', inputWidth + 'px');
      $('.fp-clear').trigger('click');
      $('.fp-modal').css('display', 'flex');
      $('.fp-results').scrollTop(0);
      $('.fp-search').focus();
    });
    $(document).on('click', '.fp-results li, .fp-filter', function (e) {
      e.stopPropagation(); // // console.log('click');

      $(this).find('button.apply').trigger('click');
      $(this).addClass('fp-active');
    });
  } // END init fontpicker
  // turn select class to buttons


  $(document).on('click', '.pg-settings .pg-btn', function () {
    $('.pg-btn').removeClass('on');
    $(this).addClass('on');
    var selectOption = $(this).text();
    $(this).parent().find('select').val(selectOption).change();
  }); // END turn select class to buttons
  // trigger click to open/close settings on label click

  $(document).on('click', '.pg-settings-container .InputfieldHeader', function () {
    var toggleIcon = $(this).find('.toggle-icon').first();

    if (toggleIcon.is(":visible")) {
      toggleIcon.trigger("click");
    }
  }); // END trigger click to open/close settings on label click
  //get data if none found
  // if (typeof el.data('pg') != 'undefined') {
  //     itemSettingsSet();
  // } else {
  //     grid.getItemData(pageId, dataId);
  // }    

  itemSettingsSet();
} // set values

function itemSettingsSet() {
  var skipClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  console.log('itemSettingsSet'); // use vanilla js for better performace

  var iframe = document.getElementById('pg-iframe-canvas');
  var c = iframe.contentDocument;
  var settings = document.querySelector(".pg-settings-active.pg-stylepanel");
  var el = c.querySelector('.pg-item-active'); // return early if no active item exists

  if (!el || !settings) return false;
  var dataId = el.getAttribute('data-class'); // only support data-classes, no id here

  var pageId = el.getAttribute('data-id');
  var fields = settings.querySelectorAll('input[name]'); //clear class values

  $('.pg-settings-class-hasvalue').removeClass('pg-settings-class-hasvalue');
  fields.forEach(function (field, index) {
    // if(field.style.display === 'none') {
    //     return;
    // }
    var name = field.getAttribute('name');
    var nameAdd = field.getAttribute('name-add') || name;
    var type = field.getAttribute('type');
    var unit = '';
    var value = getSavedValue(el, name, null, null);
    var placeholder = field.getAttribute('placeholder') || 0;

    if (placeholder) {
      field.value = placeholder;
    } //disable autocomplete for input (preventing arrow keys to work)


    if (type === 'number') {
      field.setAttribute('autocomplete', 'off');
    } // console.log('elData: ' + value);
    // console.log('itemSettingsSet');


    if (value == '') {
      var value = getSavedValue(el, name, context = 'global', null); // console.log('🌎:' + value);
    } //custom attributes input


    if (name == 'data-attributes' && value && value !== undefined) {
      field.value = value;
      return;
    } // set field states 


    setFieldState(el, name, value); //class selector

    if (name == 'data-classes') {
      if (field.classList.contains('InputfieldTextTagsInput') && field.classList.contains('selectized') && !skipClasses) {
        field.value = value;

        if (field.selectize) {
          field.selectize.destroy();
        }

        InputfieldTextTags('#wrap_Inputfield_data-classes'); //disable sortable for classes (causes bug with html tag selector)

        $('#wrap_Inputfield_data-classes .selectize-input.ui-sortable').sortable("disable");
        var selectableClasses = getSelectableClasses();

        for (var i in selectableClasses) {
          field.selectize.addOption({
            value: selectableClasses[i],
            text: selectableClasses[i]
          });
        }

        if (el.classList.contains('pg-item') || c.querySelector('.pw-edit-InputfieldCKEditor .pg-item-active') || c.querySelector('.pw-edit-InputfieldTinyMCE .pg-item-active') || el.classList.contains('pg-main')) {
          field.selectize.enable();
        } else {
          //disable adding classes for non pg items
          field.selectize.disable();
        }

        field.selectize.removeItem('DIV', true);
        field.selectize.removeItem('div', true);
        field.selectize.removeItem('body', true);
        field.selectize.removeItem('h1', true);
        field.selectize.removeItem('h2', true);
        field.selectize.removeItem('h3', true);
        field.selectize.removeItem('h4', true);
        field.selectize.removeItem('h5', true);
        field.selectize.removeItem('h6', true);
        field.selectize.removeItem('p', true);
        field.selectize.removeItem('pg-main', true);
        field.selectize.removeOption('DIV');
        field.selectize.removeOption('div');
        field.selectize.removeOption('body');
        field.selectize.removeOption('h1');
        field.selectize.removeOption('h2');
        field.selectize.removeOption('h3');
        field.selectize.removeOption('h4');
        field.selectize.removeOption('h5');
        field.selectize.removeOption('h6');
        field.selectize.removeOption('p');
        field.selectize.removeOption('pg-main'); // remove tagname

        if (document.querySelector('#wrap_Inputfield_data-classes .pg-tag-name')) {
          document.querySelector('#wrap_Inputfield_data-classes .pg-tag-name').remove();
        } // if div remove tagname spacing


        if (el.tagName.toLowerCase() === 'div') {
          document.querySelector('body').style.setProperty('--pg-tag-name-width', '0');
        } // add tagname


        if (el.tagName.toLowerCase() !== 'div') {
          var tagName = el.tagName.toLowerCase();
          var tagNameMarkup = '<div class="pg-tag-name" data-value="' + tagName + '">' + tagName + '</div>';
          document.querySelector('#wrap_Inputfield_data-classes .selectize-input.items').insertAdjacentHTML("beforebegin", tagNameMarkup);
          document.querySelector('body').style.setProperty('--pg-tag-name-width', document.querySelector('#wrap_Inputfield_data-classes .pg-tag-name').offsetWidth + 4 + "px");
        }

        if (el.classList.contains('pg-main')) {
          var tagNameMarkup = '<div class="pg-class-name pg-class-name-pin" data-value="pg-main">wrapper</div>';
          document.querySelector('#wrap_Inputfield_data-classes .selectize-input.items').insertAdjacentHTML("beforebegin", tagNameMarkup);
          document.querySelector('body').style.setProperty('--pg-tag-name-width', document.querySelector('#wrap_Inputfield_data-classes .pg-class-name').offsetWidth + 4 + "px");
        } // add id to class for easy global setting


        if (dataId && !pageId) {
          var tagNameMarkup = '<div class="pg-class-name" data-value="' + dataId + '">' + dataId + '</div>';
          document.querySelector('#wrap_Inputfield_data-classes .selectize-input.items').insertAdjacentHTML("beforeend", tagNameMarkup);
        } // add element classes if not pg-item


        var classes = [];
        var classNames = el.getAttribute('class') || '';
        if (el.hasAttribute('class') && classNames) classes = classNames.split(' ');
        classes.forEach(function (item, idx) {
          //remove white spaces
          item = item.replace(/ /g, '');

          if (!item || item.startsWith("pg-") || item == 'pg' || item.startsWith("ui-") || item == dataId || item == el.getAttribute('id') || el.classList.contains('pg-item') && el.hasAttribute('data-id') || el.tagName.toLowerCase() == 'body') {
            return;
          } //if item is already set return


          if ($('#wrap_Inputfield_data-classes .selectize-input > div[data-value="' + item + '"]').length) {
            return;
          } //if editor focus add item, so it can be removed


          if (c.querySelector('.pw-edit-InputfieldCKEditor .pg-item-active') || c.querySelector('.pw-edit-InputfieldTinyMCE .pg-item-active')) {
            field.selectize.addItem(item, true);
            return;
          }

          var tagNameMarkup = '<div class="pg-class-name" data-value="' + item + '">' + item + '</div>';
          document.querySelector('#wrap_Inputfield_data-classes .selectize-input.items').insertAdjacentHTML("afterbegin", tagNameMarkup);
        });
      }

      return;
    } // return if field is hiden for better performance
    //    if (field.is(":hidden")) {
    //      // console.log('field is hidden return');
    //      return;
    //    }
    // global value as fallback


    if (value == '') {
      // console.log('set global value');
      var context = 'global'; // get tagname first

      document.querySelectorAll('#wrap_Inputfield_data-classes .pg-tag-name').forEach(function (item, index) {
        var className = item.getAttribute('data-value');
        var Classvalue = getSavedValue(el, name, context, className);

        if (Classvalue !== '') {
          value = Classvalue;
          return;
        }
      }); //get classes overwriting tagname

      document.querySelectorAll('#wrap_Inputfield_data-classes .selectize-input > div[data-value], #wrap_Inputfield_data-classes .pg-class-name').forEach(function (item, index) {
        var className = item.getAttribute('data-value');
        var Classvalue = getSavedValue(el, name, context, className);

        if (Classvalue !== '') {
          value = Classvalue; // console.log('GLOBAL 🌎: ' + name + ': ' + value);

          return;
        }
      });
    } //animation selector


    if (name == '--pg-animation') {
      if (field.classList.contains('InputfieldTextTagsInput') && field.classList.contains('selectized') && !skipClasses) {
        //if --pg-animation just get computed value, works also with global classes
        value = window.getComputedStyle(el).getPropertyValue(name);
        if (value === 'unset') value = '';
        field.value = value;

        if (field.selectize) {
          field.selectize.destroy();
        } //disable sortable for classes (causes bug with html tag selector)


        InputfieldTextTags('#wrap_Inputfield_--pg-animation');
        $('#wrap_Inputfield_--pg-animation .selectize-input.ui-sortable').sortable("disable");
        var selectableAnimations = getSelectableAnimations();

        for (var i in selectableAnimations) {
          field.selectize.addOption({
            value: selectableAnimations[i],
            text: selectableAnimations[i]
          });
        }

        if (value) {
          if (!$('.pg-animation-active').length) {
            $('.pg-settings .Inputfield_--pg-animation .selectize-input > div[data-value]').last().addClass('pg-animation-active');
          } //init keyframes


          _input_rangeslider__WEBPACK_IMPORTED_MODULE_8__["setAnimationkeyframes"]();
        }
      }
    }

    if (name == "data-color-opacity") {
      var dataType = field.getAttribute('data-type');
      var value = getSavedValue(el, dataType, null, null);

      if (value != '') {
        var value = value.split(/[s,]+/);
        var value = value[value.length - 1];
        var value = value.replace(")", "");
        var value = Number(value);
      }

      if (isNaN(value)) {
        var value = '';
      } // console.log(name + ": " + value);

    }

    if (type == 'range' && placeholder && value == '') {
      field.value = placeholder;
      value = placeholder;
    } // add name option: define addition value name


    if (name == 'transform' && nameAdd !== undefined && nameAdd !== false && nameAdd && value) {
      var itemAdd = field;
      var addItemName = itemAdd.getAttribute('name-add');
      var addItemNameLength = addItemName.length;
      var isProp = value.includes(addItemName); // get everything after ''

      if (isProp) {
        value = value.substring(value.indexOf(addItemName) + addItemNameLength) || ''; // 01-2020

        value = value.split(" ")[0];
        value = value.replace(/[^\d.-]/g, '');
      } else {
        value = '';
      }

      console.log(value); // var transformValues = value.split(" ") || [];
      // transformValues.forEach(function (val) {
      //     val = String(val);
      //     var isProp = val.includes(addItemName)
      //     if (!isProp) return;
      //     val = val.replace(/\D/g, '');
      //     field.value = val;
      //     console.log(val);
      //     return;
      // });
    } // css value as fallback


    if (value === '' && (name === 'grid-template-columns' || name === 'column-gap' || name === 'row-gap')) {
      // if (value === '' && (name === 'grid-template-columns' || name === 'column-gap' || name === 'row-gap' || name === font-family)) {
      // console.log('set computed css values');
      var computedStyle = window.getComputedStyle(el);
      var value = computedStyle.getPropertyValue(name); // console.log('🦧css fallback: ' + value);

      if (value === '0px') {
        value = '';
      }
    } // if no value change return


    if (value == field.value) {// console.log('no value change')
      // return;
    } // if (value == 'undefined' || value == 'NaN' || value == null) {
    //     return;
    // }


    if (value === undefined) {
      return;
    } //    OLD: elements that don 't work with style need data- fallback
    // if (typeof el.attr('data-' + name) !== 'undefined' && el.attr('data-' + name) !== false) {
    //     var value = el.attr('data-' + name);
    // }
    // console.log(name + ' ' + value);


    if (name == 'background-image' || name == 'list-style-image') {
      var bgUrl = value.replace('url(', '').replace(')', '').replace(/\"/gi, "");
      $(field).parent().find('.pg-fileupload').attr('src', bgUrl);
    }

    if (name == 'font-family') {
      //      var value = value.replace(/s/g, '+');
      //      var value = value.replace(/['"]+/g, '');
      //      var value = value.split(':')[0];
      var fontWeight = getSavedValue(el, 'font-weight', null, null);
      var fontStyle = getSavedValue(el, 'font-style', null, null); // console.log('font: ' + value + ':' + fontWeight + fontStyle);
      // $('.pg-settings #Inputfield_font-family').val(value + ':' + fontWeight + fontStyle).trigger('change');

      document.querySelector('#Inputfield_font-family').value = value + ':' + fontWeight + fontStyle;
      document.querySelector('#Inputfield_font-family').dispatchEvent(new Event('change'));
      setFontWeights($(el), value);
    }

    if ((type == 'number' || type == 'range') && value) {
      // value = parseInt(value);
      value = value.toString();
      value = value.replace(/[^\d.-]/g, '');
      value = parseFloat(value.replace(',', '.').replace(' ', ''));
    }

    if (type == 'color') {
      // if empty value set default color
      if (value == '') {
        value = field.getAttribute('placeholder');
      }

      if (value == 'rgba(0, 0, 0, 0)' || value == 'transparent' || value == 'transp') {
        // console.log('invalid rgba value');
        value = '#ffffff';
      }

      value = _colorcolor__WEBPACK_IMPORTED_MODULE_3__(value, "hex");
      field.value = value;
      return;
    }

    if (name === 'grid-template-columns') {
      // var value = el.attr('data-columns');
      var computedStyle = window.getComputedStyle(el);
      var value = computedStyle.getPropertyValue('grid-template-columns').split('px').length - 1;
    }

    if (name == 'grid-template-rows') {
      var value = el.getAttribute('data-rows');
    } // console.log(name + ": " + value);
    //last chef if nan


    if (isNaN(value)) {
      return;
    }

    field.value = value;
  });
  var fields = settings.querySelectorAll('select[name]');
  fields.forEach(function (field) {
    // if(field.style.display === 'none') {
    //     return;
    // }
    var name = field.getAttribute('name');
    var value = getSavedValue(el, name); // remove first empty option from select

    if ($(field).find('option').first().attr('value') === '') {
      field.options[0] = null;
    }

    field.value = $(field).find('option').first().attr('value'); // set field state

    setFieldState(el, name, value); // global value as fallback

    if (value == '') {
      var context = 'global';
      document.querySelectorAll('#wrap_Inputfield_data-classes .selectize-input > div[data-value], #wrap_Inputfield_data-classes .pg-tag-name, #wrap_Inputfield_data-classes .pg-class-name').forEach(function (className) {
        var classValue = getSavedValue(el, name, context, className.getAttribute('data-value'));

        if (classValue !== '') {
          value = classValue;
          return;
        }
      });
    }

    if (value == '') {
      var context = 'global';
      value = getSavedValue(el, name, context, null);
    } // set css fallback


    if (value == '') {
      var computedStyle = window.getComputedStyle(el);
      value = computedStyle.getPropertyValue(name);
    } // turn select class to buttons


    if (field.classList.contains('pg-select-btn')) {
      field.parentNode.parentNode.querySelectorAll('.pg-btn').forEach(function (btn) {
        btn.remove();
      });
      field.style.display = 'none';
      field.querySelectorAll('option').forEach(function (option) {
        var btn = document.createElement('div');
        btn.className = 'pg-btn';
        btn.setAttribute('data-value', option.value);
        btn.textContent = option.textContent;
        field.parentNode.appendChild(btn);
      });
      field.parentNode.parentNode.querySelector('.pg-btn[data-value="' + value + '"]').classList.add('on');
    } // END turn select class to buttons


    if (name == 'data-tagname') {
      // remove options
      field.querySelectorAll('option').forEach(function (option) {
        option.remove();
      }); // add selectable options

      if (el.classList.contains('pg-item') && el.querySelector('.pg-data[data-pg-tags]')) {
        var selectableTags = el.querySelector('.pg-data').getAttribute('data-pg-tags');

        if (selectableTags) {
          var selectableTagsArray = selectableTags.split(' ');

          for (var i in selectableTagsArray) {
            field.appendChild(new Option(selectableTagsArray[i], selectableTagsArray[i]));
          }
        }
      }

      value = el.tagName.toLowerCase();
    } //add options to animation trigger element select


    if (name === "pg-animation-trigger") {
      //first remove old options
      if (field.querySelector('optgroup')) {
        field.querySelector('optgroup').remove();
      }

      var selectableClasses = getSelectableClasses();
      var optgroup = document.createElement('OPTGROUP');
      optgroup.label = 'Select Class';

      for (var i in selectableClasses) {
        // field.add(new Option(selectableClasses[i]));
        var opt = document.createElement('OPTION');
        opt.textContent = '.' + selectableClasses[i];
        opt.value = '.' + selectableClasses[i];
        optgroup.appendChild(opt);
      }

      field.appendChild(optgroup);
    } // set placement dropdown


    if (name == 'data_item_placement' && el.classList.contains('pg-item')) {
      value = 'Manual';

      if ($(el).css('gridRowStart') == 'auto') {
        value = 'Auto Row';
        settings.querySelector('.Inputfield_grid-row-start').style.display = 'none';
      }

      if ($(el).css('gridColumnStart') == 'auto') {
        value = 'Auto Column';
        settings.querySelector('.Inputfield_grid-column-start').style.display = 'none';
      }

      if ($(el).css('gridColumnStart') == 'auto' && $(el).css('gridRowStart') == 'auto') {
        value = 'Auto';
      }

      field.value = value;
      return;
    }

    if (name == 'font-weight') {
      var fontStyle = getSavedValue(el, 'font-style', null, null);

      if (fontStyle === 'italic') {
        value += fontStyle;
      }
    }

    if (name === 'display') {
      if (value === 'grid') {
        document.querySelector('.Inputfield_pg_settings_grid').style.display = 'flex';
      } else {
        if (document.querySelector('.pg-overlay')) {
          document.querySelector('.pg-overlay').remove();
        }

        document.querySelector('.Inputfield_pg_settings_grid').style.display = 'none';
      }

      if (value === 'flex') {
        document.querySelector('.Inputfield_pg_settings_flex').style.display = 'flex';
      } else {
        document.querySelector('.Inputfield_pg_settings_flex').style.display = 'none';
      }
    }

    if (value === 'undefined' || value === 'NaN' || value === null || value === undefined) {
      return;
    } //unit select


    if (field.classList.contains('unit')) {
      var unit = value.toString().replace(/[0-9]/g, '');
      var inputField = document.querySelector('.pg-settings input[type="number"][name="' + name + '"]');

      if (!inputField) {
        inputField = document.querySelector('.pg-settings input[type="number"][name-add="' + name + '"]');
      }

      unit = unit.replace(/\./g, "");
      unit = unit.replace("-", "");

      if (name === 'translateY') {
        var value = getSavedValue(el, 'transform');
        var transformArray = value.split(' ');

        for (var i = 0; i < transformArray.length; i++) {
          if (transformArray[i].startsWith(name)) {
            unit = transformArray[i].toString();
            unit = unit.replace(/[0-9]/g, '');
            unit = unit.replace(name, "");
            unit = unit.replace("(", "");
            unit = unit.replace(")", "");
            unit = unit.replace(/\./g, "");
            unit = unit.replace("-", "");
            console.log(unit);
          }
        }
      } // console.log('👽 name:' + name);
      // console.log('value:' + value);
      // console.log('unit:' + unit);


      if (unit === 'px' || unit === 'vh' || unit === 'vw' || unit === '%') {
        value = unit;
      } //if responsive units allow float value on input


      if (inputField) {
        if (unit === 'vh' || unit === 'vw' || unit === '%') {
          inputField.setAttribute('step', '0.1');
        } else {
          inputField.setAttribute('step', '1');
        }
      }

      if (value === 'auto' || value === 'none' && field) {
        if (field.querySelector('option[value="auto"]') && value === 'auto') {
          value = 'auto';
        } else {
          value = 'px';
        }
      }
    } // console.log(name + ": " + value);


    if (value) {
      field.value = value;
    }
  }); //update overlay

  _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"]($(el).parent()); //init tabs after values are set

  initActiveTab();
} //get values

function itemSettingsGet() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents(); //on animation input trigger spacebar as a return

  $(document).on("change keyup input", ".pg-settings #Inputfield_--pg-animation-selectized", function (e) {
    if (e.keyCode == 32) {
      var e = $.Event("keydown");
      e.which = 13;
      e.keyCode = 13;
      $(this).trigger(e);
    }
  }); // on events alternatives: change paste keyup input

  $(document).on("change keyup input", ".pg-settings-active.pg-stylepanel input[name]", function (e) {
    // vanilla getAttribute more performant then jquery attr
    var el = c.find('.pg-item-active');
    var settings = $(".pg-settings-active.pg-stylepanel");
    var field = $(this);
    var name = field[0].getAttribute('name');
    var nameAdd = field[0].getAttribute('name-add') || name;
    var type = field[0].getAttribute('type');
    var unit = field[0].getAttribute('unit') || '';
    var value = field[0].value;
    var inputfieldContent = $('.Inputfield_' + name);
    var dataId = el[0].getAttribute('id');
    if (!el) return; //new always save rgb value for scroll color animation to work

    if (type == 'color') {
      value = _colorcolor__WEBPACK_IMPORTED_MODULE_3__(value);
      throttleSave(el, name, value);
      return;
    }

    if (name == 'data-attributes' && value !== 'data-id' && value !== 'data-template' && value !== 'data-name' && name != 'data-classes') {
      // console.log('data-attributes');
      el.attr(name, value);
      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el);
      return false;
    } //end attributes
    // change range value when connecting input changes


    if (settings.find('input[type="number"][name="' + name + '"]').length && settings.find('input[type="range"][name="' + name + '"]').length) {
      console.log(value);
      var typeChange = 'number';

      if (field.attr('type') && field.attr('type') === 'number') {
        var typeChange = 'range';
      }

      if (name === 'transform') {
        settings.find('input[type="' + typeChange + '"][name-add="' + nameAdd + '"]').val(value);
      } else {
        settings.find('input[type="' + typeChange + '"][name="' + name + '"]').val(value);
      }
    } // END change range value when connecting input changes


    if ($('.pg-class-active').length) {
      field.closest('.Inputfield').addClass('pg-settings-class-hasvalue');
      inputfieldContent.addClass('pg-settings-class-hasvalue');
    } else {
      field.closest('.Inputfield').addClass('pg-settings-hasvalue');
      inputfieldContent.addClass('pg-settings-hasvalue');
    } // classes dropdown


    if (name == 'data-classes') {
      // console.log('data-classes input: ' + value);
      if (dataId == '' || typeof dataId == 'undefined' && c.find('.pw-edit-InputfieldTinyMCE .pg-item-active').length == 0 && c.find('.pw-edit-InputfieldCKEditor .pg-item-active').length == 0) {
        var el = el.closest('.pg-item');
      }

      if ($("#Inputfield_data-classes-selectized").is(":focus")) {
        field[0].selectize.open();
      }

      if (value == '') {
        el.removeClass('pg-dummy-12345 ' + getSavedValue(el, name));
        el.attr(name, value);
      } else {
        //        $('.pg-create-class').show();
        var value = sanitizeClassName(value);
      } //spacebar + return triggers settings refresh


      if (e.keyCode == 32 || e.keyCode == 13 || $('.InputfieldTextTags').length) {
        // remove tag names from string
        //      var selectorItems = field[0].selectize('items');
        var selectorItems = value.split(" ");
        var value = '';

        for (var i in selectorItems) {
          var selectorItemValue = selectorItems[i];

          if (selectorItemValue != 'h1' || selectorItemValue != 'h2' || selectorItemValue != 'h3' || selectorItemValue != 'h4' || selectorItemValue != 'h5' || selectorItemValue != 'h6' || selectorItemValue != 'p') {
            value += selectorItemValue + ' ';
          }
        } // END remove tag names from string
        //remove classes, dummy class prevents removing all classes if value is ''


        el.removeClass('pg-dummy-12345 ' + getSavedValue(el, name)); //remove classes for editor item

        if (el.parents('.pw-edit-InputfieldTinyMCE').length || el.parents('.pw-edit-InputfieldCKEditor').length) {
          //add classes
          el.attr('class', field.val()); // el.closest('.pw-edit').addClass('pw-changed pw-editited');

          _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["inlineSave"](el.closest('.pw-edit')); //add active class back

          el.attr('class', 'pg-item-active ' + field.val());
        } else {
          el.addClass(value);
          el.attr(name, value);
          _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el);
        }

        itemSettingsSet(skipClasses = true);
      }

      return false;
    }

    if (name == '--pg-animation') {
      $('.pg-settings .pg-animation-active').removeClass('pg-animation-active');
      setTimeout(function () {
        var breakpoint = $('body').attr('data-breakpoint'); //hide dropdown
        // field[0].selectize.close();

        field[0].selectize.blur();
        $('.pg-settings .selectize-dropdown').hide();

        if (breakpoint !== 'base' && !value) {
          value = 'unset';
        }

        $('.pg-settings .Inputfield_--pg-animation .selectize-input > div[data-value]').last().addClass('pg-animation-active');
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value, 0, 0, 0);
        _input_rangeslider__WEBPACK_IMPORTED_MODULE_8__["setAnimationkeyframes"]();
        itemSettingsSet(skipClasses = true);
        return;
      }, 50);
    } // END classes dropdown


    if (name == 'data-show') {
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["showHidden"]();
    } // if empty value remove style and return


    if (value.trim() == "") {
      el.css(name, '');
      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, '');
      return;
    }

    if (name == "data-color-opacity") {
      var dataType = field.attr('data-type');
      var name = dataType;
      var color = $("#" + dataType).val();
      var opacity = value;

      if (value > 0.9) {
        var opacity = 1;
      }

      if (value < 0.1) {
        var opacity = 0;
      }

      var value = 'rgba(' + parseInt(color.slice(-6, -4), 16) + ',' + parseInt(color.slice(-4, -2), 16) + ',' + parseInt(color.slice(-2), 16) + ',' + opacity + ')'; // console.log('alpha value: ' + name + ': ' + value);
    } //check if select option with same name exists and add to value
    //if no nameAdd, var is set to name above


    var unitSelect = $('select[name="' + nameAdd + '"]');

    if (unitSelect.length) {
      var unit = unitSelect.val() || '';

      if (unit == 'auto') {
        // var value = 'auto';
        // field.val(value);
        // save.saveData(el, name, value);
        // return;
        unitSelect.val('px');
        unit = 'px';
      } //bug with empty select


      if (!unit) {
        unit = unitSelect.children('option').first().attr('value') || '';
        unitSelect.val(unit);
      }

      if (unit === 'px') {
        field.attr('step', '1');
      } else {
        field.attr('step', '0.1');
      }

      console.log(nameAdd);
      console.log(unit);
    }

    if (type == 'number') {
      var value = parseFloat(value.replace(/,/g, '.'));
      var step = field.attr('step') || 1; // console.log('step:', step);
      //arrow up

      if (e.which == 38 && event.shiftKey) {
        value = value + 9 * step;
      } //arrow down


      if (e.which == 40 && event.shiftKey) {
        value = value - 9 * step;
      }

      if (!Number.isInteger(value)) {
        value = value.toFixed(2);
      } //if min=0 only allow positive numbers


      if (field[0].getAttribute('min') && field[0].getAttribute('min') === '0' && value) {
        value = Math.abs(value);
      }

      field.val(value);
    } // add name option: define addition value name


    if (name == 'transform' && typeof nameAdd !== 'undefined' && nameAdd !== false) {
      // reset value and add from all transform fields
      var value = ''; //save all transform values (use number to avoid duplicates with range)

      settings.find('input[name="transform"][type="number"]').each(function () {
        var itemAdd = $(this);
        var addItemName = itemAdd.attr('name-add');
        var addItemUnit = itemAdd.attr('unit') || settings.find('select[name="' + addItemName + '"]')[0].value;
        var itemAddVal = itemAdd.val();
        console.log(itemAddVal);
        if (!itemAddVal) return;

        if (typeof addItemUnit == 'undefined' && addItemUnit == false) {
          addItemUnit = '';
        }

        if (typeof addItemName !== 'undefined' && addItemName !== false) {
          value += ' ' + addItemName + '(' + itemAddVal + addItemUnit + ')';
        }
      });
      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value);
      return;
    }

    if (name == 'grid-column-end' || name == 'grid-row-end') {
      if (value !== -1) {
        var value = 'span ' + value;
      }
    }

    if (name == 'grid-template-columns') {
      var gridColumns = value; // select only direct children of grid

      el.find('> .pg-item').each(function (i, item) {
        var colStart = parseInt($(item).css('grid-column-start'));
        var colEnd = parseInt($(item).css('grid-column-end').replace('span ', '')); // console.log('totalWidth: ' + colStart + colEnd);

        if (colStart + colEnd > gridColumns && colStart > 2 && !($(item).css('grid-column-start') == 'auto')) {
          $(item).css('grid-column-start', colStart - 1);
          _save__WEBPACK_IMPORTED_MODULE_1__["saveData"]($(item)); // console.log('make item smaller: ' + colStart + colEnd);
        }

        if (colEnd > gridColumns) {
          if (colEnd <= 2) {
            var colEnd = 3;
          }

          $(item).css('grid-column-end', 'span ' + gridColumns);
          $(item).css('grid-column-start', 'auto');
          $(item).css('grid-row-start', 'auto');
          _save__WEBPACK_IMPORTED_MODULE_1__["saveData"]($(item)); // console.log('make item smaller: ' + colStart + colEnd);
        }
      });
      var value = "repeat(" + gridColumns + ", [col-start] 1fr)";
      _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"](el);
    } // if (name == 'column-gap' || name == 'row-gap' || name == 'padding' || name == 'margin' && el.parent().css('display') == 'grid') {
    //     overlay.overlay(el);
    //     overlay.overlay(el.parent());
    // }


    if (name == 'grid-template-rows') {
      var value = 'auto';
    } //set unit


    if ((type == 'number' || type == 'range') && unit) {
      var value = value + unit;
    }

    if (name == 'background-image' || name == 'list-style-image') {
      var value = 'url("' + value + '")'; // console.log('background-image changed!');
    }

    if (name == 'font-family') {
      setFontWeights(el, value);
    }

    if (name.startsWith("data")) {
      return;
    } //throttle save


    throttleSave(el, name, value); // save.saveData(el, name, value);
  }); //  settings.find('select').on('change', function (e) {

  $(document).on("change", ".pg-settings-active.pg-stylepanel select[name]", function (e) {
    var settings = $(".pg-settings-active.pg-stylepanel");
    var field = $(this);
    var name = field.attr('name');
    var option = $("option:selected", this);
    var value = this.value;
    var el = c.find('.pg-item-active');

    if ($('.pg-class-active').length) {
      field.closest('.Inputfield').addClass('pg-settings-class-hasvalue');
    } else {
      field.closest('.Inputfield').addClass('pg-settings-hasvalue');
    }

    if (name == 'display') {
      if (value == 'grid') {
        settings.find('.Inputfield_pg_settings_grid').show(); //save to make overlay work

        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value, 0, 1);
        _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"](el);
        var columns = el.css("grid-template-columns").split("px").length - 1;
        $('#Inputfield_grid-template-columns').val(columns);
      } else {
        el.children('.pg-overlay').first().remove();
        settings.find('.Inputfield_pg_settings_grid').hide();
      }

      if (value == 'flex') {
        settings.find('.Inputfield_pg_settings_flex').show();
      } else {
        settings.find('.Inputfield_pg_settings_flex').hide();
      }

      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value, 0, 1);
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["showHidden"]();
    }

    if (name == 'data-tagname') {
      changeTagname(el, value); // save.saveData(el);

      itemSettingsSet(); // initSettings();
    }

    if (name === 'pg-animation-event') {
      initActiveTab();
    } //unit select


    if (field.hasClass('unit')) {
      if (value === 'auto') {
        $('.Inputfield_' + name + ' input').val('');
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value);
        return;
      }

      var valueNumber = settings.find("input[name='" + name + "']").val() || settings.find("input[name-add='" + name + "']").val();
      var value = valueNumber + value; //trigger change

      settings.find("input[name='" + name + "']").trigger('change');
      settings.find("input[name-add='" + name + "']").trigger('change');
      return; // save.saveData(el, name, value, false, true);
    } // // console.log(option);
    // console.log(value);


    el.css(name, value);

    if (field.is("#Inputfield_data_item_placement")) {
      // if there is no manual value create value from position
      var colStart = el.css('grid-column-start');
      var rowStart = el.css('grid-row-start'); // if (isNaN(rowStart) || value == 'Manual') {
      // console.log('isNAN');

      var offset = el.offset();
      var pLeft = offset.left;
      var pTop = offset.top;
      var itemSizerStart = el.parent().children('.pg-overlay').eq(0).find('.pg-overlay-column').closestToOffset({
        left: pLeft,
        top: pTop
      });

      if (itemSizerStart) {
        colStart = parseInt(itemSizerStart.attr('data-column'));
        rowStart = parseInt(itemSizerStart.attr('data-row'));
      } // console.log('get colStart:' + colStart);
      // console.log('get rowStart:' + rowStart);


      $("#Inputfield_grid-column-start").val(colStart);
      $("#Inputfield_grid-row-start").val(rowStart);
      el.attr('col', colStart);
      el.attr('col', rowStart); // }
      // console.log('PLACEMENT: ' + value);

      if (value == 'Manual') {
        el.css('grid-column-start', colStart);
        el.css('grid-row-start', rowStart);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-column-start', colStart, false, true, false);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-row-start', rowStart, false, true, false); // save.saveData(el, 'grid-column-end', colEnd, false, true);
        // save.saveData(el, 'grid-row-end', 'span ' + rowEnd, false, true);

        $('.Inputfield_grid-column-start').show();
        $('.Inputfield_grid-row-start').show();
      }

      if (value == 'Auto Row') {
        //        el.css('grid-column-start', 'auto');
        el.css('grid-row-start', 'auto');
        el.css('grid-column-start', colStart);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-row-start', 'auto', false, true, false);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-column-start', colStart, false, true, false);
        $('.Inputfield_grid-column-start').show();
        $('.Inputfield_grid-row-start').hide();
      }

      if (value == 'Auto Column') {
        //        el.css('grid-column-start', 'auto');
        el.css('grid-column-start', 'auto');
        el.css('grid-row-start', rowStart);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-column-start', 'auto', false, true, false);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-row-start', rowStart, false, true, false);
        $('.Inputfield_grid-column-start').hide();
        $('.Inputfield_grid-row-start').show();
      }

      if (value == 'Auto') {
        //        el.css('grid-column-start', 'auto');
        el.css('grid-row-start', 'auto');
        el.css('grid-column-start', 'auto');
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-column-start', 'auto', false, true, false);
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'grid-row-start', 'auto', false, true, false);
        $('.Inputfield_grid-column-start').hide();
        $('.Inputfield_grid-row-start').hide();
      }

      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el);
    }

    if (field.is('#Inputfield_pg_settings_class_select')) {
      itemSettingsSet();
    }

    if (name == 'font-weight') {
      var fontFamily = getSavedValue(el, 'font-family', null, null);
      var fontFamily = fontFamily.replaceAll("+", " ");
      var fontFamily = fontFamily.split(':')[0]; // console.log('font-weight change: ' + fontFamily + value);
      //      settings.find('#Inputfield_font-family').val(fontFamily + ':' + value);

      if (value.indexOf('italic') > -1) {
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'font-style', 'italic');
        var value = value.replace('italic', '');
      } else {
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'font-style', '');
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, '');
      }
    }

    if (name.startsWith("data")) {
      return;
    } // console.log("final select value: " + value);


    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, value);
  });
}
function setFontWeights(el, fontFamily) {
  var fontFamily = fontFamily.replaceAll("+", " ");
  fontFamily = fontFamily.split(':')[0];
  var getVariants = _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4__["__googleFonts"][fontFamily] || _jquery_fontpicker__WEBPACK_IMPORTED_MODULE_4__["localFonts"][fontFamily];
  var fontFamilyOld = getSavedValue(el, 'font-family', 'global', null) || getSavedValue(el, 'font-family', null, null);
  $('#Inputfield_font-weight option').remove();

  if (getVariants) {
    var fontVariant = getVariants.variants || 'normal';
    var fontVariantArr = fontVariant.split(',');
    $.each(fontVariantArr, function (index, value) {
      var fontVariantName = '';
      if (value.startsWith('100')) fontVariantName = 'Thin';
      if (value.startsWith('200')) fontVariantName = 'Extra Light';
      if (value.startsWith('300')) fontVariantName = 'Light';
      if (value.startsWith('400')) fontVariantName = 'Normal';
      if (value.startsWith('regular')) fontVariantName = 'Normal';
      if (value.startsWith('500')) fontVariantName = 'Medium';
      if (value.startsWith('600')) fontVariantName = 'Semi Bold';
      if (value.startsWith('700')) fontVariantName = 'Bold';
      if (value.startsWith('800')) fontVariantName = 'Extra Bold';
      if (value.startsWith('900')) fontVariantName = 'Black';

      if (value.endsWith('italic') || value === 'italic') {
        fontVariantName += ' Italic';
      } else {// save.saveData(el, 'font-style', '');
        // save.saveData(el);
      }

      $('#Inputfield_font-weight').append('<option value="' + value + '">' + fontVariantName + '</option>');
    });
  } else {
    $('#Inputfield_font-weight').append('<option value="normal">normal</option>');
    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'font-style', '');
  } //if value changed set font weight back to default


  if (fontFamily !== fontFamilyOld) {
    $('#Inputfield_font-weight').val('400').change();
    $('.Inputfield_font-weight').removeClass('pg-settings-hasvalue');
    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'font-weight', '');
    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'font-style', '');
  }
}
function initActiveTab() {
  var triggerAnimation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var settings = $('.pg-settings');
  var tabInteraction = $('#tab-interactions.uk-active').length;
  var triggerValue = $('#Inputfield_pg-animation-event').val();
  var animationName = $('.pg-animation-active').attr('data-value') || '';
  var animationCss = ''; //remove animation trigger classes

  c.find('.pg-event-trigger-load').removeClass('pg-event-trigger-load');
  c.find('.pg-event-trigger-hover').removeClass('pg-event-trigger-hover');
  c.find('.pg-event-trigger-scroll').removeClass('pg-event-trigger-scroll');
  c.find('.pg-event-trigger-click').removeClass('pg-event-trigger-click'); //remove keyframe classes

  c.find("[class*='pg-keyframe-']").each(function () {
    var prefix = "pg-keyframe-";
    var classes = $(this)[0].getAttribute('class').split(" ").filter(function (c) {
      return !c.startsWith(prefix);
    });
    $(this)[0].setAttribute('class', classes.join(" ").trim());
  }); //styles tab is active

  if (!tabInteraction) {
    settings.find('.Inputfield_pg_settings_selector').parent().show();
    settings.find('.Inputfield_interactions').hide();
    settings.find('.Inputfield_pg_settings_selector').parent().show();
    settings.find('.Inputfield_interactions').hide();
    settings.find('.Inputfield_pg_settings_selector').show();
    settings.find('.Inputfield_layout').show();
    settings.find('.Inputfield_data-attributes').show();
    settings.find('.Inputfield_font-family').show();
    settings.find('.Inputfield_text-align').show();
    settings.find('.Inputfield_font-weight').show();
    settings.find('.Inputfield_pg_settings_typography .Inputfield_pg_settings_advanced').show();
    settings.find('.Inputfield_background .Inputfield_pg_settings_advanced').show();
    settings.find('.Inputfield_mix-blend-mode').show();
    return;
  } //if no animation hide styles and settings


  if (tabInteraction && !animationName) {
    settings.find('.Inputfield_interactions').show();
    settings.find('.Inputfield_interactions li:not(.Inputfield_--pg-animation)').hide();
    settings.find('.Inputfield_pg_settings_selector').parent().hide(); //remove active states

    settings.find('.pg-animation-keyframe-active').removeClass('pg-animation-keyframe-active');
  } //interaction tab is active


  if (tabInteraction && animationName) {
    //show interactions
    settings.find('.Inputfield_interactions').show();
    settings.find('.Inputfield_interactions li:not(.Inputfield_--pg-animation)').show();
    settings.find('.Inputfield_pg_settings_selector').parent().show(); //if no value set, create default value for animation

    var triggerValueSaved = getSavedValue(el, 'pg-animation-event');

    if (!triggerValueSaved) {
      // alert('save default animation');
      triggerValue = 'load'; // settings.find('select[name="pg-animation-event"]').val(triggerValue);

      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'pg-animation-event', triggerValue, 0, 0, 0);
      _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 'animation-duration', '0.6s', 0, 0, 0);
    } //update css animation and keyframes


    settings.find('.Inputfield_data-animation-keyframes .ui-slider-handle').each(function () {
      var keyframeID = $(this).attr('data-id');
      var keyframeValue = $(this).attr('data-value');
      var keyframeStylesRaw = c.find('style.pg-style-id-' + keyframeID).html() || '';
      var keyframeStyles = keyframeStylesRaw.split('{').pop().split('}')[0];

      if (keyframeStyles) {
        animationCss += keyframeValue + '% { ' + keyframeStyles + ' } ';
      }

      el.removeClass(keyframeID);
    });

    if (triggerAnimation) {
      console.log('trigger animation: ' + animationCss);
      el.css('transition', '');
      el.css('animation', '');
      el.css('animation-delay', '0s'); //update animation keyframes

      if (animationCss) {
        c.find('style.pg-style-animation').remove();
        animationCss = '@keyframes ' + animationName + ' { ' + animationCss + ' } ';
        animationCss += '.pg-event-trigger-' + triggerValue + '.pg-animation-' + animationName + ' { animation-name:' + animationName + '; }';
        var style = '<style class="pg-style-animation">' + animationCss + '</style>';
        var lastItem = c.find('head style').last();
        $(style).insertAfter(lastItem);
        console.log(style);
      } // trigger a DOM reflow to reinit animation


      void el[0].offsetWidth; // add animation trigger class

      el.addClass('pg-animation-' + animationName);
      el.addClass('pg-event-trigger-' + triggerValue); //animate progress

      var duration = el.css('animation-duration');
      var timing = el.css('animation-timing-function');
      settings.find('.pg-animation-progress').css('transition-duration', duration);
      settings.find('.pg-animation-progress').css('transition-timing-function', timing);
      settings.find('.pg-animation-progress').css('width', '100%');
    } else {
      var duration = el.css('animation-duration');
      el.css('transition', 'all ease 0.6s');
      el.css('animation', 'none'); //add keyframe trigger class

      var keyframeID = $('.pg-animation-keyframe-active').attr('data-id'); //trigger transition

      el.addClass(keyframeID);
    } //pause animation at end


    el.css('animation-fill-mode', 'forwards');
    el.css('animation-iteration-count', '1'); //add keyframe class after animation finishes

    var ani = el[0].getAnimations()[0];
    el[0].addEventListener("animationend", function () {
      console.log('animation finished');
      var el = c.find('.pg-item-active');
      var keyframeID = $('.pg-animation-keyframe-active').attr('data-id');
      el.css('transition', 'all ease 0.6s');
      el.css('animation', 'none');
      el.removeClass('pg-event-trigger-' + triggerValue);
      el.addClass(keyframeID);
      settings.find('.pg-animation-progress').css('transition-duration', '0s');
      settings.find('.pg-animation-progress').css('width', '0');
    }); //hide all the properties that are not animatable 

    settings.find('.Inputfield_layout').hide();
    settings.find('.Inputfield_pg_settings_selector').hide();
    settings.find('.Inputfield_data-attributes').hide();
    settings.find('.Inputfield_font-family').hide();
    settings.find('.Inputfield_text-align').hide();
    settings.find('.Inputfield_font-weight').hide();
    settings.find('.Inputfield_pg_settings_typography .Inputfield_pg_settings_advanced').hide();
    settings.find('.Inputfield_background .Inputfield_pg_settings_advanced').hide();
    settings.find('.Inputfield_mix-blend-mode').hide(); //show/hide scroll specific settings

    if (triggerValue === 'scroll' || triggerValue === 'inview') {
      settings.find('.Inputfield_animation-timing-function').hide();
      settings.find('.Inputfield_animation-delay').hide();
      settings.find('.Inputfield_animation-duration').hide();
      settings.find('.Inputfield_pg-animation-pin').show();
      settings.find('.Inputfield_pg-animation-start').show();
      settings.find('.Inputfield_pg-animation-once').show();
      settings.find('.Inputfield_pg-animation-distance').show();
      settings.find('.Inputfield_pg-animation-timing').show();
    } else {
      settings.find('.Inputfield_animation-timing-function').show();
      settings.find('.Inputfield_animation-delay').show();
      settings.find('.Inputfield_animation-duration').show();
      settings.find('.Inputfield_pg-animation-pin').hide();
      settings.find('.Inputfield_pg-animation-start').hide();
      settings.find('.Inputfield_pg-animation-once').hide();
      settings.find('.Inputfield_pg-animation-distance').hide();
      settings.find('.Inputfield_pg-animation-timing').hide();
    }

    if (triggerValue === 'inview') {
      settings.find('.Inputfield_animation-delay').show();
      settings.find('.Inputfield_animation-duration').show();
    }

    if (triggerValue === 'hover' || triggerValue === 'click') {
      settings.find('.Inputfield_pg-animation-reverse').show();
    } else {
      settings.find('.Inputfield_pg-animation-reverse').hide();
    }
  }
}
function createContextMenu(active, menuItems, e) {
  var mouseX = e.pageX;
  var mouseY = e.pageY;
  $('.pg-context-menu-active').removeClass('pg-context-menu-active');
  active.addClass('pg-context-menu-active');
  $('.pg-context-menu').remove();
  $('body').append('<div style="left:' + mouseX + 'px; top:' + mouseY + 'px;" class="pg-context-menu"></div>');

  for (var _i = 0, _Object$entries = Object.entries(menuItems); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    $('.pg-context-menu').append('<a class="' + key + '">' + value + '</a>');
  }
}

function deleteClass(dataClass) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var globalPageId = $('.pg-container').attr('data-id');
  _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["removeItem"](dataClass, globalPageId);
  $('#Inputfield_data-classes')[0].selectize.removeItem(dataClass, false); // delete local class

  delete $('.pg-container').data('pg')[globalPageId][dataClass];
  c.find("style.pg-style-id-g-" + dataClass).remove();
  itemSettingsSet(true);
}

function deleteAnimation(dataClass) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var globalPageId = $('.pg-container').attr('data-animations-id');
  _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["removeItem"](dataClass, globalPageId);
  $('#Inputfield_--pg-animation')[0].selectize.removeItem(dataClass, false); // delete local class

  delete $('.pg-container').data('pg')[globalPageId][dataClass];
  c.find("style.pg-style-id-g-" + dataClass).remove();
  itemSettingsSet(true);
}

function updateClass(dataClass) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active'); // var dataId = el.attr('data-class') || el.attr('id');

  var dataId = 'pgitem';
  var pageId = el.attr('data-id') || el.closest('.pg-item').attr('data-id');
  var globalPageId = $('.pg-container').attr('data-id');
  var dataObj = $('.pg-container').data('pg');

  if (!el.hasClass('pg-item')) {
    var dataId = String(el.prop('tagName')).toLowerCase();
    ;
  }

  if (dataObj[pageId] != null && dataObj[globalPageId] != null) {
    if (dataObj[pageId][dataId] != null && dataObj[globalPageId][dataClass] != null) {
      var dataObjNew = $.extend(true, {}, dataObj[globalPageId][dataClass], dataObj[pageId][dataId]);
      dataObjNew['cssClass'] = dataClass;
      dataObj[globalPageId][dataClass] = dataObjNew; //add class to make set styles work

      $('.pg-class-active').removeClass('pg-class-active');
      $('.Inputfield_data-classes .selectize-input > div[data-value=' + dataClass + ']').addClass('pg-class-active');
      _save__WEBPACK_IMPORTED_MODULE_1__["setStyles"](el, globalPageId, dataClass);
      $('.pg-class-active').removeClass('pg-class-active');
      var jsonArray = JSON.stringify(dataObjNew);
      _InputfieldPageGrid__WEBPACK_IMPORTED_MODULE_5__["saveItem"](globalPageId, jsonArray);
      itemSettingsSet(true);
    }
  }
} // click events
// individual reset


$(document).on('click', '.pg-settings .InputfieldHeader, .pg-settings .notes, .pg-settings-container .ui-dialog-title', function (e) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var field = $(this).parent();

  if ($(this).hasClass('ui-dialog-title')) {
    // var field = $(this).parent().parent();
    var field = $('.pg-settings');
  }

  if (field.hasClass('pg-settings-hasvalue') && field.hasClass('pg-settings-class-hasvalue') && !e.altKey) {
    // console.log('RESET Override');
    field.find('input[name], select[name]').each(function (index) {
      var name = $(this).attr('name');

      if ($('.pg-class-active').length) {
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, '', true);
        itemSettingsSet(true); // field.val('');  
      }
    });
    _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"](el);
  }

  if (e.altKey) {
    // stops focusing inputfield on click of label (PW behaviour)
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation(); // console.log('RESET');
    //    field.parent().find('.pg-settings-class-hasvalue').removeClass('pg-settings-class-hasvalue');

    field.find('input[name], select[name]').each(function (index) {
      var f = $(this);
      var name = f.attr('name'); // el, name = 0, value = 0, local = 0, skipAjax = 0, debounce = 1

      if (name.startsWith('pg-')) {
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, '', 0, 0, 1, 0);
      } else {
        _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, name, '', 0, 1, 0, 0);
      } //remove field state


      f.closest('.Inputfield').removeClass('pg-settings-hasvalue');
    }); //call once to save ajax and set styles without debounce to make sure it runs

    _save__WEBPACK_IMPORTED_MODULE_1__["saveData"](el, 0, 0, 0, 0, 0);
    _overlay__WEBPACK_IMPORTED_MODULE_2__["overlay"](el);
    itemSettingsSet(true);
  } //create help links to CSS references 
  //check if shift is pressed


  if (e.shiftKey) {
    // stops focusing inputfield on click of label (PW behaviour)
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
    var field = $(this).parent();
    var helpUrl = "https://developer.mozilla.org/de/docs/Web/CSS/";
    var name = field.find('input[name], select[name]').first().attr('name');
    window.open(helpUrl + name, '_blank'); // console.log(helpUrl + name);
  }
});
$(document).on("mouseenter", ".pg-settings-container .InputfieldHeader, .pg-settings .notes, .pg-settings-container .ui-dialog-title", function (e) {
  if (e.altKey) {
    // console.log('ALT KEY');
    $(this).addClass('pg-reset-field');
  }

  if (e.shiftKey) {
    $(this).css("cursor", "help");
  }
});
$(document).on("mouseleave", ".pg-settings-container .InputfieldHeader, .pg-settings .notes, .pg-settings-container .ui-dialog-title", function (e) {
  // hover ends code here
  $(this).removeClass('pg-reset-field');
  $(this).css("cursor", "");
}); // END inidividuel reset
// create context menu on right click

$(document).on("contextmenu", ".Inputfield_data-classes .selectize-input > div[data-value], .Inputfield_data-classes .pg-tag-name, .Inputfield_data-classes .pg-class-name", function (e) {
  e.preventDefault();
  var active = $(this);
  var menuItems = {
    'pg-update-class': 'update class',
    'pg-delete-class': 'delete class'
  };

  if ($(this).hasClass('pg-tag-name')) {
    var menuItems = {
      'pg-update-class pg-update-tag': 'update styles',
      'pg-delete-class': 'delete styles'
    };
  }

  createContextMenu(active, menuItems, e);

  if ($(this).hasClass('pg-tag-name')) {
    $('.pg-delete-class').addClass('pg-delete-tag');
  }

  return false;
});
$(document).on('contextmenu', '.Inputfield_--pg-animation .selectize-input > div[data-value]', function (e) {
  e.preventDefault();
  var active = $(this);
  var menuItems = {
    'pg-delete-animation': 'delete animation'
  };
  createContextMenu(active, menuItems, e);
  return false;
});
$(document).on('click', 'html, body', function (e) {
  $('.pg-context-menu').hide();
}); // modal for classes

$(document).on('click', '.pg-delete-class, .pg-update-class, .pg-delete-animation', function (e) {
  e.preventDefault();
  var dataClass = $('.pg-context-menu-active').attr('data-value');
  var text = "";
  var title = "";
  var type = "";

  if ($(this).hasClass('pg-delete-class')) {
    text = "Are you sure you want to delete this class? <br><b>" + dataClass + "</b>";
    title = "Delete Class";
    type = "delete";
  }

  if ($(this).hasClass('pg-delete-tag')) {
    text = "Are you sure you want to delete all styles for this tag? <br><b>" + dataClass + "</b>";
    title = "Delete Styles";
    type = "delete";
  }

  if ($(this).hasClass('pg-update-class')) {
    title = "Update CLass";
    type = "update";
    text = "Are you sure you want to copy all styles for this item to class <b>" + dataClass + "</b>?";
  }

  if ($(this).hasClass('pg-update-tag')) {
    title = "Update Element";
    type = "update";
    text = "Are you sure you want to copy all styles for this item to <b>" + dataClass + "</b>?";
  }

  if ($(this).hasClass('pg-delete-animation')) {
    text = "Are you sure you want to delete this animation? <br><b>" + dataClass + "</b>";
    title = "Delete Animation";
    type = "deleteAnimation";
  }

  $(".pg-dialog").remove();
  $("body").append('<div class="pg-dialog"><span>' + text + '</span></div');
  $(".pg-dialog").dialog({
    //    height: 400,
    width: 450,
    title: title,
    modal: true,
    buttons: [{
      text: "Cancel",
      class: "ui-priority-secondary",
      click: function click() {
        $(this).dialog("close");
      }
    }, {
      text: title,
      click: function click() {
        $(this).dialog("close");

        if (type == 'delete') {
          deleteClass(dataClass);
        }

        if (type == 'update') {
          updateClass(dataClass);
        }

        if (type == 'deleteAnimation') {
          deleteAnimation(dataClass);
        }
      }
    }]
  });
}); // select class

$(document).on('click', '.Inputfield_data-classes .selectize-input > div[data-value], .Inputfield_data-classes .pg-tag-name, .Inputfield_data-classes .pg-class-name', function (e) {
  if ($(this).hasClass('pg-class-active')) {
    $('.pg-class-active').removeClass('pg-class-active');
  } else {
    $('.pg-class-active').removeClass('pg-class-active');
    $(this).addClass('pg-class-active');
  }

  itemSettingsSet(skipClasses = true);
}); // select animations

$(document).on('click', '.pg-settings .Inputfield_--pg-animation .selectize-input > div[data-value]', function (e) {
  $('.pg-animation-active').removeClass('pg-animation-active');
  $(this).addClass('pg-animation-active'); //set animation keyframes

  _input_rangeslider__WEBPACK_IMPORTED_MODULE_8__["setAnimationkeyframes"]();
  itemSettingsSet(skipClasses = true);
}); // hide image overlay to allow color picker

$(document).on('blur', '.pg-settings input[type="color"]', function (e) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  c.find('pg-uploader').removeClass('pg-file-picker-disable-all');
});
$(document).on('focus', '.pg-settings input[type="color"]', function (e) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  c.find('pg-uploader').addClass('pg-file-picker-disable-all');
}); // END hide image overlay to allow color picker
//play button to trigger animation

$(document).on('click', '.pg-settings .Inputfield_data-animation-keyframes .fa-play', function (e) {
  $(this).toggleClass('pg-playing');
  initActiveTab(true);
}); //set font preview

$(document).on("mouseover", ".Inputfield_font-family ul.fp-results li", function (event) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');
  var font = $(this).attr('data-font-family');

  if (el.length) {
    el.css('font-family', font);
  }
});
$(document).on("mouseout", ".Inputfield_font-family ul.fp-results li", function (event) {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var el = c.find('.pg-item-active');

  if (el.length) {
    el.css('font-family', '');
  }
});

/***/ }),

/***/ "./main/shortcuts.js":
/*!***************************!*\
  !*** ./main/shortcuts.js ***!
  \***************************/
/*! exports provided: shortcuts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shortcuts", function() { return shortcuts; });
/* harmony import */ var _undo_redo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./undo-redo */ "./main/undo-redo.js");
/* harmony import */ var _copy_paste__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./copy-paste */ "./main/copy-paste.js");


function shortcuts() {
  var iframe = $('#pg-iframe-canvas');
  var c = iframe.contents();
  var shiftIsPressed = false;
  $(document).keydown(function (event) {
    // console.log("Key:", event.which);
    // cmd + Z
    if (event.which == 90 && (event.ctrlKey || event.metaKey) && !event.shiftKey) {
      _undo_redo__WEBPACK_IMPORTED_MODULE_0__["undoManager"].undo();
    } // cmd + shift + Z


    if (event.which == 90 && (event.ctrlKey || event.metaKey) && event.shiftKey) {
      _undo_redo__WEBPACK_IMPORTED_MODULE_0__["undoManager"].redo();
    } // cmd + C


    if (event.which == 67 && (event.ctrlKey || event.metaKey) && !event.shiftKey) {
      // console.log("copy");
      var el = c.find('.pg-item-active');
      _copy_paste__WEBPACK_IMPORTED_MODULE_1__["copyItem"](el);
    } // cmd + V


    if (event.which == 86 && (event.ctrlKey || event.metaKey) && !event.shiftKey) {
      // console.log("paste");
      var el = c.find('.pg-item-active');
      _copy_paste__WEBPACK_IMPORTED_MODULE_1__["pasteItem"]();
    } // drag event manual/auto


    if (event.altKey) {
      // console.log('changed to auto placement');
      c.find('.pg-item.ui-draggable-dragging').css('grid-column-start', 'auto');
      c.find('.pg-item.ui-draggable-dragging').css('grid-row-start', 'auto');
    } // allow parent change for drag


    if (event.shiftKey) {
      //allow parent change
      c.find('.pg.ui-sortable').each(function () {
        var container = $(this);

        if (container.data('uiSortable')) {
          container.sortable("option", "connectWith", '.pg.ui-sortable');
        }
      });
    }
  }); //key is released

  $(document).keyup(function (event) {
    //deactivate parent change
    c.find('.pg.ui-sortable').each(function () {
      console.log('disable parent change');
      var container = $(this);

      if (container.data('uiSortable')) {
        container.sortable("option", "connectWith", 'false');
      }
    });
  });
}

/***/ }),

/***/ "./main/tabs.js":
/*!**********************!*\
  !*** ./main/tabs.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./main/settings.js");

$(document).on('click', '#tab-styles', function (e) {
  _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
});
$(document).on('click', '#tab-interactions', function (e) {
  _settings__WEBPACK_IMPORTED_MODULE_0__["itemSettingsSet"](true);
});

/***/ }),

/***/ "./main/uiFixes.js":
/*!*************************!*\
  !*** ./main/uiFixes.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

$(document).ready(function () {
  // show/hide save button
  if ($('body.ProcessPageEdit.hideSaveButton').length) {
    //on load give some time until tabs are loaded
    setTimeout(function () {
      hideSaveButton();
    }, 200);
    var targetNode = document.getElementById('ProcessPageEditContent');
    var observer = new MutationObserver(function () {
      hideSaveButton();
    });
    observer.observe(targetNode, {
      attributes: true,
      childList: true
    });
  } // END show/hide save button
  //if AdminThemeCanvas use native theme settings instead


  if ($('body.AdminThemeCanvas').length) {
    return;
  }

  console.log('run UIfix');

  if ($('body.ProcessPageEdit.hidePageHeadline').length) {
    $('<li><a href="../">' + $('#pw-content-title').text() + '</a></li>').appendTo($('.uk-breadcrumb').first());
  }

  if ($('body.ProcessPageEdit.hideTitleField').length) {
    $('#ProcessPageEditContent #wrap_Inputfield_title').prependTo($('#ProcessPageEditSettings .Inputfields').first());
  }

  if ($('body.AdminThemeUikit.hideTabs').length) {
    $('.AdminThemeUikit.hideTabs .uk-breadcrumb').append('<li><i class="fa fa-gear pw-nav-tabs"></i></li>'); // $(document).on('click', '.uk-breadcrumb .pw-nav-tabs', function () {
    //   var tabs = $('.AdminThemeUikit.hideTabs #PageEditTabs');
    //   tabs.toggleClass('active');
    //   var offset = $(this).offset().left - (tabs.width() / 2);
    //   tabs.css('left', offset + 'px');
    // });

    $(document).on('mouseover', '.uk-breadcrumb .pw-nav-tabs', function (event) {
      var tabs = $('.AdminThemeUikit.hideTabs #PageEditTabs');
      tabs.addClass('active');
      var offsetLeft = $(this).offset().left - tabs.width() / 2;
      var offsetTop = $(this).offset().top + $(this).height() + 5;
      tabs.css('left', offsetLeft + 'px');
      tabs.css('top', '0');
      tabs.css('padding-top', offsetTop + 'px');
    });
    $(document).on('mouseleave', '#PageEditTabs', function (event) {
      var tabs = $('.AdminThemeUikit.hideTabs #PageEditTabs');
      tabs.removeClass('active');
    });
  }
});

function hideSaveButton() {
  if ($('#ProcessPageEditContent').is(":visible") && $('#ProcessPageEditContent ul').first().children().length == 1) {
    $('#wrap_submit_save, #pw-content-head-buttons').hide();
  } else {
    $('#wrap_submit_save, #pw-content-head-buttons').show();
  }
}

/***/ }),

/***/ "./main/undo-redo.js":
/*!***************************!*\
  !*** ./main/undo-redo.js ***!
  \***************************/
/*! exports provided: undoManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undoManager", function() { return undoManager; });
/* harmony import */ var undo_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! undo-manager */ "../../node_modules/undo-manager/lib/undomanager.js");
/* harmony import */ var undo_manager__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(undo_manager__WEBPACK_IMPORTED_MODULE_0__);
//import from node modules


var UndoManager = __webpack_require__(/*! undo-manager */ "../../node_modules/undo-manager/lib/undomanager.js");

var undoManager = new UndoManager();
$(document).on('click', '.pg-undo', function () {
  undoManager.undo();
});
$(document).on('click', '.pg-redo', function () {
  undoManager.redo();
});

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./main/main.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./main/main.js */"./main/main.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,